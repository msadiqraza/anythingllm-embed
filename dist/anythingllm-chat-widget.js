(function(_t,xe){typeof exports=="object"&&typeof module<"u"?xe(exports):typeof define=="function"&&define.amd?define(["exports"],xe):(_t=typeof globalThis<"u"?globalThis:_t||self,xe(_t.EmbeddedAnythingLLM={}))})(this,function(_t){"use strict";var uT=Object.defineProperty;var cT=(_t,xe,Ht)=>xe in _t?uT(_t,xe,{enumerable:!0,configurable:!0,writable:!0,value:Ht}):_t[xe]=Ht;var a1=(_t,xe,Ht)=>(cT(_t,typeof xe!="symbol"?xe+"":xe,Ht),Ht);var $g,zg;var xe=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Ht(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function s1(t){if(t.__esModule)return t;var e=t.default;if(typeof e=="function"){var n=function r(){return this instanceof r?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};n.prototype=e.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(t).forEach(function(r){var o=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(n,r,o.get?o:{enumerable:!0,get:function(){return t[r]}})}),n}var Sc={exports:{}},sa={},Tc={exports:{}},te={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yr=Symbol.for("react.element"),i1=Symbol.for("react.portal"),l1=Symbol.for("react.fragment"),u1=Symbol.for("react.strict_mode"),c1=Symbol.for("react.profiler"),d1=Symbol.for("react.provider"),p1=Symbol.for("react.context"),f1=Symbol.for("react.forward_ref"),m1=Symbol.for("react.suspense"),g1=Symbol.for("react.memo"),h1=Symbol.for("react.lazy"),Nc=Symbol.iterator;function E1(t){return t===null||typeof t!="object"?null:(t=Nc&&t[Nc]||t["@@iterator"],typeof t=="function"?t:null)}var wc={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},xc=Object.assign,Rc={};function ar(t,e,n){this.props=t,this.context=e,this.refs=Rc,this.updater=n||wc}ar.prototype.isReactComponent={},ar.prototype.setState=function(t,e){if(typeof t!="object"&&typeof t!="function"&&t!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")},ar.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")};function Lc(){}Lc.prototype=ar.prototype;function ii(t,e,n){this.props=t,this.context=e,this.refs=Rc,this.updater=n||wc}var li=ii.prototype=new Lc;li.constructor=ii,xc(li,ar.prototype),li.isPureReactComponent=!0;var Oc=Array.isArray,kc=Object.prototype.hasOwnProperty,ui={current:null},Ic={key:!0,ref:!0,__self:!0,__source:!0};function Mc(t,e,n){var r,o={},a=null,s=null;if(e!=null)for(r in e.ref!==void 0&&(s=e.ref),e.key!==void 0&&(a=""+e.key),e)kc.call(e,r)&&!Ic.hasOwnProperty(r)&&(o[r]=e[r]);var i=arguments.length-2;if(i===1)o.children=n;else if(1<i){for(var l=Array(i),u=0;u<i;u++)l[u]=arguments[u+2];o.children=l}if(t&&t.defaultProps)for(r in i=t.defaultProps,i)o[r]===void 0&&(o[r]=i[r]);return{$$typeof:Yr,type:t,key:a,ref:s,props:o,_owner:ui.current}}function b1(t,e){return{$$typeof:Yr,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}function ci(t){return typeof t=="object"&&t!==null&&t.$$typeof===Yr}function A1(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,function(n){return e[n]})}var Fc=/\/+/g;function di(t,e){return typeof t=="object"&&t!==null&&t.key!=null?A1(""+t.key):e.toString(36)}function ia(t,e,n,r,o){var a=typeof t;(a==="undefined"||a==="boolean")&&(t=null);var s=!1;if(t===null)s=!0;else switch(a){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case Yr:case i1:s=!0}}if(s)return s=t,o=o(s),t=r===""?"."+di(s,0):r,Oc(o)?(n="",t!=null&&(n=t.replace(Fc,"$&/")+"/"),ia(o,e,n,"",function(u){return u})):o!=null&&(ci(o)&&(o=b1(o,n+(!o.key||s&&s.key===o.key?"":(""+o.key).replace(Fc,"$&/")+"/")+t)),e.push(o)),1;if(s=0,r=r===""?".":r+":",Oc(t))for(var i=0;i<t.length;i++){a=t[i];var l=r+di(a,i);s+=ia(a,e,n,l,o)}else if(l=E1(t),typeof l=="function")for(t=l.call(t),i=0;!(a=t.next()).done;)a=a.value,l=r+di(a,i++),s+=ia(a,e,n,l,o);else if(a==="object")throw e=String(t),Error("Objects are not valid as a React child (found: "+(e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return s}function la(t,e,n){if(t==null)return t;var r=[],o=0;return ia(t,r,"","",function(a){return e.call(n,a,o++)}),r}function _1(t){if(t._status===-1){var e=t._result;e=e(),e.then(function(n){(t._status===0||t._status===-1)&&(t._status=1,t._result=n)},function(n){(t._status===0||t._status===-1)&&(t._status=2,t._result=n)}),t._status===-1&&(t._status=0,t._result=e)}if(t._status===1)return t._result.default;throw t._result}var Xe={current:null},ua={transition:null},v1={ReactCurrentDispatcher:Xe,ReactCurrentBatchConfig:ua,ReactCurrentOwner:ui};te.Children={map:la,forEach:function(t,e,n){la(t,function(){e.apply(this,arguments)},n)},count:function(t){var e=0;return la(t,function(){e++}),e},toArray:function(t){return la(t,function(e){return e})||[]},only:function(t){if(!ci(t))throw Error("React.Children.only expected to receive a single React element child.");return t}},te.Component=ar,te.Fragment=l1,te.Profiler=c1,te.PureComponent=ii,te.StrictMode=u1,te.Suspense=m1,te.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=v1,te.cloneElement=function(t,e,n){if(t==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var r=xc({},t.props),o=t.key,a=t.ref,s=t._owner;if(e!=null){if(e.ref!==void 0&&(a=e.ref,s=ui.current),e.key!==void 0&&(o=""+e.key),t.type&&t.type.defaultProps)var i=t.type.defaultProps;for(l in e)kc.call(e,l)&&!Ic.hasOwnProperty(l)&&(r[l]=e[l]===void 0&&i!==void 0?i[l]:e[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){i=Array(l);for(var u=0;u<l;u++)i[u]=arguments[u+2];r.children=i}return{$$typeof:Yr,type:t.type,key:o,ref:a,props:r,_owner:s}},te.createContext=function(t){return t={$$typeof:p1,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},t.Provider={$$typeof:d1,_context:t},t.Consumer=t},te.createElement=Mc,te.createFactory=function(t){var e=Mc.bind(null,t);return e.type=t,e},te.createRef=function(){return{current:null}},te.forwardRef=function(t){return{$$typeof:f1,render:t}},te.isValidElement=ci,te.lazy=function(t){return{$$typeof:h1,_payload:{_status:-1,_result:t},_init:_1}},te.memo=function(t,e){return{$$typeof:g1,type:t,compare:e===void 0?null:e}},te.startTransition=function(t){var e=ua.transition;ua.transition={};try{t()}finally{ua.transition=e}},te.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},te.useCallback=function(t,e){return Xe.current.useCallback(t,e)},te.useContext=function(t){return Xe.current.useContext(t)},te.useDebugValue=function(){},te.useDeferredValue=function(t){return Xe.current.useDeferredValue(t)},te.useEffect=function(t,e){return Xe.current.useEffect(t,e)},te.useId=function(){return Xe.current.useId()},te.useImperativeHandle=function(t,e,n){return Xe.current.useImperativeHandle(t,e,n)},te.useInsertionEffect=function(t,e){return Xe.current.useInsertionEffect(t,e)},te.useLayoutEffect=function(t,e){return Xe.current.useLayoutEffect(t,e)},te.useMemo=function(t,e){return Xe.current.useMemo(t,e)},te.useReducer=function(t,e,n){return Xe.current.useReducer(t,e,n)},te.useRef=function(t){return Xe.current.useRef(t)},te.useState=function(t){return Xe.current.useState(t)},te.useSyncExternalStore=function(t,e,n){return Xe.current.useSyncExternalStore(t,e,n)},te.useTransition=function(){return Xe.current.useTransition()},te.version="18.2.0",Tc.exports=te;var U=Tc.exports;const m=Ht(U);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var y1=U,D1=Symbol.for("react.element"),C1=Symbol.for("react.fragment"),S1=Object.prototype.hasOwnProperty,T1=y1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,N1={key:!0,ref:!0,__self:!0,__source:!0};function Bc(t,e,n){var r,o={},a=null,s=null;n!==void 0&&(a=""+n),e.key!==void 0&&(a=""+e.key),e.ref!==void 0&&(s=e.ref);for(r in e)S1.call(e,r)&&!N1.hasOwnProperty(r)&&(o[r]=e[r]);if(t&&t.defaultProps)for(r in e=t.defaultProps,e)o[r]===void 0&&(o[r]=e[r]);return{$$typeof:D1,type:t,key:a,ref:s,props:o,_owner:T1.current}}sa.Fragment=C1,sa.jsx=Bc,sa.jsxs=Bc,Sc.exports=sa;var w=Sc.exports,pi={},Pc={exports:{}},ct={},Uc={exports:{}},qc={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(t){function e(S,C){var L=S.length;S.push(C);e:for(;0<L;){var k=L-1>>>1,$=S[k];if(0<o($,C))S[k]=C,S[L]=$,L=k;else break e}}function n(S){return S.length===0?null:S[0]}function r(S){if(S.length===0)return null;var C=S[0],L=S.pop();if(L!==C){S[0]=L;e:for(var k=0,$=S.length,j=$>>>1;k<j;){var ge=2*(k+1)-1,pe=S[ge],ue=ge+1,ce=S[ue];if(0>o(pe,L))ue<$&&0>o(ce,pe)?(S[k]=ce,S[ue]=L,k=ue):(S[k]=pe,S[ge]=L,k=ge);else if(ue<$&&0>o(ce,L))S[k]=ce,S[ue]=L,k=ue;else break e}}return C}function o(S,C){var L=S.sortIndex-C.sortIndex;return L!==0?L:S.id-C.id}if(typeof performance=="object"&&typeof performance.now=="function"){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,i=s.now();t.unstable_now=function(){return s.now()-i}}var l=[],u=[],c=1,p=null,d=3,f=!1,b=!1,A=!1,y=typeof setTimeout=="function"?setTimeout:null,h=typeof clearTimeout=="function"?clearTimeout:null,g=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function E(S){for(var C=n(u);C!==null;){if(C.callback===null)r(u);else if(C.startTime<=S)r(u),C.sortIndex=C.expirationTime,e(l,C);else break;C=n(u)}}function _(S){if(A=!1,E(S),!b)if(n(l)!==null)b=!0,B(T);else{var C=n(u);C!==null&&x(_,C.startTime-S)}}function T(S,C){b=!1,A&&(A=!1,h(R),R=-1),f=!0;var L=d;try{for(E(C),p=n(l);p!==null&&(!(p.expirationTime>C)||S&&!W());){var k=p.callback;if(typeof k=="function"){p.callback=null,d=p.priorityLevel;var $=k(p.expirationTime<=C);C=t.unstable_now(),typeof $=="function"?p.callback=$:p===n(l)&&r(l),E(C)}else r(l);p=n(l)}if(p!==null)var j=!0;else{var ge=n(u);ge!==null&&x(_,ge.startTime-C),j=!1}return j}finally{p=null,d=L,f=!1}}var v=!1,N=null,R=-1,H=5,I=-1;function W(){return!(t.unstable_now()-I<H)}function le(){if(N!==null){var S=t.unstable_now();I=S;var C=!0;try{C=N(!0,S)}finally{C?K():(v=!1,N=null)}}else v=!1}var K;if(typeof g=="function")K=function(){g(le)};else if(typeof MessageChannel<"u"){var O=new MessageChannel,V=O.port2;O.port1.onmessage=le,K=function(){V.postMessage(null)}}else K=function(){y(le,0)};function B(S){N=S,v||(v=!0,K())}function x(S,C){R=y(function(){S(t.unstable_now())},C)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(S){S.callback=null},t.unstable_continueExecution=function(){b||f||(b=!0,B(T))},t.unstable_forceFrameRate=function(S){0>S||125<S?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):H=0<S?Math.floor(1e3/S):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return n(l)},t.unstable_next=function(S){switch(d){case 1:case 2:case 3:var C=3;break;default:C=d}var L=d;d=C;try{return S()}finally{d=L}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(S,C){switch(S){case 1:case 2:case 3:case 4:case 5:break;default:S=3}var L=d;d=S;try{return C()}finally{d=L}},t.unstable_scheduleCallback=function(S,C,L){var k=t.unstable_now();switch(typeof L=="object"&&L!==null?(L=L.delay,L=typeof L=="number"&&0<L?k+L:k):L=k,S){case 1:var $=-1;break;case 2:$=250;break;case 5:$=1073741823;break;case 4:$=1e4;break;default:$=5e3}return $=L+$,S={id:c++,callback:C,priorityLevel:S,startTime:L,expirationTime:$,sortIndex:-1},L>k?(S.sortIndex=L,e(u,S),n(l)===null&&S===n(u)&&(A?(h(R),R=-1):A=!0,x(_,L-k))):(S.sortIndex=$,e(l,S),b||f||(b=!0,B(T))),S},t.unstable_shouldYield=W,t.unstable_wrapCallback=function(S){var C=d;return function(){var L=d;d=C;try{return S.apply(this,arguments)}finally{d=L}}}})(qc),Uc.exports=qc;var w1=Uc.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Hc=U,dt=w1;function M(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Vc=new Set,Xr={};function Mn(t,e){sr(t,e),sr(t+"Capture",e)}function sr(t,e){for(Xr[t]=e,t=0;t<e.length;t++)Vc.add(e[t])}var Jt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),fi=Object.prototype.hasOwnProperty,x1=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,$c={},zc={};function R1(t){return fi.call(zc,t)?!0:fi.call($c,t)?!1:x1.test(t)?zc[t]=!0:($c[t]=!0,!1)}function L1(t,e,n,r){if(n!==null&&n.type===0)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(t=t.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-");default:return!1}}function O1(t,e,n,r){if(e===null||typeof e>"u"||L1(t,e,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!e;case 4:return e===!1;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}function Qe(t,e,n,r,o,a,s){this.acceptsBooleans=e===2||e===3||e===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=a,this.removeEmptyString=s}var Ue={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){Ue[t]=new Qe(t,0,!1,t,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];Ue[e]=new Qe(e,1,!1,t[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){Ue[t]=new Qe(t,2,!1,t.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){Ue[t]=new Qe(t,2,!1,t,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){Ue[t]=new Qe(t,3,!1,t.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(t){Ue[t]=new Qe(t,3,!0,t,null,!1,!1)}),["capture","download"].forEach(function(t){Ue[t]=new Qe(t,4,!1,t,null,!1,!1)}),["cols","rows","size","span"].forEach(function(t){Ue[t]=new Qe(t,6,!1,t,null,!1,!1)}),["rowSpan","start"].forEach(function(t){Ue[t]=new Qe(t,5,!1,t.toLowerCase(),null,!1,!1)});var mi=/[\-:]([a-z])/g;function gi(t){return t[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(mi,gi);Ue[e]=new Qe(e,1,!1,t,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(mi,gi);Ue[e]=new Qe(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(mi,gi);Ue[e]=new Qe(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(t){Ue[t]=new Qe(t,1,!1,t.toLowerCase(),null,!1,!1)}),Ue.xlinkHref=new Qe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(t){Ue[t]=new Qe(t,1,!1,t.toLowerCase(),null,!0,!0)});function hi(t,e,n,r){var o=Ue.hasOwnProperty(e)?Ue[e]:null;(o!==null?o.type!==0:r||!(2<e.length)||e[0]!=="o"&&e[0]!=="O"||e[1]!=="n"&&e[1]!=="N")&&(O1(e,n,o,r)&&(n=null),r||o===null?R1(e)&&(n===null?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=n===null?o.type===3?!1:"":n:(e=o.attributeName,r=o.attributeNamespace,n===null?t.removeAttribute(e):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}var en=Hc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ca=Symbol.for("react.element"),ir=Symbol.for("react.portal"),lr=Symbol.for("react.fragment"),Ei=Symbol.for("react.strict_mode"),bi=Symbol.for("react.profiler"),Gc=Symbol.for("react.provider"),Zc=Symbol.for("react.context"),Ai=Symbol.for("react.forward_ref"),_i=Symbol.for("react.suspense"),vi=Symbol.for("react.suspense_list"),yi=Symbol.for("react.memo"),pn=Symbol.for("react.lazy"),jc=Symbol.for("react.offscreen"),Wc=Symbol.iterator;function Qr(t){return t===null||typeof t!="object"?null:(t=Wc&&t[Wc]||t["@@iterator"],typeof t=="function"?t:null)}var ve=Object.assign,Di;function Jr(t){if(Di===void 0)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);Di=e&&e[1]||""}return`
`+Di+t}var Ci=!1;function Si(t,e){if(!t||Ci)return"";Ci=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(e,[])}catch(u){var r=u}Reflect.construct(t,[],e)}else{try{e.call()}catch(u){r=u}t.call(e.prototype)}else{try{throw Error()}catch(u){r=u}t()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var o=u.stack.split(`
`),a=r.stack.split(`
`),s=o.length-1,i=a.length-1;1<=s&&0<=i&&o[s]!==a[i];)i--;for(;1<=s&&0<=i;s--,i--)if(o[s]!==a[i]){if(s!==1||i!==1)do if(s--,i--,0>i||o[s]!==a[i]){var l=`
`+o[s].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}while(1<=s&&0<=i);break}}}finally{Ci=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?Jr(t):""}function k1(t){switch(t.tag){case 5:return Jr(t.type);case 16:return Jr("Lazy");case 13:return Jr("Suspense");case 19:return Jr("SuspenseList");case 0:case 2:case 15:return t=Si(t.type,!1),t;case 11:return t=Si(t.type.render,!1),t;case 1:return t=Si(t.type,!0),t;default:return""}}function Ti(t){if(t==null)return null;if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case lr:return"Fragment";case ir:return"Portal";case bi:return"Profiler";case Ei:return"StrictMode";case _i:return"Suspense";case vi:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case Zc:return(t.displayName||"Context")+".Consumer";case Gc:return(t._context.displayName||"Context")+".Provider";case Ai:var e=t.render;return t=t.displayName,t||(t=e.displayName||e.name||"",t=t!==""?"ForwardRef("+t+")":"ForwardRef"),t;case yi:return e=t.displayName||null,e!==null?e:Ti(t.type)||"Memo";case pn:e=t._payload,t=t._init;try{return Ti(t(e))}catch{}}return null}function I1(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=e.render,t=t.displayName||t.name||"",e.displayName||(t!==""?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Ti(e);case 8:return e===Ei?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e}return null}function fn(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":return t;case"object":return t;default:return""}}function Kc(t){var e=t.type;return(t=t.nodeName)&&t.toLowerCase()==="input"&&(e==="checkbox"||e==="radio")}function M1(t){var e=Kc(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,a=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return o.call(this)},set:function(s){r=""+s,a.call(this,s)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(s){r=""+s},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}function da(t){t._valueTracker||(t._valueTracker=M1(t))}function Yc(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Kc(t)?t.checked?"true":"false":t.value),t=r,t!==n?(e.setValue(t),!0):!1}function pa(t){if(t=t||(typeof document<"u"?document:void 0),typeof t>"u")return null;try{return t.activeElement||t.body}catch{return t.body}}function Ni(t,e){var n=e.checked;return ve({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??t._wrapperState.initialChecked})}function Xc(t,e){var n=e.defaultValue==null?"":e.defaultValue,r=e.checked!=null?e.checked:e.defaultChecked;n=fn(e.value!=null?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:e.type==="checkbox"||e.type==="radio"?e.checked!=null:e.value!=null}}function Qc(t,e){e=e.checked,e!=null&&hi(t,"checked",e,!1)}function wi(t,e){Qc(t,e);var n=fn(e.value),r=e.type;if(n!=null)r==="number"?(n===0&&t.value===""||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if(r==="submit"||r==="reset"){t.removeAttribute("value");return}e.hasOwnProperty("value")?xi(t,e.type,n):e.hasOwnProperty("defaultValue")&&xi(t,e.type,fn(e.defaultValue)),e.checked==null&&e.defaultChecked!=null&&(t.defaultChecked=!!e.defaultChecked)}function Jc(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!(r!=="submit"&&r!=="reset"||e.value!==void 0&&e.value!==null))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}n=t.name,n!==""&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,n!==""&&(t.name=n)}function xi(t,e,n){(e!=="number"||pa(t.ownerDocument)!==t)&&(n==null?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}var eo=Array.isArray;function ur(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+fn(n),e=null,o=0;o<t.length;o++){if(t[o].value===n){t[o].selected=!0,r&&(t[o].defaultSelected=!0);return}e!==null||t[o].disabled||(e=t[o])}e!==null&&(e.selected=!0)}}function Ri(t,e){if(e.dangerouslySetInnerHTML!=null)throw Error(M(91));return ve({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function ed(t,e){var n=e.value;if(n==null){if(n=e.children,e=e.defaultValue,n!=null){if(e!=null)throw Error(M(92));if(eo(n)){if(1<n.length)throw Error(M(93));n=n[0]}e=n}e==null&&(e=""),n=e}t._wrapperState={initialValue:fn(n)}}function td(t,e){var n=fn(e.value),r=fn(e.defaultValue);n!=null&&(n=""+n,n!==t.value&&(t.value=n),e.defaultValue==null&&t.defaultValue!==n&&(t.defaultValue=n)),r!=null&&(t.defaultValue=""+r)}function nd(t){var e=t.textContent;e===t._wrapperState.initialValue&&e!==""&&e!==null&&(t.value=e)}function rd(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Li(t,e){return t==null||t==="http://www.w3.org/1999/xhtml"?rd(e):t==="http://www.w3.org/2000/svg"&&e==="foreignObject"?"http://www.w3.org/1999/xhtml":t}var fa,od=function(t){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(e,n,r,o){MSApp.execUnsafeLocalFunction(function(){return t(e,n,r,o)})}:t}(function(t,e){if(t.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in t)t.innerHTML=e;else{for(fa=fa||document.createElement("div"),fa.innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=fa.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}});function to(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&n.nodeType===3){n.nodeValue=e;return}}t.textContent=e}var no={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},F1=["Webkit","ms","Moz","O"];Object.keys(no).forEach(function(t){F1.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),no[e]=no[t]})});function ad(t,e,n){return e==null||typeof e=="boolean"||e===""?"":n||typeof e!="number"||e===0||no.hasOwnProperty(t)&&no[t]?(""+e).trim():e+"px"}function sd(t,e){t=t.style;for(var n in e)if(e.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=ad(n,e[n],r);n==="float"&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}var B1=ve({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Oi(t,e){if(e){if(B1[t]&&(e.children!=null||e.dangerouslySetInnerHTML!=null))throw Error(M(137,t));if(e.dangerouslySetInnerHTML!=null){if(e.children!=null)throw Error(M(60));if(typeof e.dangerouslySetInnerHTML!="object"||!("__html"in e.dangerouslySetInnerHTML))throw Error(M(61))}if(e.style!=null&&typeof e.style!="object")throw Error(M(62))}}function ki(t,e){if(t.indexOf("-")===-1)return typeof e.is=="string";switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ii=null;function Mi(t){return t=t.target||t.srcElement||window,t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===3?t.parentNode:t}var Fi=null,cr=null,dr=null;function id(t){if(t=So(t)){if(typeof Fi!="function")throw Error(M(280));var e=t.stateNode;e&&(e=Fa(e),Fi(t.stateNode,t.type,e))}}function ld(t){cr?dr?dr.push(t):dr=[t]:cr=t}function ud(){if(cr){var t=cr,e=dr;if(dr=cr=null,id(t),e)for(t=0;t<e.length;t++)id(e[t])}}function cd(t,e){return t(e)}function dd(){}var Bi=!1;function pd(t,e,n){if(Bi)return t(e,n);Bi=!0;try{return cd(t,e,n)}finally{Bi=!1,(cr!==null||dr!==null)&&(dd(),ud())}}function ro(t,e){var n=t.stateNode;if(n===null)return null;var r=Fa(n);if(r===null)return null;n=r[e];e:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(t=t.type,r=!(t==="button"||t==="input"||t==="select"||t==="textarea")),t=!r;break e;default:t=!1}if(t)return null;if(n&&typeof n!="function")throw Error(M(231,e,typeof n));return n}var Pi=!1;if(Jt)try{var oo={};Object.defineProperty(oo,"passive",{get:function(){Pi=!0}}),window.addEventListener("test",oo,oo),window.removeEventListener("test",oo,oo)}catch{Pi=!1}function P1(t,e,n,r,o,a,s,i,l){var u=Array.prototype.slice.call(arguments,3);try{e.apply(n,u)}catch(c){this.onError(c)}}var ao=!1,ma=null,ga=!1,Ui=null,U1={onError:function(t){ao=!0,ma=t}};function q1(t,e,n,r,o,a,s,i,l){ao=!1,ma=null,P1.apply(U1,arguments)}function H1(t,e,n,r,o,a,s,i,l){if(q1.apply(this,arguments),ao){if(ao){var u=ma;ao=!1,ma=null}else throw Error(M(198));ga||(ga=!0,Ui=u)}}function Fn(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do e=t,e.flags&4098&&(n=e.return),t=e.return;while(t)}return e.tag===3?n:null}function fd(t){if(t.tag===13){var e=t.memoizedState;if(e===null&&(t=t.alternate,t!==null&&(e=t.memoizedState)),e!==null)return e.dehydrated}return null}function md(t){if(Fn(t)!==t)throw Error(M(188))}function V1(t){var e=t.alternate;if(!e){if(e=Fn(t),e===null)throw Error(M(188));return e!==t?null:t}for(var n=t,r=e;;){var o=n.return;if(o===null)break;var a=o.alternate;if(a===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return md(o),t;if(a===r)return md(o),e;a=a.sibling}throw Error(M(188))}if(n.return!==r.return)n=o,r=a;else{for(var s=!1,i=o.child;i;){if(i===n){s=!0,n=o,r=a;break}if(i===r){s=!0,r=o,n=a;break}i=i.sibling}if(!s){for(i=a.child;i;){if(i===n){s=!0,n=a,r=o;break}if(i===r){s=!0,r=a,n=o;break}i=i.sibling}if(!s)throw Error(M(189))}}if(n.alternate!==r)throw Error(M(190))}if(n.tag!==3)throw Error(M(188));return n.stateNode.current===n?t:e}function gd(t){return t=V1(t),t!==null?hd(t):null}function hd(t){if(t.tag===5||t.tag===6)return t;for(t=t.child;t!==null;){var e=hd(t);if(e!==null)return e;t=t.sibling}return null}var Ed=dt.unstable_scheduleCallback,bd=dt.unstable_cancelCallback,$1=dt.unstable_shouldYield,z1=dt.unstable_requestPaint,Ne=dt.unstable_now,G1=dt.unstable_getCurrentPriorityLevel,qi=dt.unstable_ImmediatePriority,Ad=dt.unstable_UserBlockingPriority,ha=dt.unstable_NormalPriority,Z1=dt.unstable_LowPriority,_d=dt.unstable_IdlePriority,Ea=null,Vt=null;function j1(t){if(Vt&&typeof Vt.onCommitFiberRoot=="function")try{Vt.onCommitFiberRoot(Ea,t,void 0,(t.current.flags&128)===128)}catch{}}var Rt=Math.clz32?Math.clz32:Y1,W1=Math.log,K1=Math.LN2;function Y1(t){return t>>>=0,t===0?32:31-(W1(t)/K1|0)|0}var ba=64,Aa=4194304;function so(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return t&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function _a(t,e){var n=t.pendingLanes;if(n===0)return 0;var r=0,o=t.suspendedLanes,a=t.pingedLanes,s=n&268435455;if(s!==0){var i=s&~o;i!==0?r=so(i):(a&=s,a!==0&&(r=so(a)))}else s=n&~o,s!==0?r=so(s):a!==0&&(r=so(a));if(r===0)return 0;if(e!==0&&e!==r&&!(e&o)&&(o=r&-r,a=e&-e,o>=a||o===16&&(a&4194240)!==0))return e;if(r&4&&(r|=n&16),e=t.entangledLanes,e!==0)for(t=t.entanglements,e&=r;0<e;)n=31-Rt(e),o=1<<n,r|=t[n],e&=~o;return r}function X1(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Q1(t,e){for(var n=t.suspendedLanes,r=t.pingedLanes,o=t.expirationTimes,a=t.pendingLanes;0<a;){var s=31-Rt(a),i=1<<s,l=o[s];l===-1?(!(i&n)||i&r)&&(o[s]=X1(i,e)):l<=e&&(t.expiredLanes|=i),a&=~i}}function Hi(t){return t=t.pendingLanes&-1073741825,t!==0?t:t&1073741824?1073741824:0}function vd(){var t=ba;return ba<<=1,!(ba&4194240)&&(ba=64),t}function Vi(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function io(t,e,n){t.pendingLanes|=e,e!==536870912&&(t.suspendedLanes=0,t.pingedLanes=0),t=t.eventTimes,e=31-Rt(e),t[e]=n}function J1(t,e){var n=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var r=t.eventTimes;for(t=t.expirationTimes;0<n;){var o=31-Rt(n),a=1<<o;e[o]=0,r[o]=-1,t[o]=-1,n&=~a}}function $i(t,e){var n=t.entangledLanes|=e;for(t=t.entanglements;n;){var r=31-Rt(n),o=1<<r;o&e|t[r]&e&&(t[r]|=e),n&=~o}}var de=0;function yd(t){return t&=-t,1<t?4<t?t&268435455?16:536870912:4:1}var Dd,zi,Cd,Sd,Td,Gi=!1,va=[],mn=null,gn=null,hn=null,lo=new Map,uo=new Map,En=[],eh="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nd(t,e){switch(t){case"focusin":case"focusout":mn=null;break;case"dragenter":case"dragleave":gn=null;break;case"mouseover":case"mouseout":hn=null;break;case"pointerover":case"pointerout":lo.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":uo.delete(e.pointerId)}}function co(t,e,n,r,o,a){return t===null||t.nativeEvent!==a?(t={blockedOn:e,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},e!==null&&(e=So(e),e!==null&&zi(e)),t):(t.eventSystemFlags|=r,e=t.targetContainers,o!==null&&e.indexOf(o)===-1&&e.push(o),t)}function th(t,e,n,r,o){switch(e){case"focusin":return mn=co(mn,t,e,n,r,o),!0;case"dragenter":return gn=co(gn,t,e,n,r,o),!0;case"mouseover":return hn=co(hn,t,e,n,r,o),!0;case"pointerover":var a=o.pointerId;return lo.set(a,co(lo.get(a)||null,t,e,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,uo.set(a,co(uo.get(a)||null,t,e,n,r,o)),!0}return!1}function wd(t){var e=Bn(t.target);if(e!==null){var n=Fn(e);if(n!==null){if(e=n.tag,e===13){if(e=fd(n),e!==null){t.blockedOn=e,Td(t.priority,function(){Cd(n)});return}}else if(e===3&&n.stateNode.current.memoizedState.isDehydrated){t.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}t.blockedOn=null}function ya(t){if(t.blockedOn!==null)return!1;for(var e=t.targetContainers;0<e.length;){var n=ji(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(n===null){n=t.nativeEvent;var r=new n.constructor(n.type,n);Ii=r,n.target.dispatchEvent(r),Ii=null}else return e=So(n),e!==null&&zi(e),t.blockedOn=n,!1;e.shift()}return!0}function xd(t,e,n){ya(t)&&n.delete(e)}function nh(){Gi=!1,mn!==null&&ya(mn)&&(mn=null),gn!==null&&ya(gn)&&(gn=null),hn!==null&&ya(hn)&&(hn=null),lo.forEach(xd),uo.forEach(xd)}function po(t,e){t.blockedOn===e&&(t.blockedOn=null,Gi||(Gi=!0,dt.unstable_scheduleCallback(dt.unstable_NormalPriority,nh)))}function fo(t){function e(o){return po(o,t)}if(0<va.length){po(va[0],t);for(var n=1;n<va.length;n++){var r=va[n];r.blockedOn===t&&(r.blockedOn=null)}}for(mn!==null&&po(mn,t),gn!==null&&po(gn,t),hn!==null&&po(hn,t),lo.forEach(e),uo.forEach(e),n=0;n<En.length;n++)r=En[n],r.blockedOn===t&&(r.blockedOn=null);for(;0<En.length&&(n=En[0],n.blockedOn===null);)wd(n),n.blockedOn===null&&En.shift()}var pr=en.ReactCurrentBatchConfig,Da=!0;function rh(t,e,n,r){var o=de,a=pr.transition;pr.transition=null;try{de=1,Zi(t,e,n,r)}finally{de=o,pr.transition=a}}function oh(t,e,n,r){var o=de,a=pr.transition;pr.transition=null;try{de=4,Zi(t,e,n,r)}finally{de=o,pr.transition=a}}function Zi(t,e,n,r){if(Da){var o=ji(t,e,n,r);if(o===null)cl(t,e,r,Ca,n),Nd(t,r);else if(th(o,t,e,n,r))r.stopPropagation();else if(Nd(t,r),e&4&&-1<eh.indexOf(t)){for(;o!==null;){var a=So(o);if(a!==null&&Dd(a),a=ji(t,e,n,r),a===null&&cl(t,e,r,Ca,n),a===o)break;o=a}o!==null&&r.stopPropagation()}else cl(t,e,r,null,n)}}var Ca=null;function ji(t,e,n,r){if(Ca=null,t=Mi(r),t=Bn(t),t!==null)if(e=Fn(t),e===null)t=null;else if(n=e.tag,n===13){if(t=fd(e),t!==null)return t;t=null}else if(n===3){if(e.stateNode.current.memoizedState.isDehydrated)return e.tag===3?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return Ca=t,null}function Rd(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(G1()){case qi:return 1;case Ad:return 4;case ha:case Z1:return 16;case _d:return 536870912;default:return 16}default:return 16}}var bn=null,Wi=null,Sa=null;function Ld(){if(Sa)return Sa;var t,e=Wi,n=e.length,r,o="value"in bn?bn.value:bn.textContent,a=o.length;for(t=0;t<n&&e[t]===o[t];t++);var s=n-t;for(r=1;r<=s&&e[n-r]===o[a-r];r++);return Sa=o.slice(t,1<r?1-r:void 0)}function Ta(t){var e=t.keyCode;return"charCode"in t?(t=t.charCode,t===0&&e===13&&(t=13)):t=e,t===10&&(t=13),32<=t||t===13?t:0}function Na(){return!0}function Od(){return!1}function pt(t){function e(n,r,o,a,s){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=a,this.target=s,this.currentTarget=null;for(var i in t)t.hasOwnProperty(i)&&(n=t[i],this[i]=n?n(a):a[i]);return this.isDefaultPrevented=(a.defaultPrevented!=null?a.defaultPrevented:a.returnValue===!1)?Na:Od,this.isPropagationStopped=Od,this}return ve(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Na)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Na)},persist:function(){},isPersistent:Na}),e}var fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Ki=pt(fr),mo=ve({},fr,{view:0,detail:0}),ah=pt(mo),Yi,Xi,go,wa=ve({},mo,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Ji,button:0,buttons:0,relatedTarget:function(t){return t.relatedTarget===void 0?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==go&&(go&&t.type==="mousemove"?(Yi=t.screenX-go.screenX,Xi=t.screenY-go.screenY):Xi=Yi=0,go=t),Yi)},movementY:function(t){return"movementY"in t?t.movementY:Xi}}),kd=pt(wa),sh=ve({},wa,{dataTransfer:0}),ih=pt(sh),lh=ve({},mo,{relatedTarget:0}),Qi=pt(lh),uh=ve({},fr,{animationName:0,elapsedTime:0,pseudoElement:0}),ch=pt(uh),dh=ve({},fr,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),ph=pt(dh),fh=ve({},fr,{data:0}),Id=pt(fh),mh={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},gh={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},hh={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Eh(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):(t=hh[t])?!!e[t]:!1}function Ji(){return Eh}var bh=ve({},mo,{key:function(t){if(t.key){var e=mh[t.key]||t.key;if(e!=="Unidentified")return e}return t.type==="keypress"?(t=Ta(t),t===13?"Enter":String.fromCharCode(t)):t.type==="keydown"||t.type==="keyup"?gh[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Ji,charCode:function(t){return t.type==="keypress"?Ta(t):0},keyCode:function(t){return t.type==="keydown"||t.type==="keyup"?t.keyCode:0},which:function(t){return t.type==="keypress"?Ta(t):t.type==="keydown"||t.type==="keyup"?t.keyCode:0}}),Ah=pt(bh),_h=ve({},wa,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Md=pt(_h),vh=ve({},mo,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Ji}),yh=pt(vh),Dh=ve({},fr,{propertyName:0,elapsedTime:0,pseudoElement:0}),Ch=pt(Dh),Sh=ve({},wa,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Th=pt(Sh),Nh=[9,13,27,32],el=Jt&&"CompositionEvent"in window,ho=null;Jt&&"documentMode"in document&&(ho=document.documentMode);var wh=Jt&&"TextEvent"in window&&!ho,Fd=Jt&&(!el||ho&&8<ho&&11>=ho),Bd=" ",Pd=!1;function Ud(t,e){switch(t){case"keyup":return Nh.indexOf(e.keyCode)!==-1;case"keydown":return e.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qd(t){return t=t.detail,typeof t=="object"&&"data"in t?t.data:null}var mr=!1;function xh(t,e){switch(t){case"compositionend":return qd(e);case"keypress":return e.which!==32?null:(Pd=!0,Bd);case"textInput":return t=e.data,t===Bd&&Pd?null:t;default:return null}}function Rh(t,e){if(mr)return t==="compositionend"||!el&&Ud(t,e)?(t=Ld(),Sa=Wi=bn=null,mr=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Fd&&e.locale!=="ko"?null:e.data;default:return null}}var Lh={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hd(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e==="input"?!!Lh[t.type]:e==="textarea"}function Vd(t,e,n,r){ld(r),e=ka(e,"onChange"),0<e.length&&(n=new Ki("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var Eo=null,bo=null;function Oh(t){sp(t,0)}function xa(t){var e=Ar(t);if(Yc(e))return t}function kh(t,e){if(t==="change")return e}var $d=!1;if(Jt){var tl;if(Jt){var nl="oninput"in document;if(!nl){var zd=document.createElement("div");zd.setAttribute("oninput","return;"),nl=typeof zd.oninput=="function"}tl=nl}else tl=!1;$d=tl&&(!document.documentMode||9<document.documentMode)}function Gd(){Eo&&(Eo.detachEvent("onpropertychange",Zd),bo=Eo=null)}function Zd(t){if(t.propertyName==="value"&&xa(bo)){var e=[];Vd(e,bo,t,Mi(t)),pd(Oh,e)}}function Ih(t,e,n){t==="focusin"?(Gd(),Eo=e,bo=n,Eo.attachEvent("onpropertychange",Zd)):t==="focusout"&&Gd()}function Mh(t){if(t==="selectionchange"||t==="keyup"||t==="keydown")return xa(bo)}function Fh(t,e){if(t==="click")return xa(e)}function Bh(t,e){if(t==="input"||t==="change")return xa(e)}function Ph(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var Lt=typeof Object.is=="function"?Object.is:Ph;function Ao(t,e){if(Lt(t,e))return!0;if(typeof t!="object"||t===null||typeof e!="object"||e===null)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!fi.call(e,o)||!Lt(t[o],e[o]))return!1}return!0}function jd(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Wd(t,e){var n=jd(t);t=0;for(var r;n;){if(n.nodeType===3){if(r=t+n.textContent.length,t<=e&&r>=e)return{node:n,offset:e-t};t=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=jd(n)}}function Kd(t,e){return t&&e?t===e?!0:t&&t.nodeType===3?!1:e&&e.nodeType===3?Kd(t,e.parentNode):"contains"in t?t.contains(e):t.compareDocumentPosition?!!(t.compareDocumentPosition(e)&16):!1:!1}function Yd(){for(var t=window,e=pa();e instanceof t.HTMLIFrameElement;){try{var n=typeof e.contentWindow.location.href=="string"}catch{n=!1}if(n)t=e.contentWindow;else break;e=pa(t.document)}return e}function rl(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&(e==="input"&&(t.type==="text"||t.type==="search"||t.type==="tel"||t.type==="url"||t.type==="password")||e==="textarea"||t.contentEditable==="true")}function Uh(t){var e=Yd(),n=t.focusedElem,r=t.selectionRange;if(e!==n&&n&&n.ownerDocument&&Kd(n.ownerDocument.documentElement,n)){if(r!==null&&rl(n)){if(e=r.start,t=r.end,t===void 0&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(t=(e=n.ownerDocument||document)&&e.defaultView||window,t.getSelection){t=t.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=r.end===void 0?a:Math.min(r.end,o),!t.extend&&a>r&&(o=r,r=a,a=o),o=Wd(n,a);var s=Wd(n,r);o&&s&&(t.rangeCount!==1||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==s.node||t.focusOffset!==s.offset)&&(e=e.createRange(),e.setStart(o.node,o.offset),t.removeAllRanges(),a>r?(t.addRange(e),t.extend(s.node,s.offset)):(e.setEnd(s.node,s.offset),t.addRange(e)))}}for(e=[],t=n;t=t.parentNode;)t.nodeType===1&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<e.length;n++)t=e[n],t.element.scrollLeft=t.left,t.element.scrollTop=t.top}}var qh=Jt&&"documentMode"in document&&11>=document.documentMode,gr=null,ol=null,_o=null,al=!1;function Xd(t,e,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;al||gr==null||gr!==pa(r)||(r=gr,"selectionStart"in r&&rl(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),_o&&Ao(_o,r)||(_o=r,r=ka(ol,"onSelect"),0<r.length&&(e=new Ki("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=gr)))}function Ra(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var hr={animationend:Ra("Animation","AnimationEnd"),animationiteration:Ra("Animation","AnimationIteration"),animationstart:Ra("Animation","AnimationStart"),transitionend:Ra("Transition","TransitionEnd")},sl={},Qd={};Jt&&(Qd=document.createElement("div").style,"AnimationEvent"in window||(delete hr.animationend.animation,delete hr.animationiteration.animation,delete hr.animationstart.animation),"TransitionEvent"in window||delete hr.transitionend.transition);function La(t){if(sl[t])return sl[t];if(!hr[t])return t;var e=hr[t],n;for(n in e)if(e.hasOwnProperty(n)&&n in Qd)return sl[t]=e[n];return t}var Jd=La("animationend"),ep=La("animationiteration"),tp=La("animationstart"),np=La("transitionend"),rp=new Map,op="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function An(t,e){rp.set(t,e),Mn(e,[t])}for(var il=0;il<op.length;il++){var ll=op[il],Hh=ll.toLowerCase(),Vh=ll[0].toUpperCase()+ll.slice(1);An(Hh,"on"+Vh)}An(Jd,"onAnimationEnd"),An(ep,"onAnimationIteration"),An(tp,"onAnimationStart"),An("dblclick","onDoubleClick"),An("focusin","onFocus"),An("focusout","onBlur"),An(np,"onTransitionEnd"),sr("onMouseEnter",["mouseout","mouseover"]),sr("onMouseLeave",["mouseout","mouseover"]),sr("onPointerEnter",["pointerout","pointerover"]),sr("onPointerLeave",["pointerout","pointerover"]),Mn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Mn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Mn("onBeforeInput",["compositionend","keypress","textInput","paste"]),Mn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Mn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Mn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var vo="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),$h=new Set("cancel close invalid load scroll toggle".split(" ").concat(vo));function ap(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,H1(r,e,void 0,t),t.currentTarget=null}function sp(t,e){e=(e&4)!==0;for(var n=0;n<t.length;n++){var r=t[n],o=r.event;r=r.listeners;e:{var a=void 0;if(e)for(var s=r.length-1;0<=s;s--){var i=r[s],l=i.instance,u=i.currentTarget;if(i=i.listener,l!==a&&o.isPropagationStopped())break e;ap(o,i,u),a=l}else for(s=0;s<r.length;s++){if(i=r[s],l=i.instance,u=i.currentTarget,i=i.listener,l!==a&&o.isPropagationStopped())break e;ap(o,i,u),a=l}}}if(ga)throw t=Ui,ga=!1,Ui=null,t}function be(t,e){var n=e[hl];n===void 0&&(n=e[hl]=new Set);var r=t+"__bubble";n.has(r)||(ip(e,t,2,!1),n.add(r))}function ul(t,e,n){var r=0;e&&(r|=4),ip(n,t,r,e)}var Oa="_reactListening"+Math.random().toString(36).slice(2);function yo(t){if(!t[Oa]){t[Oa]=!0,Vc.forEach(function(n){n!=="selectionchange"&&($h.has(n)||ul(n,!1,t),ul(n,!0,t))});var e=t.nodeType===9?t:t.ownerDocument;e===null||e[Oa]||(e[Oa]=!0,ul("selectionchange",!1,e))}}function ip(t,e,n,r){switch(Rd(e)){case 1:var o=rh;break;case 4:o=oh;break;default:o=Zi}n=o.bind(null,e,n,t),o=void 0,!Pi||e!=="touchstart"&&e!=="touchmove"&&e!=="wheel"||(o=!0),r?o!==void 0?t.addEventListener(e,n,{capture:!0,passive:o}):t.addEventListener(e,n,!0):o!==void 0?t.addEventListener(e,n,{passive:o}):t.addEventListener(e,n,!1)}function cl(t,e,n,r,o){var a=r;if(!(e&1)&&!(e&2)&&r!==null)e:for(;;){if(r===null)return;var s=r.tag;if(s===3||s===4){var i=r.stateNode.containerInfo;if(i===o||i.nodeType===8&&i.parentNode===o)break;if(s===4)for(s=r.return;s!==null;){var l=s.tag;if((l===3||l===4)&&(l=s.stateNode.containerInfo,l===o||l.nodeType===8&&l.parentNode===o))return;s=s.return}for(;i!==null;){if(s=Bn(i),s===null)return;if(l=s.tag,l===5||l===6){r=a=s;continue e}i=i.parentNode}}r=r.return}pd(function(){var u=a,c=Mi(n),p=[];e:{var d=rp.get(t);if(d!==void 0){var f=Ki,b=t;switch(t){case"keypress":if(Ta(n)===0)break e;case"keydown":case"keyup":f=Ah;break;case"focusin":b="focus",f=Qi;break;case"focusout":b="blur",f=Qi;break;case"beforeblur":case"afterblur":f=Qi;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":f=kd;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":f=ih;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":f=yh;break;case Jd:case ep:case tp:f=ch;break;case np:f=Ch;break;case"scroll":f=ah;break;case"wheel":f=Th;break;case"copy":case"cut":case"paste":f=ph;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":f=Md}var A=(e&4)!==0,y=!A&&t==="scroll",h=A?d!==null?d+"Capture":null:d;A=[];for(var g=u,E;g!==null;){E=g;var _=E.stateNode;if(E.tag===5&&_!==null&&(E=_,h!==null&&(_=ro(g,h),_!=null&&A.push(Do(g,_,E)))),y)break;g=g.return}0<A.length&&(d=new f(d,b,null,n,c),p.push({event:d,listeners:A}))}}if(!(e&7)){e:{if(d=t==="mouseover"||t==="pointerover",f=t==="mouseout"||t==="pointerout",d&&n!==Ii&&(b=n.relatedTarget||n.fromElement)&&(Bn(b)||b[tn]))break e;if((f||d)&&(d=c.window===c?c:(d=c.ownerDocument)?d.defaultView||d.parentWindow:window,f?(b=n.relatedTarget||n.toElement,f=u,b=b?Bn(b):null,b!==null&&(y=Fn(b),b!==y||b.tag!==5&&b.tag!==6)&&(b=null)):(f=null,b=u),f!==b)){if(A=kd,_="onMouseLeave",h="onMouseEnter",g="mouse",(t==="pointerout"||t==="pointerover")&&(A=Md,_="onPointerLeave",h="onPointerEnter",g="pointer"),y=f==null?d:Ar(f),E=b==null?d:Ar(b),d=new A(_,g+"leave",f,n,c),d.target=y,d.relatedTarget=E,_=null,Bn(c)===u&&(A=new A(h,g+"enter",b,n,c),A.target=E,A.relatedTarget=y,_=A),y=_,f&&b)t:{for(A=f,h=b,g=0,E=A;E;E=Er(E))g++;for(E=0,_=h;_;_=Er(_))E++;for(;0<g-E;)A=Er(A),g--;for(;0<E-g;)h=Er(h),E--;for(;g--;){if(A===h||h!==null&&A===h.alternate)break t;A=Er(A),h=Er(h)}A=null}else A=null;f!==null&&lp(p,d,f,A,!1),b!==null&&y!==null&&lp(p,y,b,A,!0)}}e:{if(d=u?Ar(u):window,f=d.nodeName&&d.nodeName.toLowerCase(),f==="select"||f==="input"&&d.type==="file")var T=kh;else if(Hd(d))if($d)T=Bh;else{T=Mh;var v=Ih}else(f=d.nodeName)&&f.toLowerCase()==="input"&&(d.type==="checkbox"||d.type==="radio")&&(T=Fh);if(T&&(T=T(t,u))){Vd(p,T,n,c);break e}v&&v(t,d,u),t==="focusout"&&(v=d._wrapperState)&&v.controlled&&d.type==="number"&&xi(d,"number",d.value)}switch(v=u?Ar(u):window,t){case"focusin":(Hd(v)||v.contentEditable==="true")&&(gr=v,ol=u,_o=null);break;case"focusout":_o=ol=gr=null;break;case"mousedown":al=!0;break;case"contextmenu":case"mouseup":case"dragend":al=!1,Xd(p,n,c);break;case"selectionchange":if(qh)break;case"keydown":case"keyup":Xd(p,n,c)}var N;if(el)e:{switch(t){case"compositionstart":var R="onCompositionStart";break e;case"compositionend":R="onCompositionEnd";break e;case"compositionupdate":R="onCompositionUpdate";break e}R=void 0}else mr?Ud(t,n)&&(R="onCompositionEnd"):t==="keydown"&&n.keyCode===229&&(R="onCompositionStart");R&&(Fd&&n.locale!=="ko"&&(mr||R!=="onCompositionStart"?R==="onCompositionEnd"&&mr&&(N=Ld()):(bn=c,Wi="value"in bn?bn.value:bn.textContent,mr=!0)),v=ka(u,R),0<v.length&&(R=new Id(R,t,null,n,c),p.push({event:R,listeners:v}),N?R.data=N:(N=qd(n),N!==null&&(R.data=N)))),(N=wh?xh(t,n):Rh(t,n))&&(u=ka(u,"onBeforeInput"),0<u.length&&(c=new Id("onBeforeInput","beforeinput",null,n,c),p.push({event:c,listeners:u}),c.data=N))}sp(p,e)})}function Do(t,e,n){return{instance:t,listener:e,currentTarget:n}}function ka(t,e){for(var n=e+"Capture",r=[];t!==null;){var o=t,a=o.stateNode;o.tag===5&&a!==null&&(o=a,a=ro(t,n),a!=null&&r.unshift(Do(t,a,o)),a=ro(t,e),a!=null&&r.push(Do(t,a,o))),t=t.return}return r}function Er(t){if(t===null)return null;do t=t.return;while(t&&t.tag!==5);return t||null}function lp(t,e,n,r,o){for(var a=e._reactName,s=[];n!==null&&n!==r;){var i=n,l=i.alternate,u=i.stateNode;if(l!==null&&l===r)break;i.tag===5&&u!==null&&(i=u,o?(l=ro(n,a),l!=null&&s.unshift(Do(n,l,i))):o||(l=ro(n,a),l!=null&&s.push(Do(n,l,i)))),n=n.return}s.length!==0&&t.push({event:e,listeners:s})}var zh=/\r\n?/g,Gh=/\u0000|\uFFFD/g;function up(t){return(typeof t=="string"?t:""+t).replace(zh,`
`).replace(Gh,"")}function Ia(t,e,n){if(e=up(e),up(t)!==e&&n)throw Error(M(425))}function Ma(){}var dl=null,pl=null;function fl(t,e){return t==="textarea"||t==="noscript"||typeof e.children=="string"||typeof e.children=="number"||typeof e.dangerouslySetInnerHTML=="object"&&e.dangerouslySetInnerHTML!==null&&e.dangerouslySetInnerHTML.__html!=null}var ml=typeof setTimeout=="function"?setTimeout:void 0,Zh=typeof clearTimeout=="function"?clearTimeout:void 0,cp=typeof Promise=="function"?Promise:void 0,jh=typeof queueMicrotask=="function"?queueMicrotask:typeof cp<"u"?function(t){return cp.resolve(null).then(t).catch(Wh)}:ml;function Wh(t){setTimeout(function(){throw t})}function gl(t,e){var n=e,r=0;do{var o=n.nextSibling;if(t.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){t.removeChild(o),fo(e);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);fo(e)}function _n(t){for(;t!=null;t=t.nextSibling){var e=t.nodeType;if(e===1||e===3)break;if(e===8){if(e=t.data,e==="$"||e==="$!"||e==="$?")break;if(e==="/$")return null}}return t}function dp(t){t=t.previousSibling;for(var e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="$"||n==="$!"||n==="$?"){if(e===0)return t;e--}else n==="/$"&&e++}t=t.previousSibling}return null}var br=Math.random().toString(36).slice(2),$t="__reactFiber$"+br,Co="__reactProps$"+br,tn="__reactContainer$"+br,hl="__reactEvents$"+br,Kh="__reactListeners$"+br,Yh="__reactHandles$"+br;function Bn(t){var e=t[$t];if(e)return e;for(var n=t.parentNode;n;){if(e=n[tn]||n[$t]){if(n=e.alternate,e.child!==null||n!==null&&n.child!==null)for(t=dp(t);t!==null;){if(n=t[$t])return n;t=dp(t)}return e}t=n,n=t.parentNode}return null}function So(t){return t=t[$t]||t[tn],!t||t.tag!==5&&t.tag!==6&&t.tag!==13&&t.tag!==3?null:t}function Ar(t){if(t.tag===5||t.tag===6)return t.stateNode;throw Error(M(33))}function Fa(t){return t[Co]||null}var El=[],_r=-1;function vn(t){return{current:t}}function Ae(t){0>_r||(t.current=El[_r],El[_r]=null,_r--)}function me(t,e){_r++,El[_r]=t.current,t.current=e}var yn={},$e=vn(yn),nt=vn(!1),Pn=yn;function vr(t,e){var n=t.type.contextTypes;if(!n)return yn;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o={},a;for(a in n)o[a]=e[a];return r&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function rt(t){return t=t.childContextTypes,t!=null}function Ba(){Ae(nt),Ae($e)}function pp(t,e,n){if($e.current!==yn)throw Error(M(168));me($e,e),me(nt,n)}function fp(t,e,n){var r=t.stateNode;if(e=e.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in e))throw Error(M(108,I1(t)||"Unknown",o));return ve({},n,r)}function Pa(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||yn,Pn=$e.current,me($e,t),me(nt,nt.current),!0}function mp(t,e,n){var r=t.stateNode;if(!r)throw Error(M(169));n?(t=fp(t,e,Pn),r.__reactInternalMemoizedMergedChildContext=t,Ae(nt),Ae($e),me($e,t)):Ae(nt),me(nt,n)}var nn=null,Ua=!1,bl=!1;function gp(t){nn===null?nn=[t]:nn.push(t)}function Xh(t){Ua=!0,gp(t)}function Dn(){if(!bl&&nn!==null){bl=!0;var t=0,e=de;try{var n=nn;for(de=1;t<n.length;t++){var r=n[t];do r=r(!0);while(r!==null)}nn=null,Ua=!1}catch(o){throw nn!==null&&(nn=nn.slice(t+1)),Ed(qi,Dn),o}finally{de=e,bl=!1}}return null}var yr=[],Dr=0,qa=null,Ha=0,vt=[],yt=0,Un=null,rn=1,on="";function qn(t,e){yr[Dr++]=Ha,yr[Dr++]=qa,qa=t,Ha=e}function hp(t,e,n){vt[yt++]=rn,vt[yt++]=on,vt[yt++]=Un,Un=t;var r=rn;t=on;var o=32-Rt(r)-1;r&=~(1<<o),n+=1;var a=32-Rt(e)+o;if(30<a){var s=o-o%5;a=(r&(1<<s)-1).toString(32),r>>=s,o-=s,rn=1<<32-Rt(e)+o|n<<o|r,on=a+t}else rn=1<<a|n<<o|r,on=t}function Al(t){t.return!==null&&(qn(t,1),hp(t,1,0))}function _l(t){for(;t===qa;)qa=yr[--Dr],yr[Dr]=null,Ha=yr[--Dr],yr[Dr]=null;for(;t===Un;)Un=vt[--yt],vt[yt]=null,on=vt[--yt],vt[yt]=null,rn=vt[--yt],vt[yt]=null}var ft=null,mt=null,_e=!1,Ot=null;function Ep(t,e){var n=Tt(5,null,null,0);n.elementType="DELETED",n.stateNode=e,n.return=t,e=t.deletions,e===null?(t.deletions=[n],t.flags|=16):e.push(n)}function bp(t,e){switch(t.tag){case 5:var n=t.type;return e=e.nodeType!==1||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e,e!==null?(t.stateNode=e,ft=t,mt=_n(e.firstChild),!0):!1;case 6:return e=t.pendingProps===""||e.nodeType!==3?null:e,e!==null?(t.stateNode=e,ft=t,mt=null,!0):!1;case 13:return e=e.nodeType!==8?null:e,e!==null?(n=Un!==null?{id:rn,overflow:on}:null,t.memoizedState={dehydrated:e,treeContext:n,retryLane:1073741824},n=Tt(18,null,null,0),n.stateNode=e,n.return=t,t.child=n,ft=t,mt=null,!0):!1;default:return!1}}function vl(t){return(t.mode&1)!==0&&(t.flags&128)===0}function yl(t){if(_e){var e=mt;if(e){var n=e;if(!bp(t,e)){if(vl(t))throw Error(M(418));e=_n(n.nextSibling);var r=ft;e&&bp(t,e)?Ep(r,n):(t.flags=t.flags&-4097|2,_e=!1,ft=t)}}else{if(vl(t))throw Error(M(418));t.flags=t.flags&-4097|2,_e=!1,ft=t}}}function Ap(t){for(t=t.return;t!==null&&t.tag!==5&&t.tag!==3&&t.tag!==13;)t=t.return;ft=t}function Va(t){if(t!==ft)return!1;if(!_e)return Ap(t),_e=!0,!1;var e;if((e=t.tag!==3)&&!(e=t.tag!==5)&&(e=t.type,e=e!=="head"&&e!=="body"&&!fl(t.type,t.memoizedProps)),e&&(e=mt)){if(vl(t))throw _p(),Error(M(418));for(;e;)Ep(t,e),e=_n(e.nextSibling)}if(Ap(t),t.tag===13){if(t=t.memoizedState,t=t!==null?t.dehydrated:null,!t)throw Error(M(317));e:{for(t=t.nextSibling,e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="/$"){if(e===0){mt=_n(t.nextSibling);break e}e--}else n!=="$"&&n!=="$!"&&n!=="$?"||e++}t=t.nextSibling}mt=null}}else mt=ft?_n(t.stateNode.nextSibling):null;return!0}function _p(){for(var t=mt;t;)t=_n(t.nextSibling)}function Cr(){mt=ft=null,_e=!1}function Dl(t){Ot===null?Ot=[t]:Ot.push(t)}var Qh=en.ReactCurrentBatchConfig;function kt(t,e){if(t&&t.defaultProps){e=ve({},e),t=t.defaultProps;for(var n in t)e[n]===void 0&&(e[n]=t[n]);return e}return e}var $a=vn(null),za=null,Sr=null,Cl=null;function Sl(){Cl=Sr=za=null}function Tl(t){var e=$a.current;Ae($a),t._currentValue=e}function Nl(t,e,n){for(;t!==null;){var r=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,r!==null&&(r.childLanes|=e)):r!==null&&(r.childLanes&e)!==e&&(r.childLanes|=e),t===n)break;t=t.return}}function Tr(t,e){za=t,Cl=Sr=null,t=t.dependencies,t!==null&&t.firstContext!==null&&(t.lanes&e&&(ot=!0),t.firstContext=null)}function Dt(t){var e=t._currentValue;if(Cl!==t)if(t={context:t,memoizedValue:e,next:null},Sr===null){if(za===null)throw Error(M(308));Sr=t,za.dependencies={lanes:0,firstContext:t}}else Sr=Sr.next=t;return e}var Hn=null;function wl(t){Hn===null?Hn=[t]:Hn.push(t)}function vp(t,e,n,r){var o=e.interleaved;return o===null?(n.next=n,wl(e)):(n.next=o.next,o.next=n),e.interleaved=n,an(t,r)}function an(t,e){t.lanes|=e;var n=t.alternate;for(n!==null&&(n.lanes|=e),n=t,t=t.return;t!==null;)t.childLanes|=e,n=t.alternate,n!==null&&(n.childLanes|=e),n=t,t=t.return;return n.tag===3?n.stateNode:null}var Cn=!1;function xl(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function yp(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function sn(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Sn(t,e,n){var r=t.updateQueue;if(r===null)return null;if(r=r.shared,oe&2){var o=r.pending;return o===null?e.next=e:(e.next=o.next,o.next=e),r.pending=e,an(t,n)}return o=r.interleaved,o===null?(e.next=e,wl(r)):(e.next=o.next,o.next=e),r.interleaved=e,an(t,n)}function Ga(t,e,n){if(e=e.updateQueue,e!==null&&(e=e.shared,(n&4194240)!==0)){var r=e.lanes;r&=t.pendingLanes,n|=r,e.lanes=n,$i(t,n)}}function Dp(t,e){var n=t.updateQueue,r=t.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,a=null;if(n=n.firstBaseUpdate,n!==null){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};a===null?o=a=s:a=a.next=s,n=n.next}while(n!==null);a===null?o=a=e:a=a.next=e}else o=a=e;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},t.updateQueue=n;return}t=n.lastBaseUpdate,t===null?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function Za(t,e,n,r){var o=t.updateQueue;Cn=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,i=o.shared.pending;if(i!==null){o.shared.pending=null;var l=i,u=l.next;l.next=null,s===null?a=u:s.next=u,s=l;var c=t.alternate;c!==null&&(c=c.updateQueue,i=c.lastBaseUpdate,i!==s&&(i===null?c.firstBaseUpdate=u:i.next=u,c.lastBaseUpdate=l))}if(a!==null){var p=o.baseState;s=0,c=u=l=null,i=a;do{var d=i.lane,f=i.eventTime;if((r&d)===d){c!==null&&(c=c.next={eventTime:f,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var b=t,A=i;switch(d=e,f=n,A.tag){case 1:if(b=A.payload,typeof b=="function"){p=b.call(f,p,d);break e}p=b;break e;case 3:b.flags=b.flags&-65537|128;case 0:if(b=A.payload,d=typeof b=="function"?b.call(f,p,d):b,d==null)break e;p=ve({},p,d);break e;case 2:Cn=!0}}i.callback!==null&&i.lane!==0&&(t.flags|=64,d=o.effects,d===null?o.effects=[i]:d.push(i))}else f={eventTime:f,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},c===null?(u=c=f,l=p):c=c.next=f,s|=d;if(i=i.next,i===null){if(i=o.shared.pending,i===null)break;d=i,i=d.next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}while(!0);if(c===null&&(l=p),o.baseState=l,o.firstBaseUpdate=u,o.lastBaseUpdate=c,e=o.shared.interleaved,e!==null){o=e;do s|=o.lane,o=o.next;while(o!==e)}else a===null&&(o.shared.lanes=0);zn|=s,t.lanes=s,t.memoizedState=p}}function Cp(t,e,n){if(t=e.effects,e.effects=null,t!==null)for(e=0;e<t.length;e++){var r=t[e],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(M(191,o));o.call(r)}}}var Sp=new Hc.Component().refs;function Rl(t,e,n,r){e=t.memoizedState,n=n(r,e),n=n==null?e:ve({},e,n),t.memoizedState=n,t.lanes===0&&(t.updateQueue.baseState=n)}var ja={isMounted:function(t){return(t=t._reactInternals)?Fn(t)===t:!1},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=et(),o=xn(t),a=sn(r,o);a.payload=e,n!=null&&(a.callback=n),e=Sn(t,a,o),e!==null&&(Ft(e,t,o,r),Ga(e,t,o))},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=et(),o=xn(t),a=sn(r,o);a.tag=1,a.payload=e,n!=null&&(a.callback=n),e=Sn(t,a,o),e!==null&&(Ft(e,t,o,r),Ga(e,t,o))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=et(),r=xn(t),o=sn(n,r);o.tag=2,e!=null&&(o.callback=e),e=Sn(t,o,r),e!==null&&(Ft(e,t,r,n),Ga(e,t,r))}};function Tp(t,e,n,r,o,a,s){return t=t.stateNode,typeof t.shouldComponentUpdate=="function"?t.shouldComponentUpdate(r,a,s):e.prototype&&e.prototype.isPureReactComponent?!Ao(n,r)||!Ao(o,a):!0}function Np(t,e,n){var r=!1,o=yn,a=e.contextType;return typeof a=="object"&&a!==null?a=Dt(a):(o=rt(e)?Pn:$e.current,r=e.contextTypes,a=(r=r!=null)?vr(t,o):yn),e=new e(n,a),t.memoizedState=e.state!==null&&e.state!==void 0?e.state:null,e.updater=ja,t.stateNode=e,e._reactInternals=t,r&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=o,t.__reactInternalMemoizedMaskedChildContext=a),e}function wp(t,e,n,r){t=e.state,typeof e.componentWillReceiveProps=="function"&&e.componentWillReceiveProps(n,r),typeof e.UNSAFE_componentWillReceiveProps=="function"&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&ja.enqueueReplaceState(e,e.state,null)}function Ll(t,e,n,r){var o=t.stateNode;o.props=n,o.state=t.memoizedState,o.refs=Sp,xl(t);var a=e.contextType;typeof a=="object"&&a!==null?o.context=Dt(a):(a=rt(e)?Pn:$e.current,o.context=vr(t,a)),o.state=t.memoizedState,a=e.getDerivedStateFromProps,typeof a=="function"&&(Rl(t,e,a,n),o.state=t.memoizedState),typeof e.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(e=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),e!==o.state&&ja.enqueueReplaceState(o,o.state,null),Za(t,n,o,r),o.state=t.memoizedState),typeof o.componentDidMount=="function"&&(t.flags|=4194308)}function To(t,e,n){if(t=n.ref,t!==null&&typeof t!="function"&&typeof t!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(M(309));var r=n.stateNode}if(!r)throw Error(M(147,t));var o=r,a=""+t;return e!==null&&e.ref!==null&&typeof e.ref=="function"&&e.ref._stringRef===a?e.ref:(e=function(s){var i=o.refs;i===Sp&&(i=o.refs={}),s===null?delete i[a]:i[a]=s},e._stringRef=a,e)}if(typeof t!="string")throw Error(M(284));if(!n._owner)throw Error(M(290,t))}return t}function Wa(t,e){throw t=Object.prototype.toString.call(e),Error(M(31,t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function xp(t){var e=t._init;return e(t._payload)}function Rp(t){function e(h,g){if(t){var E=h.deletions;E===null?(h.deletions=[g],h.flags|=16):E.push(g)}}function n(h,g){if(!t)return null;for(;g!==null;)e(h,g),g=g.sibling;return null}function r(h,g){for(h=new Map;g!==null;)g.key!==null?h.set(g.key,g):h.set(g.index,g),g=g.sibling;return h}function o(h,g){return h=Ln(h,g),h.index=0,h.sibling=null,h}function a(h,g,E){return h.index=E,t?(E=h.alternate,E!==null?(E=E.index,E<g?(h.flags|=2,g):E):(h.flags|=2,g)):(h.flags|=1048576,g)}function s(h){return t&&h.alternate===null&&(h.flags|=2),h}function i(h,g,E,_){return g===null||g.tag!==6?(g=mu(E,h.mode,_),g.return=h,g):(g=o(g,E),g.return=h,g)}function l(h,g,E,_){var T=E.type;return T===lr?c(h,g,E.props.children,_,E.key):g!==null&&(g.elementType===T||typeof T=="object"&&T!==null&&T.$$typeof===pn&&xp(T)===g.type)?(_=o(g,E.props),_.ref=To(h,g,E),_.return=h,_):(_=fs(E.type,E.key,E.props,null,h.mode,_),_.ref=To(h,g,E),_.return=h,_)}function u(h,g,E,_){return g===null||g.tag!==4||g.stateNode.containerInfo!==E.containerInfo||g.stateNode.implementation!==E.implementation?(g=gu(E,h.mode,_),g.return=h,g):(g=o(g,E.children||[]),g.return=h,g)}function c(h,g,E,_,T){return g===null||g.tag!==7?(g=Wn(E,h.mode,_,T),g.return=h,g):(g=o(g,E),g.return=h,g)}function p(h,g,E){if(typeof g=="string"&&g!==""||typeof g=="number")return g=mu(""+g,h.mode,E),g.return=h,g;if(typeof g=="object"&&g!==null){switch(g.$$typeof){case ca:return E=fs(g.type,g.key,g.props,null,h.mode,E),E.ref=To(h,null,g),E.return=h,E;case ir:return g=gu(g,h.mode,E),g.return=h,g;case pn:var _=g._init;return p(h,_(g._payload),E)}if(eo(g)||Qr(g))return g=Wn(g,h.mode,E,null),g.return=h,g;Wa(h,g)}return null}function d(h,g,E,_){var T=g!==null?g.key:null;if(typeof E=="string"&&E!==""||typeof E=="number")return T!==null?null:i(h,g,""+E,_);if(typeof E=="object"&&E!==null){switch(E.$$typeof){case ca:return E.key===T?l(h,g,E,_):null;case ir:return E.key===T?u(h,g,E,_):null;case pn:return T=E._init,d(h,g,T(E._payload),_)}if(eo(E)||Qr(E))return T!==null?null:c(h,g,E,_,null);Wa(h,E)}return null}function f(h,g,E,_,T){if(typeof _=="string"&&_!==""||typeof _=="number")return h=h.get(E)||null,i(g,h,""+_,T);if(typeof _=="object"&&_!==null){switch(_.$$typeof){case ca:return h=h.get(_.key===null?E:_.key)||null,l(g,h,_,T);case ir:return h=h.get(_.key===null?E:_.key)||null,u(g,h,_,T);case pn:var v=_._init;return f(h,g,E,v(_._payload),T)}if(eo(_)||Qr(_))return h=h.get(E)||null,c(g,h,_,T,null);Wa(g,_)}return null}function b(h,g,E,_){for(var T=null,v=null,N=g,R=g=0,H=null;N!==null&&R<E.length;R++){N.index>R?(H=N,N=null):H=N.sibling;var I=d(h,N,E[R],_);if(I===null){N===null&&(N=H);break}t&&N&&I.alternate===null&&e(h,N),g=a(I,g,R),v===null?T=I:v.sibling=I,v=I,N=H}if(R===E.length)return n(h,N),_e&&qn(h,R),T;if(N===null){for(;R<E.length;R++)N=p(h,E[R],_),N!==null&&(g=a(N,g,R),v===null?T=N:v.sibling=N,v=N);return _e&&qn(h,R),T}for(N=r(h,N);R<E.length;R++)H=f(N,h,R,E[R],_),H!==null&&(t&&H.alternate!==null&&N.delete(H.key===null?R:H.key),g=a(H,g,R),v===null?T=H:v.sibling=H,v=H);return t&&N.forEach(function(W){return e(h,W)}),_e&&qn(h,R),T}function A(h,g,E,_){var T=Qr(E);if(typeof T!="function")throw Error(M(150));if(E=T.call(E),E==null)throw Error(M(151));for(var v=T=null,N=g,R=g=0,H=null,I=E.next();N!==null&&!I.done;R++,I=E.next()){N.index>R?(H=N,N=null):H=N.sibling;var W=d(h,N,I.value,_);if(W===null){N===null&&(N=H);break}t&&N&&W.alternate===null&&e(h,N),g=a(W,g,R),v===null?T=W:v.sibling=W,v=W,N=H}if(I.done)return n(h,N),_e&&qn(h,R),T;if(N===null){for(;!I.done;R++,I=E.next())I=p(h,I.value,_),I!==null&&(g=a(I,g,R),v===null?T=I:v.sibling=I,v=I);return _e&&qn(h,R),T}for(N=r(h,N);!I.done;R++,I=E.next())I=f(N,h,R,I.value,_),I!==null&&(t&&I.alternate!==null&&N.delete(I.key===null?R:I.key),g=a(I,g,R),v===null?T=I:v.sibling=I,v=I);return t&&N.forEach(function(le){return e(h,le)}),_e&&qn(h,R),T}function y(h,g,E,_){if(typeof E=="object"&&E!==null&&E.type===lr&&E.key===null&&(E=E.props.children),typeof E=="object"&&E!==null){switch(E.$$typeof){case ca:e:{for(var T=E.key,v=g;v!==null;){if(v.key===T){if(T=E.type,T===lr){if(v.tag===7){n(h,v.sibling),g=o(v,E.props.children),g.return=h,h=g;break e}}else if(v.elementType===T||typeof T=="object"&&T!==null&&T.$$typeof===pn&&xp(T)===v.type){n(h,v.sibling),g=o(v,E.props),g.ref=To(h,v,E),g.return=h,h=g;break e}n(h,v);break}else e(h,v);v=v.sibling}E.type===lr?(g=Wn(E.props.children,h.mode,_,E.key),g.return=h,h=g):(_=fs(E.type,E.key,E.props,null,h.mode,_),_.ref=To(h,g,E),_.return=h,h=_)}return s(h);case ir:e:{for(v=E.key;g!==null;){if(g.key===v)if(g.tag===4&&g.stateNode.containerInfo===E.containerInfo&&g.stateNode.implementation===E.implementation){n(h,g.sibling),g=o(g,E.children||[]),g.return=h,h=g;break e}else{n(h,g);break}else e(h,g);g=g.sibling}g=gu(E,h.mode,_),g.return=h,h=g}return s(h);case pn:return v=E._init,y(h,g,v(E._payload),_)}if(eo(E))return b(h,g,E,_);if(Qr(E))return A(h,g,E,_);Wa(h,E)}return typeof E=="string"&&E!==""||typeof E=="number"?(E=""+E,g!==null&&g.tag===6?(n(h,g.sibling),g=o(g,E),g.return=h,h=g):(n(h,g),g=mu(E,h.mode,_),g.return=h,h=g),s(h)):n(h,g)}return y}var Nr=Rp(!0),Lp=Rp(!1),No={},zt=vn(No),wo=vn(No),xo=vn(No);function Vn(t){if(t===No)throw Error(M(174));return t}function Ol(t,e){switch(me(xo,e),me(wo,t),me(zt,No),t=e.nodeType,t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Li(null,"");break;default:t=t===8?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=Li(e,t)}Ae(zt),me(zt,e)}function wr(){Ae(zt),Ae(wo),Ae(xo)}function Op(t){Vn(xo.current);var e=Vn(zt.current),n=Li(e,t.type);e!==n&&(me(wo,t),me(zt,n))}function kl(t){wo.current===t&&(Ae(zt),Ae(wo))}var ye=vn(0);function Ka(t){for(var e=t;e!==null;){if(e.tag===13){var n=e.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return e}else if(e.tag===19&&e.memoizedProps.revealOrder!==void 0){if(e.flags&128)return e}else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Il=[];function Ml(){for(var t=0;t<Il.length;t++)Il[t]._workInProgressVersionPrimary=null;Il.length=0}var Ya=en.ReactCurrentDispatcher,Fl=en.ReactCurrentBatchConfig,$n=0,De=null,Re=null,ke=null,Xa=!1,Ro=!1,Lo=0,Jh=0;function ze(){throw Error(M(321))}function Bl(t,e){if(e===null)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!Lt(t[n],e[n]))return!1;return!0}function Pl(t,e,n,r,o,a){if($n=a,De=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Ya.current=t===null||t.memoizedState===null?rE:oE,t=n(r,o),Ro){a=0;do{if(Ro=!1,Lo=0,25<=a)throw Error(M(301));a+=1,ke=Re=null,e.updateQueue=null,Ya.current=aE,t=n(r,o)}while(Ro)}if(Ya.current=es,e=Re!==null&&Re.next!==null,$n=0,ke=Re=De=null,Xa=!1,e)throw Error(M(300));return t}function Ul(){var t=Lo!==0;return Lo=0,t}function Gt(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ke===null?De.memoizedState=ke=t:ke=ke.next=t,ke}function Ct(){if(Re===null){var t=De.alternate;t=t!==null?t.memoizedState:null}else t=Re.next;var e=ke===null?De.memoizedState:ke.next;if(e!==null)ke=e,Re=t;else{if(t===null)throw Error(M(310));Re=t,t={memoizedState:Re.memoizedState,baseState:Re.baseState,baseQueue:Re.baseQueue,queue:Re.queue,next:null},ke===null?De.memoizedState=ke=t:ke=ke.next=t}return ke}function Oo(t,e){return typeof e=="function"?e(t):e}function ql(t){var e=Ct(),n=e.queue;if(n===null)throw Error(M(311));n.lastRenderedReducer=t;var r=Re,o=r.baseQueue,a=n.pending;if(a!==null){if(o!==null){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,n.pending=null}if(o!==null){a=o.next,r=r.baseState;var i=s=null,l=null,u=a;do{var c=u.lane;if(($n&c)===c)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:t(r,u.action);else{var p={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(i=l=p,s=r):l=l.next=p,De.lanes|=c,zn|=c}u=u.next}while(u!==null&&u!==a);l===null?s=r:l.next=i,Lt(r,e.memoizedState)||(ot=!0),e.memoizedState=r,e.baseState=s,e.baseQueue=l,n.lastRenderedState=r}if(t=n.interleaved,t!==null){o=t;do a=o.lane,De.lanes|=a,zn|=a,o=o.next;while(o!==t)}else o===null&&(n.lanes=0);return[e.memoizedState,n.dispatch]}function Hl(t){var e=Ct(),n=e.queue;if(n===null)throw Error(M(311));n.lastRenderedReducer=t;var r=n.dispatch,o=n.pending,a=e.memoizedState;if(o!==null){n.pending=null;var s=o=o.next;do a=t(a,s.action),s=s.next;while(s!==o);Lt(a,e.memoizedState)||(ot=!0),e.memoizedState=a,e.baseQueue===null&&(e.baseState=a),n.lastRenderedState=a}return[a,r]}function kp(){}function Ip(t,e){var n=De,r=Ct(),o=e(),a=!Lt(r.memoizedState,o);if(a&&(r.memoizedState=o,ot=!0),r=r.queue,Vl(Bp.bind(null,n,r,t),[t]),r.getSnapshot!==e||a||ke!==null&&ke.memoizedState.tag&1){if(n.flags|=2048,ko(9,Fp.bind(null,n,r,o,e),void 0,null),Ie===null)throw Error(M(349));$n&30||Mp(n,e,o)}return o}function Mp(t,e,n){t.flags|=16384,t={getSnapshot:e,value:n},e=De.updateQueue,e===null?(e={lastEffect:null,stores:null},De.updateQueue=e,e.stores=[t]):(n=e.stores,n===null?e.stores=[t]:n.push(t))}function Fp(t,e,n,r){e.value=n,e.getSnapshot=r,Pp(e)&&Up(t)}function Bp(t,e,n){return n(function(){Pp(e)&&Up(t)})}function Pp(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!Lt(t,n)}catch{return!0}}function Up(t){var e=an(t,1);e!==null&&Ft(e,t,1,-1)}function qp(t){var e=Gt();return typeof t=="function"&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Oo,lastRenderedState:t},e.queue=t,t=t.dispatch=nE.bind(null,De,t),[e.memoizedState,t]}function ko(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},e=De.updateQueue,e===null?(e={lastEffect:null,stores:null},De.updateQueue=e,e.lastEffect=t.next=t):(n=e.lastEffect,n===null?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t)),t}function Hp(){return Ct().memoizedState}function Qa(t,e,n,r){var o=Gt();De.flags|=t,o.memoizedState=ko(1|e,n,void 0,r===void 0?null:r)}function Ja(t,e,n,r){var o=Ct();r=r===void 0?null:r;var a=void 0;if(Re!==null){var s=Re.memoizedState;if(a=s.destroy,r!==null&&Bl(r,s.deps)){o.memoizedState=ko(e,n,a,r);return}}De.flags|=t,o.memoizedState=ko(1|e,n,a,r)}function Vp(t,e){return Qa(8390656,8,t,e)}function Vl(t,e){return Ja(2048,8,t,e)}function $p(t,e){return Ja(4,2,t,e)}function zp(t,e){return Ja(4,4,t,e)}function Gp(t,e){if(typeof e=="function")return t=t(),e(t),function(){e(null)};if(e!=null)return t=t(),e.current=t,function(){e.current=null}}function Zp(t,e,n){return n=n!=null?n.concat([t]):null,Ja(4,4,Gp.bind(null,e,t),n)}function $l(){}function jp(t,e){var n=Ct();e=e===void 0?null:e;var r=n.memoizedState;return r!==null&&e!==null&&Bl(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function Wp(t,e){var n=Ct();e=e===void 0?null:e;var r=n.memoizedState;return r!==null&&e!==null&&Bl(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Kp(t,e,n){return $n&21?(Lt(n,e)||(n=vd(),De.lanes|=n,zn|=n,t.baseState=!0),e):(t.baseState&&(t.baseState=!1,ot=!0),t.memoizedState=n)}function eE(t,e){var n=de;de=n!==0&&4>n?n:4,t(!0);var r=Fl.transition;Fl.transition={};try{t(!1),e()}finally{de=n,Fl.transition=r}}function Yp(){return Ct().memoizedState}function tE(t,e,n){var r=xn(t);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Xp(t))Qp(e,n);else if(n=vp(t,e,n,r),n!==null){var o=et();Ft(n,t,r,o),Jp(n,e,r)}}function nE(t,e,n){var r=xn(t),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Xp(t))Qp(e,o);else{var a=t.alternate;if(t.lanes===0&&(a===null||a.lanes===0)&&(a=e.lastRenderedReducer,a!==null))try{var s=e.lastRenderedState,i=a(s,n);if(o.hasEagerState=!0,o.eagerState=i,Lt(i,s)){var l=e.interleaved;l===null?(o.next=o,wl(e)):(o.next=l.next,l.next=o),e.interleaved=o;return}}catch{}finally{}n=vp(t,e,o,r),n!==null&&(o=et(),Ft(n,t,r,o),Jp(n,e,r))}}function Xp(t){var e=t.alternate;return t===De||e!==null&&e===De}function Qp(t,e){Ro=Xa=!0;var n=t.pending;n===null?e.next=e:(e.next=n.next,n.next=e),t.pending=e}function Jp(t,e,n){if(n&4194240){var r=e.lanes;r&=t.pendingLanes,n|=r,e.lanes=n,$i(t,n)}}var es={readContext:Dt,useCallback:ze,useContext:ze,useEffect:ze,useImperativeHandle:ze,useInsertionEffect:ze,useLayoutEffect:ze,useMemo:ze,useReducer:ze,useRef:ze,useState:ze,useDebugValue:ze,useDeferredValue:ze,useTransition:ze,useMutableSource:ze,useSyncExternalStore:ze,useId:ze,unstable_isNewReconciler:!1},rE={readContext:Dt,useCallback:function(t,e){return Gt().memoizedState=[t,e===void 0?null:e],t},useContext:Dt,useEffect:Vp,useImperativeHandle:function(t,e,n){return n=n!=null?n.concat([t]):null,Qa(4194308,4,Gp.bind(null,e,t),n)},useLayoutEffect:function(t,e){return Qa(4194308,4,t,e)},useInsertionEffect:function(t,e){return Qa(4,2,t,e)},useMemo:function(t,e){var n=Gt();return e=e===void 0?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=Gt();return e=n!==void 0?n(e):e,r.memoizedState=r.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},r.queue=t,t=t.dispatch=tE.bind(null,De,t),[r.memoizedState,t]},useRef:function(t){var e=Gt();return t={current:t},e.memoizedState=t},useState:qp,useDebugValue:$l,useDeferredValue:function(t){return Gt().memoizedState=t},useTransition:function(){var t=qp(!1),e=t[0];return t=eE.bind(null,t[1]),Gt().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,n){var r=De,o=Gt();if(_e){if(n===void 0)throw Error(M(407));n=n()}else{if(n=e(),Ie===null)throw Error(M(349));$n&30||Mp(r,e,n)}o.memoizedState=n;var a={value:n,getSnapshot:e};return o.queue=a,Vp(Bp.bind(null,r,a,t),[t]),r.flags|=2048,ko(9,Fp.bind(null,r,a,n,e),void 0,null),n},useId:function(){var t=Gt(),e=Ie.identifierPrefix;if(_e){var n=on,r=rn;n=(r&~(1<<32-Rt(r)-1)).toString(32)+n,e=":"+e+"R"+n,n=Lo++,0<n&&(e+="H"+n.toString(32)),e+=":"}else n=Jh++,e=":"+e+"r"+n.toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},oE={readContext:Dt,useCallback:jp,useContext:Dt,useEffect:Vl,useImperativeHandle:Zp,useInsertionEffect:$p,useLayoutEffect:zp,useMemo:Wp,useReducer:ql,useRef:Hp,useState:function(){return ql(Oo)},useDebugValue:$l,useDeferredValue:function(t){var e=Ct();return Kp(e,Re.memoizedState,t)},useTransition:function(){var t=ql(Oo)[0],e=Ct().memoizedState;return[t,e]},useMutableSource:kp,useSyncExternalStore:Ip,useId:Yp,unstable_isNewReconciler:!1},aE={readContext:Dt,useCallback:jp,useContext:Dt,useEffect:Vl,useImperativeHandle:Zp,useInsertionEffect:$p,useLayoutEffect:zp,useMemo:Wp,useReducer:Hl,useRef:Hp,useState:function(){return Hl(Oo)},useDebugValue:$l,useDeferredValue:function(t){var e=Ct();return Re===null?e.memoizedState=t:Kp(e,Re.memoizedState,t)},useTransition:function(){var t=Hl(Oo)[0],e=Ct().memoizedState;return[t,e]},useMutableSource:kp,useSyncExternalStore:Ip,useId:Yp,unstable_isNewReconciler:!1};function xr(t,e){try{var n="",r=e;do n+=k1(r),r=r.return;while(r);var o=n}catch(a){o=`
Error generating stack: `+a.message+`
`+a.stack}return{value:t,source:e,stack:o,digest:null}}function zl(t,e,n){return{value:t,source:null,stack:n??null,digest:e??null}}function Gl(t,e){try{console.error(e.value)}catch(n){setTimeout(function(){throw n})}}var sE=typeof WeakMap=="function"?WeakMap:Map;function e0(t,e,n){n=sn(-1,n),n.tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){is||(is=!0,su=r),Gl(t,e)},n}function t0(t,e,n){n=sn(-1,n),n.tag=3;var r=t.type.getDerivedStateFromError;if(typeof r=="function"){var o=e.value;n.payload=function(){return r(o)},n.callback=function(){Gl(t,e)}}var a=t.stateNode;return a!==null&&typeof a.componentDidCatch=="function"&&(n.callback=function(){Gl(t,e),typeof r!="function"&&(Nn===null?Nn=new Set([this]):Nn.add(this));var s=e.stack;this.componentDidCatch(e.value,{componentStack:s!==null?s:""})}),n}function n0(t,e,n){var r=t.pingCache;if(r===null){r=t.pingCache=new sE;var o=new Set;r.set(e,o)}else o=r.get(e),o===void 0&&(o=new Set,r.set(e,o));o.has(n)||(o.add(n),t=_E.bind(null,t,e,n),e.then(t,t))}function r0(t){do{var e;if((e=t.tag===13)&&(e=t.memoizedState,e=e!==null?e.dehydrated!==null:!0),e)return t;t=t.return}while(t!==null);return null}function o0(t,e,n,r,o){return t.mode&1?(t.flags|=65536,t.lanes=o,t):(t===e?t.flags|=65536:(t.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(e=sn(-1,1),e.tag=2,Sn(n,e,1))),n.lanes|=1),t)}var iE=en.ReactCurrentOwner,ot=!1;function Je(t,e,n,r){e.child=t===null?Lp(e,null,n,r):Nr(e,t.child,n,r)}function a0(t,e,n,r,o){n=n.render;var a=e.ref;return Tr(e,o),r=Pl(t,e,n,r,a,o),n=Ul(),t!==null&&!ot?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~o,ln(t,e,o)):(_e&&n&&Al(e),e.flags|=1,Je(t,e,r,o),e.child)}function s0(t,e,n,r,o){if(t===null){var a=n.type;return typeof a=="function"&&!fu(a)&&a.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(e.tag=15,e.type=a,i0(t,e,a,r,o)):(t=fs(n.type,null,r,e,e.mode,o),t.ref=e.ref,t.return=e,e.child=t)}if(a=t.child,!(t.lanes&o)){var s=a.memoizedProps;if(n=n.compare,n=n!==null?n:Ao,n(s,r)&&t.ref===e.ref)return ln(t,e,o)}return e.flags|=1,t=Ln(a,r),t.ref=e.ref,t.return=e,e.child=t}function i0(t,e,n,r,o){if(t!==null){var a=t.memoizedProps;if(Ao(a,r)&&t.ref===e.ref)if(ot=!1,e.pendingProps=r=a,(t.lanes&o)!==0)t.flags&131072&&(ot=!0);else return e.lanes=t.lanes,ln(t,e,o)}return Zl(t,e,n,r,o)}function l0(t,e,n){var r=e.pendingProps,o=r.children,a=t!==null?t.memoizedState:null;if(r.mode==="hidden")if(!(e.mode&1))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},me(Lr,gt),gt|=n;else{if(!(n&1073741824))return t=a!==null?a.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,me(Lr,gt),gt|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=a!==null?a.baseLanes:n,me(Lr,gt),gt|=r}else a!==null?(r=a.baseLanes|n,e.memoizedState=null):r=n,me(Lr,gt),gt|=r;return Je(t,e,o,n),e.child}function u0(t,e){var n=e.ref;(t===null&&n!==null||t!==null&&t.ref!==n)&&(e.flags|=512,e.flags|=2097152)}function Zl(t,e,n,r,o){var a=rt(n)?Pn:$e.current;return a=vr(e,a),Tr(e,o),n=Pl(t,e,n,r,a,o),r=Ul(),t!==null&&!ot?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~o,ln(t,e,o)):(_e&&r&&Al(e),e.flags|=1,Je(t,e,n,o),e.child)}function c0(t,e,n,r,o){if(rt(n)){var a=!0;Pa(e)}else a=!1;if(Tr(e,o),e.stateNode===null)ns(t,e),Np(e,n,r),Ll(e,n,r,o),r=!0;else if(t===null){var s=e.stateNode,i=e.memoizedProps;s.props=i;var l=s.context,u=n.contextType;typeof u=="object"&&u!==null?u=Dt(u):(u=rt(n)?Pn:$e.current,u=vr(e,u));var c=n.getDerivedStateFromProps,p=typeof c=="function"||typeof s.getSnapshotBeforeUpdate=="function";p||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(i!==r||l!==u)&&wp(e,s,r,u),Cn=!1;var d=e.memoizedState;s.state=d,Za(e,r,s,o),l=e.memoizedState,i!==r||d!==l||nt.current||Cn?(typeof c=="function"&&(Rl(e,n,c,r),l=e.memoizedState),(i=Cn||Tp(e,n,i,r,d,l,u))?(p||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount=="function"&&(e.flags|=4194308)):(typeof s.componentDidMount=="function"&&(e.flags|=4194308),e.memoizedProps=r,e.memoizedState=l),s.props=r,s.state=l,s.context=u,r=i):(typeof s.componentDidMount=="function"&&(e.flags|=4194308),r=!1)}else{s=e.stateNode,yp(t,e),i=e.memoizedProps,u=e.type===e.elementType?i:kt(e.type,i),s.props=u,p=e.pendingProps,d=s.context,l=n.contextType,typeof l=="object"&&l!==null?l=Dt(l):(l=rt(n)?Pn:$e.current,l=vr(e,l));var f=n.getDerivedStateFromProps;(c=typeof f=="function"||typeof s.getSnapshotBeforeUpdate=="function")||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(i!==p||d!==l)&&wp(e,s,r,l),Cn=!1,d=e.memoizedState,s.state=d,Za(e,r,s,o);var b=e.memoizedState;i!==p||d!==b||nt.current||Cn?(typeof f=="function"&&(Rl(e,n,f,r),b=e.memoizedState),(u=Cn||Tp(e,n,u,r,d,b,l)||!1)?(c||typeof s.UNSAFE_componentWillUpdate!="function"&&typeof s.componentWillUpdate!="function"||(typeof s.componentWillUpdate=="function"&&s.componentWillUpdate(r,b,l),typeof s.UNSAFE_componentWillUpdate=="function"&&s.UNSAFE_componentWillUpdate(r,b,l)),typeof s.componentDidUpdate=="function"&&(e.flags|=4),typeof s.getSnapshotBeforeUpdate=="function"&&(e.flags|=1024)):(typeof s.componentDidUpdate!="function"||i===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||i===t.memoizedProps&&d===t.memoizedState||(e.flags|=1024),e.memoizedProps=r,e.memoizedState=b),s.props=r,s.state=b,s.context=l,r=u):(typeof s.componentDidUpdate!="function"||i===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||i===t.memoizedProps&&d===t.memoizedState||(e.flags|=1024),r=!1)}return jl(t,e,n,r,a,o)}function jl(t,e,n,r,o,a){u0(t,e);var s=(e.flags&128)!==0;if(!r&&!s)return o&&mp(e,n,!1),ln(t,e,a);r=e.stateNode,iE.current=e;var i=s&&typeof n.getDerivedStateFromError!="function"?null:r.render();return e.flags|=1,t!==null&&s?(e.child=Nr(e,t.child,null,a),e.child=Nr(e,null,i,a)):Je(t,e,i,a),e.memoizedState=r.state,o&&mp(e,n,!0),e.child}function d0(t){var e=t.stateNode;e.pendingContext?pp(t,e.pendingContext,e.pendingContext!==e.context):e.context&&pp(t,e.context,!1),Ol(t,e.containerInfo)}function p0(t,e,n,r,o){return Cr(),Dl(o),e.flags|=256,Je(t,e,n,r),e.child}var Wl={dehydrated:null,treeContext:null,retryLane:0};function Kl(t){return{baseLanes:t,cachePool:null,transitions:null}}function f0(t,e,n){var r=e.pendingProps,o=ye.current,a=!1,s=(e.flags&128)!==0,i;if((i=s)||(i=t!==null&&t.memoizedState===null?!1:(o&2)!==0),i?(a=!0,e.flags&=-129):(t===null||t.memoizedState!==null)&&(o|=1),me(ye,o&1),t===null)return yl(e),t=e.memoizedState,t!==null&&(t=t.dehydrated,t!==null)?(e.mode&1?t.data==="$!"?e.lanes=8:e.lanes=1073741824:e.lanes=1,null):(s=r.children,t=r.fallback,a?(r=e.mode,a=e.child,s={mode:"hidden",children:s},!(r&1)&&a!==null?(a.childLanes=0,a.pendingProps=s):a=ms(s,r,0,null),t=Wn(t,r,n,null),a.return=e,t.return=e,a.sibling=t,e.child=a,e.child.memoizedState=Kl(n),e.memoizedState=Wl,t):Yl(e,s));if(o=t.memoizedState,o!==null&&(i=o.dehydrated,i!==null))return lE(t,e,s,r,i,o,n);if(a){a=r.fallback,s=e.mode,o=t.child,i=o.sibling;var l={mode:"hidden",children:r.children};return!(s&1)&&e.child!==o?(r=e.child,r.childLanes=0,r.pendingProps=l,e.deletions=null):(r=Ln(o,l),r.subtreeFlags=o.subtreeFlags&14680064),i!==null?a=Ln(i,a):(a=Wn(a,s,n,null),a.flags|=2),a.return=e,r.return=e,r.sibling=a,e.child=r,r=a,a=e.child,s=t.child.memoizedState,s=s===null?Kl(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},a.memoizedState=s,a.childLanes=t.childLanes&~n,e.memoizedState=Wl,r}return a=t.child,t=a.sibling,r=Ln(a,{mode:"visible",children:r.children}),!(e.mode&1)&&(r.lanes=n),r.return=e,r.sibling=null,t!==null&&(n=e.deletions,n===null?(e.deletions=[t],e.flags|=16):n.push(t)),e.child=r,e.memoizedState=null,r}function Yl(t,e){return e=ms({mode:"visible",children:e},t.mode,0,null),e.return=t,t.child=e}function ts(t,e,n,r){return r!==null&&Dl(r),Nr(e,t.child,null,n),t=Yl(e,e.pendingProps.children),t.flags|=2,e.memoizedState=null,t}function lE(t,e,n,r,o,a,s){if(n)return e.flags&256?(e.flags&=-257,r=zl(Error(M(422))),ts(t,e,s,r)):e.memoizedState!==null?(e.child=t.child,e.flags|=128,null):(a=r.fallback,o=e.mode,r=ms({mode:"visible",children:r.children},o,0,null),a=Wn(a,o,s,null),a.flags|=2,r.return=e,a.return=e,r.sibling=a,e.child=r,e.mode&1&&Nr(e,t.child,null,s),e.child.memoizedState=Kl(s),e.memoizedState=Wl,a);if(!(e.mode&1))return ts(t,e,s,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var i=r.dgst;return r=i,a=Error(M(419)),r=zl(a,r,void 0),ts(t,e,s,r)}if(i=(s&t.childLanes)!==0,ot||i){if(r=Ie,r!==null){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(r.suspendedLanes|s)?0:o,o!==0&&o!==a.retryLane&&(a.retryLane=o,an(t,o),Ft(r,t,o,-1))}return pu(),r=zl(Error(M(421))),ts(t,e,s,r)}return o.data==="$?"?(e.flags|=128,e.child=t.child,e=vE.bind(null,t),o._reactRetry=e,null):(t=a.treeContext,mt=_n(o.nextSibling),ft=e,_e=!0,Ot=null,t!==null&&(vt[yt++]=rn,vt[yt++]=on,vt[yt++]=Un,rn=t.id,on=t.overflow,Un=e),e=Yl(e,r.children),e.flags|=4096,e)}function m0(t,e,n){t.lanes|=e;var r=t.alternate;r!==null&&(r.lanes|=e),Nl(t.return,e,n)}function Xl(t,e,n,r,o){var a=t.memoizedState;a===null?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function g0(t,e,n){var r=e.pendingProps,o=r.revealOrder,a=r.tail;if(Je(t,e,r.children,n),r=ye.current,r&2)r=r&1|2,e.flags|=128;else{if(t!==null&&t.flags&128)e:for(t=e.child;t!==null;){if(t.tag===13)t.memoizedState!==null&&m0(t,n,e);else if(t.tag===19)m0(t,n,e);else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;t.sibling===null;){if(t.return===null||t.return===e)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(me(ye,r),!(e.mode&1))e.memoizedState=null;else switch(o){case"forwards":for(n=e.child,o=null;n!==null;)t=n.alternate,t!==null&&Ka(t)===null&&(o=n),n=n.sibling;n=o,n===null?(o=e.child,e.child=null):(o=n.sibling,n.sibling=null),Xl(e,!1,o,n,a);break;case"backwards":for(n=null,o=e.child,e.child=null;o!==null;){if(t=o.alternate,t!==null&&Ka(t)===null){e.child=o;break}t=o.sibling,o.sibling=n,n=o,o=t}Xl(e,!0,n,null,a);break;case"together":Xl(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function ns(t,e){!(e.mode&1)&&t!==null&&(t.alternate=null,e.alternate=null,e.flags|=2)}function ln(t,e,n){if(t!==null&&(e.dependencies=t.dependencies),zn|=e.lanes,!(n&e.childLanes))return null;if(t!==null&&e.child!==t.child)throw Error(M(153));if(e.child!==null){for(t=e.child,n=Ln(t,t.pendingProps),e.child=n,n.return=e;t.sibling!==null;)t=t.sibling,n=n.sibling=Ln(t,t.pendingProps),n.return=e;n.sibling=null}return e.child}function uE(t,e,n){switch(e.tag){case 3:d0(e),Cr();break;case 5:Op(e);break;case 1:rt(e.type)&&Pa(e);break;case 4:Ol(e,e.stateNode.containerInfo);break;case 10:var r=e.type._context,o=e.memoizedProps.value;me($a,r._currentValue),r._currentValue=o;break;case 13:if(r=e.memoizedState,r!==null)return r.dehydrated!==null?(me(ye,ye.current&1),e.flags|=128,null):n&e.child.childLanes?f0(t,e,n):(me(ye,ye.current&1),t=ln(t,e,n),t!==null?t.sibling:null);me(ye,ye.current&1);break;case 19:if(r=(n&e.childLanes)!==0,t.flags&128){if(r)return g0(t,e,n);e.flags|=128}if(o=e.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),me(ye,ye.current),r)break;return null;case 22:case 23:return e.lanes=0,l0(t,e,n)}return ln(t,e,n)}var h0,Ql,E0,b0;h0=function(t,e){for(var n=e.child;n!==null;){if(n.tag===5||n.tag===6)t.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===e)break;for(;n.sibling===null;){if(n.return===null||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ql=function(){},E0=function(t,e,n,r){var o=t.memoizedProps;if(o!==r){t=e.stateNode,Vn(zt.current);var a=null;switch(n){case"input":o=Ni(t,o),r=Ni(t,r),a=[];break;case"select":o=ve({},o,{value:void 0}),r=ve({},r,{value:void 0}),a=[];break;case"textarea":o=Ri(t,o),r=Ri(t,r),a=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(t.onclick=Ma)}Oi(n,r);var s;n=null;for(u in o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&o[u]!=null)if(u==="style"){var i=o[u];for(s in i)i.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(Xr.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var l=r[u];if(i=o!=null?o[u]:void 0,r.hasOwnProperty(u)&&l!==i&&(l!=null||i!=null))if(u==="style")if(i){for(s in i)!i.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in l)l.hasOwnProperty(s)&&i[s]!==l[s]&&(n||(n={}),n[s]=l[s])}else n||(a||(a=[]),a.push(u,n)),n=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,i=i?i.__html:void 0,l!=null&&i!==l&&(a=a||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(a=a||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(Xr.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&be("scroll",t),a||i===l||(a=[])):(a=a||[]).push(u,l))}n&&(a=a||[]).push("style",n);var u=a;(e.updateQueue=u)&&(e.flags|=4)}},b0=function(t,e,n,r){n!==r&&(e.flags|=4)};function Io(t,e){if(!_e)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;e!==null;)e.alternate!==null&&(n=e),e=e.sibling;n===null?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?e||t.tail===null?t.tail=null:t.tail.sibling=null:r.sibling=null}}function Ge(t){var e=t.alternate!==null&&t.alternate.child===t.child,n=0,r=0;if(e)for(var o=t.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=t,o=o.sibling;else for(o=t.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=t,o=o.sibling;return t.subtreeFlags|=r,t.childLanes=n,e}function cE(t,e,n){var r=e.pendingProps;switch(_l(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ge(e),null;case 1:return rt(e.type)&&Ba(),Ge(e),null;case 3:return r=e.stateNode,wr(),Ae(nt),Ae($e),Ml(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(t===null||t.child===null)&&(Va(e)?e.flags|=4:t===null||t.memoizedState.isDehydrated&&!(e.flags&256)||(e.flags|=1024,Ot!==null&&(uu(Ot),Ot=null))),Ql(t,e),Ge(e),null;case 5:kl(e);var o=Vn(xo.current);if(n=e.type,t!==null&&e.stateNode!=null)E0(t,e,n,r,o),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!r){if(e.stateNode===null)throw Error(M(166));return Ge(e),null}if(t=Vn(zt.current),Va(e)){r=e.stateNode,n=e.type;var a=e.memoizedProps;switch(r[$t]=e,r[Co]=a,t=(e.mode&1)!==0,n){case"dialog":be("cancel",r),be("close",r);break;case"iframe":case"object":case"embed":be("load",r);break;case"video":case"audio":for(o=0;o<vo.length;o++)be(vo[o],r);break;case"source":be("error",r);break;case"img":case"image":case"link":be("error",r),be("load",r);break;case"details":be("toggle",r);break;case"input":Xc(r,a),be("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},be("invalid",r);break;case"textarea":ed(r,a),be("invalid",r)}Oi(n,a),o=null;for(var s in a)if(a.hasOwnProperty(s)){var i=a[s];s==="children"?typeof i=="string"?r.textContent!==i&&(a.suppressHydrationWarning!==!0&&Ia(r.textContent,i,t),o=["children",i]):typeof i=="number"&&r.textContent!==""+i&&(a.suppressHydrationWarning!==!0&&Ia(r.textContent,i,t),o=["children",""+i]):Xr.hasOwnProperty(s)&&i!=null&&s==="onScroll"&&be("scroll",r)}switch(n){case"input":da(r),Jc(r,a,!0);break;case"textarea":da(r),nd(r);break;case"select":case"option":break;default:typeof a.onClick=="function"&&(r.onclick=Ma)}r=o,e.updateQueue=r,r!==null&&(e.flags|=4)}else{s=o.nodeType===9?o:o.ownerDocument,t==="http://www.w3.org/1999/xhtml"&&(t=rd(n)),t==="http://www.w3.org/1999/xhtml"?n==="script"?(t=s.createElement("div"),t.innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):typeof r.is=="string"?t=s.createElement(n,{is:r.is}):(t=s.createElement(n),n==="select"&&(s=t,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):t=s.createElementNS(t,n),t[$t]=e,t[Co]=r,h0(t,e,!1,!1),e.stateNode=t;e:{switch(s=ki(n,r),n){case"dialog":be("cancel",t),be("close",t),o=r;break;case"iframe":case"object":case"embed":be("load",t),o=r;break;case"video":case"audio":for(o=0;o<vo.length;o++)be(vo[o],t);o=r;break;case"source":be("error",t),o=r;break;case"img":case"image":case"link":be("error",t),be("load",t),o=r;break;case"details":be("toggle",t),o=r;break;case"input":Xc(t,r),o=Ni(t,r),be("invalid",t);break;case"option":o=r;break;case"select":t._wrapperState={wasMultiple:!!r.multiple},o=ve({},r,{value:void 0}),be("invalid",t);break;case"textarea":ed(t,r),o=Ri(t,r),be("invalid",t);break;default:o=r}Oi(n,o),i=o;for(a in i)if(i.hasOwnProperty(a)){var l=i[a];a==="style"?sd(t,l):a==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&od(t,l)):a==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&to(t,l):typeof l=="number"&&to(t,""+l):a!=="suppressContentEditableWarning"&&a!=="suppressHydrationWarning"&&a!=="autoFocus"&&(Xr.hasOwnProperty(a)?l!=null&&a==="onScroll"&&be("scroll",t):l!=null&&hi(t,a,l,s))}switch(n){case"input":da(t),Jc(t,r,!1);break;case"textarea":da(t),nd(t);break;case"option":r.value!=null&&t.setAttribute("value",""+fn(r.value));break;case"select":t.multiple=!!r.multiple,a=r.value,a!=null?ur(t,!!r.multiple,a,!1):r.defaultValue!=null&&ur(t,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(t.onclick=Ma)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(e.flags|=4)}e.ref!==null&&(e.flags|=512,e.flags|=2097152)}return Ge(e),null;case 6:if(t&&e.stateNode!=null)b0(t,e,t.memoizedProps,r);else{if(typeof r!="string"&&e.stateNode===null)throw Error(M(166));if(n=Vn(xo.current),Vn(zt.current),Va(e)){if(r=e.stateNode,n=e.memoizedProps,r[$t]=e,(a=r.nodeValue!==n)&&(t=ft,t!==null))switch(t.tag){case 3:Ia(r.nodeValue,n,(t.mode&1)!==0);break;case 5:t.memoizedProps.suppressHydrationWarning!==!0&&Ia(r.nodeValue,n,(t.mode&1)!==0)}a&&(e.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[$t]=e,e.stateNode=r}return Ge(e),null;case 13:if(Ae(ye),r=e.memoizedState,t===null||t.memoizedState!==null&&t.memoizedState.dehydrated!==null){if(_e&&mt!==null&&e.mode&1&&!(e.flags&128))_p(),Cr(),e.flags|=98560,a=!1;else if(a=Va(e),r!==null&&r.dehydrated!==null){if(t===null){if(!a)throw Error(M(318));if(a=e.memoizedState,a=a!==null?a.dehydrated:null,!a)throw Error(M(317));a[$t]=e}else Cr(),!(e.flags&128)&&(e.memoizedState=null),e.flags|=4;Ge(e),a=!1}else Ot!==null&&(uu(Ot),Ot=null),a=!0;if(!a)return e.flags&65536?e:null}return e.flags&128?(e.lanes=n,e):(r=r!==null,r!==(t!==null&&t.memoizedState!==null)&&r&&(e.child.flags|=8192,e.mode&1&&(t===null||ye.current&1?Le===0&&(Le=3):pu())),e.updateQueue!==null&&(e.flags|=4),Ge(e),null);case 4:return wr(),Ql(t,e),t===null&&yo(e.stateNode.containerInfo),Ge(e),null;case 10:return Tl(e.type._context),Ge(e),null;case 17:return rt(e.type)&&Ba(),Ge(e),null;case 19:if(Ae(ye),a=e.memoizedState,a===null)return Ge(e),null;if(r=(e.flags&128)!==0,s=a.rendering,s===null)if(r)Io(a,!1);else{if(Le!==0||t!==null&&t.flags&128)for(t=e.child;t!==null;){if(s=Ka(t),s!==null){for(e.flags|=128,Io(a,!1),r=s.updateQueue,r!==null&&(e.updateQueue=r,e.flags|=4),e.subtreeFlags=0,r=n,n=e.child;n!==null;)a=n,t=r,a.flags&=14680066,s=a.alternate,s===null?(a.childLanes=0,a.lanes=t,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=s.childLanes,a.lanes=s.lanes,a.child=s.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=s.memoizedProps,a.memoizedState=s.memoizedState,a.updateQueue=s.updateQueue,a.type=s.type,t=s.dependencies,a.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return me(ye,ye.current&1|2),e.child}t=t.sibling}a.tail!==null&&Ne()>Or&&(e.flags|=128,r=!0,Io(a,!1),e.lanes=4194304)}else{if(!r)if(t=Ka(s),t!==null){if(e.flags|=128,r=!0,n=t.updateQueue,n!==null&&(e.updateQueue=n,e.flags|=4),Io(a,!0),a.tail===null&&a.tailMode==="hidden"&&!s.alternate&&!_e)return Ge(e),null}else 2*Ne()-a.renderingStartTime>Or&&n!==1073741824&&(e.flags|=128,r=!0,Io(a,!1),e.lanes=4194304);a.isBackwards?(s.sibling=e.child,e.child=s):(n=a.last,n!==null?n.sibling=s:e.child=s,a.last=s)}return a.tail!==null?(e=a.tail,a.rendering=e,a.tail=e.sibling,a.renderingStartTime=Ne(),e.sibling=null,n=ye.current,me(ye,r?n&1|2:n&1),e):(Ge(e),null);case 22:case 23:return du(),r=e.memoizedState!==null,t!==null&&t.memoizedState!==null!==r&&(e.flags|=8192),r&&e.mode&1?gt&1073741824&&(Ge(e),e.subtreeFlags&6&&(e.flags|=8192)):Ge(e),null;case 24:return null;case 25:return null}throw Error(M(156,e.tag))}function dE(t,e){switch(_l(e),e.tag){case 1:return rt(e.type)&&Ba(),t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 3:return wr(),Ae(nt),Ae($e),Ml(),t=e.flags,t&65536&&!(t&128)?(e.flags=t&-65537|128,e):null;case 5:return kl(e),null;case 13:if(Ae(ye),t=e.memoizedState,t!==null&&t.dehydrated!==null){if(e.alternate===null)throw Error(M(340));Cr()}return t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 19:return Ae(ye),null;case 4:return wr(),null;case 10:return Tl(e.type._context),null;case 22:case 23:return du(),null;case 24:return null;default:return null}}var rs=!1,Ze=!1,pE=typeof WeakSet=="function"?WeakSet:Set,q=null;function Rr(t,e){var n=t.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){Se(t,e,r)}else n.current=null}function Jl(t,e,n){try{n()}catch(r){Se(t,e,r)}}var A0=!1;function fE(t,e){if(dl=Da,t=Yd(),rl(t)){if("selectionStart"in t)var n={start:t.selectionStart,end:t.selectionEnd};else e:{n=(n=t.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch{n=null;break e}var s=0,i=-1,l=-1,u=0,c=0,p=t,d=null;t:for(;;){for(var f;p!==n||o!==0&&p.nodeType!==3||(i=s+o),p!==a||r!==0&&p.nodeType!==3||(l=s+r),p.nodeType===3&&(s+=p.nodeValue.length),(f=p.firstChild)!==null;)d=p,p=f;for(;;){if(p===t)break t;if(d===n&&++u===o&&(i=s),d===a&&++c===r&&(l=s),(f=p.nextSibling)!==null)break;p=d,d=p.parentNode}p=f}n=i===-1||l===-1?null:{start:i,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(pl={focusedElem:t,selectionRange:n},Da=!1,q=e;q!==null;)if(e=q,t=e.child,(e.subtreeFlags&1028)!==0&&t!==null)t.return=e,q=t;else for(;q!==null;){e=q;try{var b=e.alternate;if(e.flags&1024)switch(e.tag){case 0:case 11:case 15:break;case 1:if(b!==null){var A=b.memoizedProps,y=b.memoizedState,h=e.stateNode,g=h.getSnapshotBeforeUpdate(e.elementType===e.type?A:kt(e.type,A),y);h.__reactInternalSnapshotBeforeUpdate=g}break;case 3:var E=e.stateNode.containerInfo;E.nodeType===1?E.textContent="":E.nodeType===9&&E.documentElement&&E.removeChild(E.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(M(163))}}catch(_){Se(e,e.return,_)}if(t=e.sibling,t!==null){t.return=e.return,q=t;break}q=e.return}return b=A0,A0=!1,b}function Mo(t,e,n){var r=e.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&t)===t){var a=o.destroy;o.destroy=void 0,a!==void 0&&Jl(e,n,a)}o=o.next}while(o!==r)}}function os(t,e){if(e=e.updateQueue,e=e!==null?e.lastEffect:null,e!==null){var n=e=e.next;do{if((n.tag&t)===t){var r=n.create;n.destroy=r()}n=n.next}while(n!==e)}}function eu(t){var e=t.ref;if(e!==null){var n=t.stateNode;switch(t.tag){case 5:t=n;break;default:t=n}typeof e=="function"?e(t):e.current=t}}function _0(t){var e=t.alternate;e!==null&&(t.alternate=null,_0(e)),t.child=null,t.deletions=null,t.sibling=null,t.tag===5&&(e=t.stateNode,e!==null&&(delete e[$t],delete e[Co],delete e[hl],delete e[Kh],delete e[Yh])),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function v0(t){return t.tag===5||t.tag===3||t.tag===4}function y0(t){e:for(;;){for(;t.sibling===null;){if(t.return===null||v0(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==5&&t.tag!==6&&t.tag!==18;){if(t.flags&2||t.child===null||t.tag===4)continue e;t.child.return=t,t=t.child}if(!(t.flags&2))return t.stateNode}}function tu(t,e,n){var r=t.tag;if(r===5||r===6)t=t.stateNode,e?n.nodeType===8?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(n.nodeType===8?(e=n.parentNode,e.insertBefore(t,n)):(e=n,e.appendChild(t)),n=n._reactRootContainer,n!=null||e.onclick!==null||(e.onclick=Ma));else if(r!==4&&(t=t.child,t!==null))for(tu(t,e,n),t=t.sibling;t!==null;)tu(t,e,n),t=t.sibling}function nu(t,e,n){var r=t.tag;if(r===5||r===6)t=t.stateNode,e?n.insertBefore(t,e):n.appendChild(t);else if(r!==4&&(t=t.child,t!==null))for(nu(t,e,n),t=t.sibling;t!==null;)nu(t,e,n),t=t.sibling}var qe=null,It=!1;function Tn(t,e,n){for(n=n.child;n!==null;)D0(t,e,n),n=n.sibling}function D0(t,e,n){if(Vt&&typeof Vt.onCommitFiberUnmount=="function")try{Vt.onCommitFiberUnmount(Ea,n)}catch{}switch(n.tag){case 5:Ze||Rr(n,e);case 6:var r=qe,o=It;qe=null,Tn(t,e,n),qe=r,It=o,qe!==null&&(It?(t=qe,n=n.stateNode,t.nodeType===8?t.parentNode.removeChild(n):t.removeChild(n)):qe.removeChild(n.stateNode));break;case 18:qe!==null&&(It?(t=qe,n=n.stateNode,t.nodeType===8?gl(t.parentNode,n):t.nodeType===1&&gl(t,n),fo(t)):gl(qe,n.stateNode));break;case 4:r=qe,o=It,qe=n.stateNode.containerInfo,It=!0,Tn(t,e,n),qe=r,It=o;break;case 0:case 11:case 14:case 15:if(!Ze&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var a=o,s=a.destroy;a=a.tag,s!==void 0&&(a&2||a&4)&&Jl(n,e,s),o=o.next}while(o!==r)}Tn(t,e,n);break;case 1:if(!Ze&&(Rr(n,e),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(i){Se(n,e,i)}Tn(t,e,n);break;case 21:Tn(t,e,n);break;case 22:n.mode&1?(Ze=(r=Ze)||n.memoizedState!==null,Tn(t,e,n),Ze=r):Tn(t,e,n);break;default:Tn(t,e,n)}}function C0(t){var e=t.updateQueue;if(e!==null){t.updateQueue=null;var n=t.stateNode;n===null&&(n=t.stateNode=new pE),e.forEach(function(r){var o=yE.bind(null,t,r);n.has(r)||(n.add(r),r.then(o,o))})}}function Mt(t,e){var n=e.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var a=t,s=e,i=s;e:for(;i!==null;){switch(i.tag){case 5:qe=i.stateNode,It=!1;break e;case 3:qe=i.stateNode.containerInfo,It=!0;break e;case 4:qe=i.stateNode.containerInfo,It=!0;break e}i=i.return}if(qe===null)throw Error(M(160));D0(a,s,o),qe=null,It=!1;var l=o.alternate;l!==null&&(l.return=null),o.return=null}catch(u){Se(o,e,u)}}if(e.subtreeFlags&12854)for(e=e.child;e!==null;)S0(e,t),e=e.sibling}function S0(t,e){var n=t.alternate,r=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(Mt(e,t),Zt(t),r&4){try{Mo(3,t,t.return),os(3,t)}catch(A){Se(t,t.return,A)}try{Mo(5,t,t.return)}catch(A){Se(t,t.return,A)}}break;case 1:Mt(e,t),Zt(t),r&512&&n!==null&&Rr(n,n.return);break;case 5:if(Mt(e,t),Zt(t),r&512&&n!==null&&Rr(n,n.return),t.flags&32){var o=t.stateNode;try{to(o,"")}catch(A){Se(t,t.return,A)}}if(r&4&&(o=t.stateNode,o!=null)){var a=t.memoizedProps,s=n!==null?n.memoizedProps:a,i=t.type,l=t.updateQueue;if(t.updateQueue=null,l!==null)try{i==="input"&&a.type==="radio"&&a.name!=null&&Qc(o,a),ki(i,s);var u=ki(i,a);for(s=0;s<l.length;s+=2){var c=l[s],p=l[s+1];c==="style"?sd(o,p):c==="dangerouslySetInnerHTML"?od(o,p):c==="children"?to(o,p):hi(o,c,p,u)}switch(i){case"input":wi(o,a);break;case"textarea":td(o,a);break;case"select":var d=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var f=a.value;f!=null?ur(o,!!a.multiple,f,!1):d!==!!a.multiple&&(a.defaultValue!=null?ur(o,!!a.multiple,a.defaultValue,!0):ur(o,!!a.multiple,a.multiple?[]:"",!1))}o[Co]=a}catch(A){Se(t,t.return,A)}}break;case 6:if(Mt(e,t),Zt(t),r&4){if(t.stateNode===null)throw Error(M(162));o=t.stateNode,a=t.memoizedProps;try{o.nodeValue=a}catch(A){Se(t,t.return,A)}}break;case 3:if(Mt(e,t),Zt(t),r&4&&n!==null&&n.memoizedState.isDehydrated)try{fo(e.containerInfo)}catch(A){Se(t,t.return,A)}break;case 4:Mt(e,t),Zt(t);break;case 13:Mt(e,t),Zt(t),o=t.child,o.flags&8192&&(a=o.memoizedState!==null,o.stateNode.isHidden=a,!a||o.alternate!==null&&o.alternate.memoizedState!==null||(au=Ne())),r&4&&C0(t);break;case 22:if(c=n!==null&&n.memoizedState!==null,t.mode&1?(Ze=(u=Ze)||c,Mt(e,t),Ze=u):Mt(e,t),Zt(t),r&8192){if(u=t.memoizedState!==null,(t.stateNode.isHidden=u)&&!c&&t.mode&1)for(q=t,c=t.child;c!==null;){for(p=q=c;q!==null;){switch(d=q,f=d.child,d.tag){case 0:case 11:case 14:case 15:Mo(4,d,d.return);break;case 1:Rr(d,d.return);var b=d.stateNode;if(typeof b.componentWillUnmount=="function"){r=d,n=d.return;try{e=r,b.props=e.memoizedProps,b.state=e.memoizedState,b.componentWillUnmount()}catch(A){Se(r,n,A)}}break;case 5:Rr(d,d.return);break;case 22:if(d.memoizedState!==null){w0(p);continue}}f!==null?(f.return=d,q=f):w0(p)}c=c.sibling}e:for(c=null,p=t;;){if(p.tag===5){if(c===null){c=p;try{o=p.stateNode,u?(a=o.style,typeof a.setProperty=="function"?a.setProperty("display","none","important"):a.display="none"):(i=p.stateNode,l=p.memoizedProps.style,s=l!=null&&l.hasOwnProperty("display")?l.display:null,i.style.display=ad("display",s))}catch(A){Se(t,t.return,A)}}}else if(p.tag===6){if(c===null)try{p.stateNode.nodeValue=u?"":p.memoizedProps}catch(A){Se(t,t.return,A)}}else if((p.tag!==22&&p.tag!==23||p.memoizedState===null||p===t)&&p.child!==null){p.child.return=p,p=p.child;continue}if(p===t)break e;for(;p.sibling===null;){if(p.return===null||p.return===t)break e;c===p&&(c=null),p=p.return}c===p&&(c=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:Mt(e,t),Zt(t),r&4&&C0(t);break;case 21:break;default:Mt(e,t),Zt(t)}}function Zt(t){var e=t.flags;if(e&2){try{e:{for(var n=t.return;n!==null;){if(v0(n)){var r=n;break e}n=n.return}throw Error(M(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(to(o,""),r.flags&=-33);var a=y0(t);nu(t,a,o);break;case 3:case 4:var s=r.stateNode.containerInfo,i=y0(t);tu(t,i,s);break;default:throw Error(M(161))}}catch(l){Se(t,t.return,l)}t.flags&=-3}e&4096&&(t.flags&=-4097)}function mE(t,e,n){q=t,T0(t)}function T0(t,e,n){for(var r=(t.mode&1)!==0;q!==null;){var o=q,a=o.child;if(o.tag===22&&r){var s=o.memoizedState!==null||rs;if(!s){var i=o.alternate,l=i!==null&&i.memoizedState!==null||Ze;i=rs;var u=Ze;if(rs=s,(Ze=l)&&!u)for(q=o;q!==null;)s=q,l=s.child,s.tag===22&&s.memoizedState!==null?x0(o):l!==null?(l.return=s,q=l):x0(o);for(;a!==null;)q=a,T0(a),a=a.sibling;q=o,rs=i,Ze=u}N0(t)}else o.subtreeFlags&8772&&a!==null?(a.return=o,q=a):N0(t)}}function N0(t){for(;q!==null;){var e=q;if(e.flags&8772){var n=e.alternate;try{if(e.flags&8772)switch(e.tag){case 0:case 11:case 15:Ze||os(5,e);break;case 1:var r=e.stateNode;if(e.flags&4&&!Ze)if(n===null)r.componentDidMount();else{var o=e.elementType===e.type?n.memoizedProps:kt(e.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=e.updateQueue;a!==null&&Cp(e,a,r);break;case 3:var s=e.updateQueue;if(s!==null){if(n=null,e.child!==null)switch(e.child.tag){case 5:n=e.child.stateNode;break;case 1:n=e.child.stateNode}Cp(e,s,n)}break;case 5:var i=e.stateNode;if(n===null&&e.flags&4){n=i;var l=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(e.memoizedState===null){var u=e.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var p=c.dehydrated;p!==null&&fo(p)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(M(163))}Ze||e.flags&512&&eu(e)}catch(d){Se(e,e.return,d)}}if(e===t){q=null;break}if(n=e.sibling,n!==null){n.return=e.return,q=n;break}q=e.return}}function w0(t){for(;q!==null;){var e=q;if(e===t){q=null;break}var n=e.sibling;if(n!==null){n.return=e.return,q=n;break}q=e.return}}function x0(t){for(;q!==null;){var e=q;try{switch(e.tag){case 0:case 11:case 15:var n=e.return;try{os(4,e)}catch(l){Se(e,n,l)}break;case 1:var r=e.stateNode;if(typeof r.componentDidMount=="function"){var o=e.return;try{r.componentDidMount()}catch(l){Se(e,o,l)}}var a=e.return;try{eu(e)}catch(l){Se(e,a,l)}break;case 5:var s=e.return;try{eu(e)}catch(l){Se(e,s,l)}}}catch(l){Se(e,e.return,l)}if(e===t){q=null;break}var i=e.sibling;if(i!==null){i.return=e.return,q=i;break}q=e.return}}var gE=Math.ceil,as=en.ReactCurrentDispatcher,ru=en.ReactCurrentOwner,St=en.ReactCurrentBatchConfig,oe=0,Ie=null,we=null,He=0,gt=0,Lr=vn(0),Le=0,Fo=null,zn=0,ss=0,ou=0,Bo=null,at=null,au=0,Or=1/0,un=null,is=!1,su=null,Nn=null,ls=!1,wn=null,us=0,Po=0,iu=null,cs=-1,ds=0;function et(){return oe&6?Ne():cs!==-1?cs:cs=Ne()}function xn(t){return t.mode&1?oe&2&&He!==0?He&-He:Qh.transition!==null?(ds===0&&(ds=vd()),ds):(t=de,t!==0||(t=window.event,t=t===void 0?16:Rd(t.type)),t):1}function Ft(t,e,n,r){if(50<Po)throw Po=0,iu=null,Error(M(185));io(t,n,r),(!(oe&2)||t!==Ie)&&(t===Ie&&(!(oe&2)&&(ss|=n),Le===4&&Rn(t,He)),st(t,r),n===1&&oe===0&&!(e.mode&1)&&(Or=Ne()+500,Ua&&Dn()))}function st(t,e){var n=t.callbackNode;Q1(t,e);var r=_a(t,t===Ie?He:0);if(r===0)n!==null&&bd(n),t.callbackNode=null,t.callbackPriority=0;else if(e=r&-r,t.callbackPriority!==e){if(n!=null&&bd(n),e===1)t.tag===0?Xh(L0.bind(null,t)):gp(L0.bind(null,t)),jh(function(){!(oe&6)&&Dn()}),n=null;else{switch(yd(r)){case 1:n=qi;break;case 4:n=Ad;break;case 16:n=ha;break;case 536870912:n=_d;break;default:n=ha}n=U0(n,R0.bind(null,t))}t.callbackPriority=e,t.callbackNode=n}}function R0(t,e){if(cs=-1,ds=0,oe&6)throw Error(M(327));var n=t.callbackNode;if(kr()&&t.callbackNode!==n)return null;var r=_a(t,t===Ie?He:0);if(r===0)return null;if(r&30||r&t.expiredLanes||e)e=ps(t,r);else{e=r;var o=oe;oe|=2;var a=k0();(Ie!==t||He!==e)&&(un=null,Or=Ne()+500,Zn(t,e));do try{bE();break}catch(i){O0(t,i)}while(!0);Sl(),as.current=a,oe=o,we!==null?e=0:(Ie=null,He=0,e=Le)}if(e!==0){if(e===2&&(o=Hi(t),o!==0&&(r=o,e=lu(t,o))),e===1)throw n=Fo,Zn(t,0),Rn(t,r),st(t,Ne()),n;if(e===6)Rn(t,r);else{if(o=t.current.alternate,!(r&30)&&!hE(o)&&(e=ps(t,r),e===2&&(a=Hi(t),a!==0&&(r=a,e=lu(t,a))),e===1))throw n=Fo,Zn(t,0),Rn(t,r),st(t,Ne()),n;switch(t.finishedWork=o,t.finishedLanes=r,e){case 0:case 1:throw Error(M(345));case 2:jn(t,at,un);break;case 3:if(Rn(t,r),(r&130023424)===r&&(e=au+500-Ne(),10<e)){if(_a(t,0)!==0)break;if(o=t.suspendedLanes,(o&r)!==r){et(),t.pingedLanes|=t.suspendedLanes&o;break}t.timeoutHandle=ml(jn.bind(null,t,at,un),e);break}jn(t,at,un);break;case 4:if(Rn(t,r),(r&4194240)===r)break;for(e=t.eventTimes,o=-1;0<r;){var s=31-Rt(r);a=1<<s,s=e[s],s>o&&(o=s),r&=~a}if(r=o,r=Ne()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*gE(r/1960))-r,10<r){t.timeoutHandle=ml(jn.bind(null,t,at,un),r);break}jn(t,at,un);break;case 5:jn(t,at,un);break;default:throw Error(M(329))}}}return st(t,Ne()),t.callbackNode===n?R0.bind(null,t):null}function lu(t,e){var n=Bo;return t.current.memoizedState.isDehydrated&&(Zn(t,e).flags|=256),t=ps(t,e),t!==2&&(e=at,at=n,e!==null&&uu(e)),t}function uu(t){at===null?at=t:at.push.apply(at,t)}function hE(t){for(var e=t;;){if(e.flags&16384){var n=e.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Lt(a(),o))return!1}catch{return!1}}}if(n=e.child,e.subtreeFlags&16384&&n!==null)n.return=e,e=n;else{if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}function Rn(t,e){for(e&=~ou,e&=~ss,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-Rt(e),r=1<<n;t[n]=-1,e&=~r}}function L0(t){if(oe&6)throw Error(M(327));kr();var e=_a(t,0);if(!(e&1))return st(t,Ne()),null;var n=ps(t,e);if(t.tag!==0&&n===2){var r=Hi(t);r!==0&&(e=r,n=lu(t,r))}if(n===1)throw n=Fo,Zn(t,0),Rn(t,e),st(t,Ne()),n;if(n===6)throw Error(M(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,jn(t,at,un),st(t,Ne()),null}function cu(t,e){var n=oe;oe|=1;try{return t(e)}finally{oe=n,oe===0&&(Or=Ne()+500,Ua&&Dn())}}function Gn(t){wn!==null&&wn.tag===0&&!(oe&6)&&kr();var e=oe;oe|=1;var n=St.transition,r=de;try{if(St.transition=null,de=1,t)return t()}finally{de=r,St.transition=n,oe=e,!(oe&6)&&Dn()}}function du(){gt=Lr.current,Ae(Lr)}function Zn(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(n!==-1&&(t.timeoutHandle=-1,Zh(n)),we!==null)for(n=we.return;n!==null;){var r=n;switch(_l(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Ba();break;case 3:wr(),Ae(nt),Ae($e),Ml();break;case 5:kl(r);break;case 4:wr();break;case 13:Ae(ye);break;case 19:Ae(ye);break;case 10:Tl(r.type._context);break;case 22:case 23:du()}n=n.return}if(Ie=t,we=t=Ln(t.current,null),He=gt=e,Le=0,Fo=null,ou=ss=zn=0,at=Bo=null,Hn!==null){for(e=0;e<Hn.length;e++)if(n=Hn[e],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,a=n.pending;if(a!==null){var s=a.next;a.next=o,r.next=s}n.pending=r}Hn=null}return t}function O0(t,e){do{var n=we;try{if(Sl(),Ya.current=es,Xa){for(var r=De.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}Xa=!1}if($n=0,ke=Re=De=null,Ro=!1,Lo=0,ru.current=null,n===null||n.return===null){Le=1,Fo=e,we=null;break}e:{var a=t,s=n.return,i=n,l=e;if(e=He,i.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,c=i,p=c.tag;if(!(c.mode&1)&&(p===0||p===11||p===15)){var d=c.alternate;d?(c.updateQueue=d.updateQueue,c.memoizedState=d.memoizedState,c.lanes=d.lanes):(c.updateQueue=null,c.memoizedState=null)}var f=r0(s);if(f!==null){f.flags&=-257,o0(f,s,i,a,e),f.mode&1&&n0(a,u,e),e=f,l=u;var b=e.updateQueue;if(b===null){var A=new Set;A.add(l),e.updateQueue=A}else b.add(l);break e}else{if(!(e&1)){n0(a,u,e),pu();break e}l=Error(M(426))}}else if(_e&&i.mode&1){var y=r0(s);if(y!==null){!(y.flags&65536)&&(y.flags|=256),o0(y,s,i,a,e),Dl(xr(l,i));break e}}a=l=xr(l,i),Le!==4&&(Le=2),Bo===null?Bo=[a]:Bo.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,e&=-e,a.lanes|=e;var h=e0(a,l,e);Dp(a,h);break e;case 1:i=l;var g=a.type,E=a.stateNode;if(!(a.flags&128)&&(typeof g.getDerivedStateFromError=="function"||E!==null&&typeof E.componentDidCatch=="function"&&(Nn===null||!Nn.has(E)))){a.flags|=65536,e&=-e,a.lanes|=e;var _=t0(a,i,e);Dp(a,_);break e}}a=a.return}while(a!==null)}M0(n)}catch(T){e=T,we===n&&n!==null&&(we=n=n.return);continue}break}while(!0)}function k0(){var t=as.current;return as.current=es,t===null?es:t}function pu(){(Le===0||Le===3||Le===2)&&(Le=4),Ie===null||!(zn&268435455)&&!(ss&268435455)||Rn(Ie,He)}function ps(t,e){var n=oe;oe|=2;var r=k0();(Ie!==t||He!==e)&&(un=null,Zn(t,e));do try{EE();break}catch(o){O0(t,o)}while(!0);if(Sl(),oe=n,as.current=r,we!==null)throw Error(M(261));return Ie=null,He=0,Le}function EE(){for(;we!==null;)I0(we)}function bE(){for(;we!==null&&!$1();)I0(we)}function I0(t){var e=P0(t.alternate,t,gt);t.memoizedProps=t.pendingProps,e===null?M0(t):we=e,ru.current=null}function M0(t){var e=t;do{var n=e.alternate;if(t=e.return,e.flags&32768){if(n=dE(n,e),n!==null){n.flags&=32767,we=n;return}if(t!==null)t.flags|=32768,t.subtreeFlags=0,t.deletions=null;else{Le=6,we=null;return}}else if(n=cE(n,e,gt),n!==null){we=n;return}if(e=e.sibling,e!==null){we=e;return}we=e=t}while(e!==null);Le===0&&(Le=5)}function jn(t,e,n){var r=de,o=St.transition;try{St.transition=null,de=1,AE(t,e,n,r)}finally{St.transition=o,de=r}return null}function AE(t,e,n,r){do kr();while(wn!==null);if(oe&6)throw Error(M(327));n=t.finishedWork;var o=t.finishedLanes;if(n===null)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(M(177));t.callbackNode=null,t.callbackPriority=0;var a=n.lanes|n.childLanes;if(J1(t,a),t===Ie&&(we=Ie=null,He=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||ls||(ls=!0,U0(ha,function(){return kr(),null})),a=(n.flags&15990)!==0,n.subtreeFlags&15990||a){a=St.transition,St.transition=null;var s=de;de=1;var i=oe;oe|=4,ru.current=null,fE(t,n),S0(n,t),Uh(pl),Da=!!dl,pl=dl=null,t.current=n,mE(n),z1(),oe=i,de=s,St.transition=a}else t.current=n;if(ls&&(ls=!1,wn=t,us=o),a=t.pendingLanes,a===0&&(Nn=null),j1(n.stateNode),st(t,Ne()),e!==null)for(r=t.onRecoverableError,n=0;n<e.length;n++)o=e[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(is)throw is=!1,t=su,su=null,t;return us&1&&t.tag!==0&&kr(),a=t.pendingLanes,a&1?t===iu?Po++:(Po=0,iu=t):Po=0,Dn(),null}function kr(){if(wn!==null){var t=yd(us),e=St.transition,n=de;try{if(St.transition=null,de=16>t?16:t,wn===null)var r=!1;else{if(t=wn,wn=null,us=0,oe&6)throw Error(M(331));var o=oe;for(oe|=4,q=t.current;q!==null;){var a=q,s=a.child;if(q.flags&16){var i=a.deletions;if(i!==null){for(var l=0;l<i.length;l++){var u=i[l];for(q=u;q!==null;){var c=q;switch(c.tag){case 0:case 11:case 15:Mo(8,c,a)}var p=c.child;if(p!==null)p.return=c,q=p;else for(;q!==null;){c=q;var d=c.sibling,f=c.return;if(_0(c),c===u){q=null;break}if(d!==null){d.return=f,q=d;break}q=f}}}var b=a.alternate;if(b!==null){var A=b.child;if(A!==null){b.child=null;do{var y=A.sibling;A.sibling=null,A=y}while(A!==null)}}q=a}}if(a.subtreeFlags&2064&&s!==null)s.return=a,q=s;else e:for(;q!==null;){if(a=q,a.flags&2048)switch(a.tag){case 0:case 11:case 15:Mo(9,a,a.return)}var h=a.sibling;if(h!==null){h.return=a.return,q=h;break e}q=a.return}}var g=t.current;for(q=g;q!==null;){s=q;var E=s.child;if(s.subtreeFlags&2064&&E!==null)E.return=s,q=E;else e:for(s=g;q!==null;){if(i=q,i.flags&2048)try{switch(i.tag){case 0:case 11:case 15:os(9,i)}}catch(T){Se(i,i.return,T)}if(i===s){q=null;break e}var _=i.sibling;if(_!==null){_.return=i.return,q=_;break e}q=i.return}}if(oe=o,Dn(),Vt&&typeof Vt.onPostCommitFiberRoot=="function")try{Vt.onPostCommitFiberRoot(Ea,t)}catch{}r=!0}return r}finally{de=n,St.transition=e}}return!1}function F0(t,e,n){e=xr(n,e),e=e0(t,e,1),t=Sn(t,e,1),e=et(),t!==null&&(io(t,1,e),st(t,e))}function Se(t,e,n){if(t.tag===3)F0(t,t,n);else for(;e!==null;){if(e.tag===3){F0(e,t,n);break}else if(e.tag===1){var r=e.stateNode;if(typeof e.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Nn===null||!Nn.has(r))){t=xr(n,t),t=t0(e,t,1),e=Sn(e,t,1),t=et(),e!==null&&(io(e,1,t),st(e,t));break}}e=e.return}}function _E(t,e,n){var r=t.pingCache;r!==null&&r.delete(e),e=et(),t.pingedLanes|=t.suspendedLanes&n,Ie===t&&(He&n)===n&&(Le===4||Le===3&&(He&130023424)===He&&500>Ne()-au?Zn(t,0):ou|=n),st(t,e)}function B0(t,e){e===0&&(t.mode&1?(e=Aa,Aa<<=1,!(Aa&130023424)&&(Aa=4194304)):e=1);var n=et();t=an(t,e),t!==null&&(io(t,e,n),st(t,n))}function vE(t){var e=t.memoizedState,n=0;e!==null&&(n=e.retryLane),B0(t,n)}function yE(t,e){var n=0;switch(t.tag){case 13:var r=t.stateNode,o=t.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=t.stateNode;break;default:throw Error(M(314))}r!==null&&r.delete(e),B0(t,n)}var P0;P0=function(t,e,n){if(t!==null)if(t.memoizedProps!==e.pendingProps||nt.current)ot=!0;else{if(!(t.lanes&n)&&!(e.flags&128))return ot=!1,uE(t,e,n);ot=!!(t.flags&131072)}else ot=!1,_e&&e.flags&1048576&&hp(e,Ha,e.index);switch(e.lanes=0,e.tag){case 2:var r=e.type;ns(t,e),t=e.pendingProps;var o=vr(e,$e.current);Tr(e,n),o=Pl(null,e,r,t,o,n);var a=Ul();return e.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(e.tag=1,e.memoizedState=null,e.updateQueue=null,rt(r)?(a=!0,Pa(e)):a=!1,e.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,xl(e),o.updater=ja,e.stateNode=o,o._reactInternals=e,Ll(e,r,t,n),e=jl(null,e,r,!0,a,n)):(e.tag=0,_e&&a&&Al(e),Je(null,e,o,n),e=e.child),e;case 16:r=e.elementType;e:{switch(ns(t,e),t=e.pendingProps,o=r._init,r=o(r._payload),e.type=r,o=e.tag=CE(r),t=kt(r,t),o){case 0:e=Zl(null,e,r,t,n);break e;case 1:e=c0(null,e,r,t,n);break e;case 11:e=a0(null,e,r,t,n);break e;case 14:e=s0(null,e,r,kt(r.type,t),n);break e}throw Error(M(306,r,""))}return e;case 0:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:kt(r,o),Zl(t,e,r,o,n);case 1:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:kt(r,o),c0(t,e,r,o,n);case 3:e:{if(d0(e),t===null)throw Error(M(387));r=e.pendingProps,a=e.memoizedState,o=a.element,yp(t,e),Za(e,r,null,n);var s=e.memoizedState;if(r=s.element,a.isDehydrated)if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},e.updateQueue.baseState=a,e.memoizedState=a,e.flags&256){o=xr(Error(M(423)),e),e=p0(t,e,r,n,o);break e}else if(r!==o){o=xr(Error(M(424)),e),e=p0(t,e,r,n,o);break e}else for(mt=_n(e.stateNode.containerInfo.firstChild),ft=e,_e=!0,Ot=null,n=Lp(e,null,r,n),e.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Cr(),r===o){e=ln(t,e,n);break e}Je(t,e,r,n)}e=e.child}return e;case 5:return Op(e),t===null&&yl(e),r=e.type,o=e.pendingProps,a=t!==null?t.memoizedProps:null,s=o.children,fl(r,o)?s=null:a!==null&&fl(r,a)&&(e.flags|=32),u0(t,e),Je(t,e,s,n),e.child;case 6:return t===null&&yl(e),null;case 13:return f0(t,e,n);case 4:return Ol(e,e.stateNode.containerInfo),r=e.pendingProps,t===null?e.child=Nr(e,null,r,n):Je(t,e,r,n),e.child;case 11:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:kt(r,o),a0(t,e,r,o,n);case 7:return Je(t,e,e.pendingProps,n),e.child;case 8:return Je(t,e,e.pendingProps.children,n),e.child;case 12:return Je(t,e,e.pendingProps.children,n),e.child;case 10:e:{if(r=e.type._context,o=e.pendingProps,a=e.memoizedProps,s=o.value,me($a,r._currentValue),r._currentValue=s,a!==null)if(Lt(a.value,s)){if(a.children===o.children&&!nt.current){e=ln(t,e,n);break e}}else for(a=e.child,a!==null&&(a.return=e);a!==null;){var i=a.dependencies;if(i!==null){s=a.child;for(var l=i.firstContext;l!==null;){if(l.context===r){if(a.tag===1){l=sn(-1,n&-n),l.tag=2;var u=a.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?l.next=l:(l.next=c.next,c.next=l),u.pending=l}}a.lanes|=n,l=a.alternate,l!==null&&(l.lanes|=n),Nl(a.return,n,e),i.lanes|=n;break}l=l.next}}else if(a.tag===10)s=a.type===e.type?null:a.child;else if(a.tag===18){if(s=a.return,s===null)throw Error(M(341));s.lanes|=n,i=s.alternate,i!==null&&(i.lanes|=n),Nl(s,n,e),s=a.sibling}else s=a.child;if(s!==null)s.return=a;else for(s=a;s!==null;){if(s===e){s=null;break}if(a=s.sibling,a!==null){a.return=s.return,s=a;break}s=s.return}a=s}Je(t,e,o.children,n),e=e.child}return e;case 9:return o=e.type,r=e.pendingProps.children,Tr(e,n),o=Dt(o),r=r(o),e.flags|=1,Je(t,e,r,n),e.child;case 14:return r=e.type,o=kt(r,e.pendingProps),o=kt(r.type,o),s0(t,e,r,o,n);case 15:return i0(t,e,e.type,e.pendingProps,n);case 17:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:kt(r,o),ns(t,e),e.tag=1,rt(r)?(t=!0,Pa(e)):t=!1,Tr(e,n),Np(e,r,o),Ll(e,r,o,n),jl(null,e,r,!0,t,n);case 19:return g0(t,e,n);case 22:return l0(t,e,n)}throw Error(M(156,e.tag))};function U0(t,e){return Ed(t,e)}function DE(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tt(t,e,n,r){return new DE(t,e,n,r)}function fu(t){return t=t.prototype,!(!t||!t.isReactComponent)}function CE(t){if(typeof t=="function")return fu(t)?1:0;if(t!=null){if(t=t.$$typeof,t===Ai)return 11;if(t===yi)return 14}return 2}function Ln(t,e){var n=t.alternate;return n===null?(n=Tt(t.tag,e,t.key,t.mode),n.elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=t.flags&14680064,n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function fs(t,e,n,r,o,a){var s=2;if(r=t,typeof t=="function")fu(t)&&(s=1);else if(typeof t=="string")s=5;else e:switch(t){case lr:return Wn(n.children,o,a,e);case Ei:s=8,o|=8;break;case bi:return t=Tt(12,n,e,o|2),t.elementType=bi,t.lanes=a,t;case _i:return t=Tt(13,n,e,o),t.elementType=_i,t.lanes=a,t;case vi:return t=Tt(19,n,e,o),t.elementType=vi,t.lanes=a,t;case jc:return ms(n,o,a,e);default:if(typeof t=="object"&&t!==null)switch(t.$$typeof){case Gc:s=10;break e;case Zc:s=9;break e;case Ai:s=11;break e;case yi:s=14;break e;case pn:s=16,r=null;break e}throw Error(M(130,t==null?t:typeof t,""))}return e=Tt(s,n,e,o),e.elementType=t,e.type=r,e.lanes=a,e}function Wn(t,e,n,r){return t=Tt(7,t,r,e),t.lanes=n,t}function ms(t,e,n,r){return t=Tt(22,t,r,e),t.elementType=jc,t.lanes=n,t.stateNode={isHidden:!1},t}function mu(t,e,n){return t=Tt(6,t,null,e),t.lanes=n,t}function gu(t,e,n){return e=Tt(4,t.children!==null?t.children:[],t.key,e),e.lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function SE(t,e,n,r,o){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Vi(0),this.expirationTimes=Vi(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vi(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function hu(t,e,n,r,o,a,s,i,l){return t=new SE(t,e,n,i,l),e===1?(e=1,a===!0&&(e|=8)):e=0,a=Tt(3,null,null,e),t.current=a,a.stateNode=t,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},xl(a),t}function TE(t,e,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:ir,key:r==null?null:""+r,children:t,containerInfo:e,implementation:n}}function q0(t){if(!t)return yn;t=t._reactInternals;e:{if(Fn(t)!==t||t.tag!==1)throw Error(M(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break e;case 1:if(rt(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break e}}e=e.return}while(e!==null);throw Error(M(171))}if(t.tag===1){var n=t.type;if(rt(n))return fp(t,n,e)}return e}function H0(t,e,n,r,o,a,s,i,l){return t=hu(n,r,!0,t,o,a,s,i,l),t.context=q0(null),n=t.current,r=et(),o=xn(n),a=sn(r,o),a.callback=e??null,Sn(n,a,o),t.current.lanes=o,io(t,o,r),st(t,r),t}function gs(t,e,n,r){var o=e.current,a=et(),s=xn(o);return n=q0(n),e.context===null?e.context=n:e.pendingContext=n,e=sn(a,s),e.payload={element:t},r=r===void 0?null:r,r!==null&&(e.callback=r),t=Sn(o,e,s),t!==null&&(Ft(t,o,s,a),Ga(t,o,s)),s}function hs(t){if(t=t.current,!t.child)return null;switch(t.child.tag){case 5:return t.child.stateNode;default:return t.child.stateNode}}function V0(t,e){if(t=t.memoizedState,t!==null&&t.dehydrated!==null){var n=t.retryLane;t.retryLane=n!==0&&n<e?n:e}}function Eu(t,e){V0(t,e),(t=t.alternate)&&V0(t,e)}function NE(){return null}var $0=typeof reportError=="function"?reportError:function(t){console.error(t)};function bu(t){this._internalRoot=t}Es.prototype.render=bu.prototype.render=function(t){var e=this._internalRoot;if(e===null)throw Error(M(409));gs(t,e,null,null)},Es.prototype.unmount=bu.prototype.unmount=function(){var t=this._internalRoot;if(t!==null){this._internalRoot=null;var e=t.containerInfo;Gn(function(){gs(null,t,null,null)}),e[tn]=null}};function Es(t){this._internalRoot=t}Es.prototype.unstable_scheduleHydration=function(t){if(t){var e=Sd();t={blockedOn:null,target:t,priority:e};for(var n=0;n<En.length&&e!==0&&e<En[n].priority;n++);En.splice(n,0,t),n===0&&wd(t)}};function Au(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11)}function bs(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11&&(t.nodeType!==8||t.nodeValue!==" react-mount-point-unstable "))}function z0(){}function wE(t,e,n,r,o){if(o){if(typeof r=="function"){var a=r;r=function(){var u=hs(s);a.call(u)}}var s=H0(e,r,t,0,null,!1,!1,"",z0);return t._reactRootContainer=s,t[tn]=s.current,yo(t.nodeType===8?t.parentNode:t),Gn(),s}for(;o=t.lastChild;)t.removeChild(o);if(typeof r=="function"){var i=r;r=function(){var u=hs(l);i.call(u)}}var l=hu(t,0,!1,null,null,!1,!1,"",z0);return t._reactRootContainer=l,t[tn]=l.current,yo(t.nodeType===8?t.parentNode:t),Gn(function(){gs(e,l,n,r)}),l}function As(t,e,n,r,o){var a=n._reactRootContainer;if(a){var s=a;if(typeof o=="function"){var i=o;o=function(){var l=hs(s);i.call(l)}}gs(e,s,t,o)}else s=wE(n,e,t,o,r);return hs(s)}Dd=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var n=so(e.pendingLanes);n!==0&&($i(e,n|1),st(e,Ne()),!(oe&6)&&(Or=Ne()+500,Dn()))}break;case 13:Gn(function(){var r=an(t,1);if(r!==null){var o=et();Ft(r,t,1,o)}}),Eu(t,1)}},zi=function(t){if(t.tag===13){var e=an(t,134217728);if(e!==null){var n=et();Ft(e,t,134217728,n)}Eu(t,134217728)}},Cd=function(t){if(t.tag===13){var e=xn(t),n=an(t,e);if(n!==null){var r=et();Ft(n,t,e,r)}Eu(t,e)}},Sd=function(){return de},Td=function(t,e){var n=de;try{return de=t,e()}finally{de=n}},Fi=function(t,e,n){switch(e){case"input":if(wi(t,n),e=n.name,n.type==="radio"&&e!=null){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=Fa(r);if(!o)throw Error(M(90));Yc(r),wi(r,o)}}}break;case"textarea":td(t,n);break;case"select":e=n.value,e!=null&&ur(t,!!n.multiple,e,!1)}},cd=cu,dd=Gn;var xE={usingClientEntryPoint:!1,Events:[So,Ar,Fa,ld,ud,cu]},Uo={findFiberByHostInstance:Bn,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},RE={bundleType:Uo.bundleType,version:Uo.version,rendererPackageName:Uo.rendererPackageName,rendererConfig:Uo.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:en.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return t=gd(t),t===null?null:t.stateNode},findFiberByHostInstance:Uo.findFiberByHostInstance||NE,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var _s=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!_s.isDisabled&&_s.supportsFiber)try{Ea=_s.inject(RE),Vt=_s}catch{}}ct.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=xE,ct.createPortal=function(t,e){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Au(e))throw Error(M(200));return TE(t,e,null,n)},ct.createRoot=function(t,e){if(!Au(t))throw Error(M(299));var n=!1,r="",o=$0;return e!=null&&(e.unstable_strictMode===!0&&(n=!0),e.identifierPrefix!==void 0&&(r=e.identifierPrefix),e.onRecoverableError!==void 0&&(o=e.onRecoverableError)),e=hu(t,1,!1,null,null,n,!1,r,o),t[tn]=e.current,yo(t.nodeType===8?t.parentNode:t),new bu(e)},ct.findDOMNode=function(t){if(t==null)return null;if(t.nodeType===1)return t;var e=t._reactInternals;if(e===void 0)throw typeof t.render=="function"?Error(M(188)):(t=Object.keys(t).join(","),Error(M(268,t)));return t=gd(e),t=t===null?null:t.stateNode,t},ct.flushSync=function(t){return Gn(t)},ct.hydrate=function(t,e,n){if(!bs(e))throw Error(M(200));return As(null,t,e,!0,n)},ct.hydrateRoot=function(t,e,n){if(!Au(t))throw Error(M(405));var r=n!=null&&n.hydratedSources||null,o=!1,a="",s=$0;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(a=n.identifierPrefix),n.onRecoverableError!==void 0&&(s=n.onRecoverableError)),e=H0(e,null,t,1,n??null,o,!1,a,s),t[tn]=e.current,yo(t),r)for(t=0;t<r.length;t++)n=r[t],o=n._getVersion,o=o(n._source),e.mutableSourceEagerHydrationData==null?e.mutableSourceEagerHydrationData=[n,o]:e.mutableSourceEagerHydrationData.push(n,o);return new Es(e)},ct.render=function(t,e,n){if(!bs(e))throw Error(M(200));return As(null,t,e,!1,n)},ct.unmountComponentAtNode=function(t){if(!bs(t))throw Error(M(40));return t._reactRootContainer?(Gn(function(){As(null,null,t,!1,function(){t._reactRootContainer=null,t[tn]=null})}),!0):!1},ct.unstable_batchedUpdates=cu,ct.unstable_renderSubtreeIntoContainer=function(t,e,n,r){if(!bs(n))throw Error(M(200));if(t==null||t._reactInternals===void 0)throw Error(M(38));return As(t,e,n,!1,r)},ct.version="18.2.0-next-9e3b772b8-20220608";function G0(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(G0)}catch(t){console.error(t)}}G0(),Pc.exports=ct;var LE=Pc.exports,Z0=LE;pi.createRoot=Z0.createRoot,pi.hydrateRoot=Z0.hydrateRoot;const j0={embedId:null,baseApiUrl:null,prompt:null,model:null,temperature:null,showThoughts:!1,chatIcon:"plus",brandImageUrl:null,greeting:null,buttonColor:"#262626",userBgColor:"#2C2F35",assistantBgColor:"#2563eb",noSponsor:null,sponsorText:"Powered by AnythingLLM",sponsorLink:"https://anythingllm.com",position:"bottom-right",assistantName:"AnythingLLM Chat Assistant",assistantIcon:null,windowHeight:null,windowWidth:null,textSize:null,noHeader:null,language:"en",sendMessageText:null,resetChatText:null,openOnLoad:"off",supportEmail:null,username:null,defaultMessages:[]};function OE(){const[t,e]=U.useState({loaded:!1,...j0});return U.useEffect(()=>{function n(){if(!document)return!1;if(!ae.settings.baseApiUrl||!ae.settings.embedId)throw new Error("[AnythingLLM Embed Module::Abort] - Invalid script tag setup detected. Missing required parameters for boot!");e({...j0,...kE(ae.settings),loaded:!0})}n()},[document]),t}const W0={_fallbacks:{defaultMessages:[]},defaultMessages:function(t=null){if(typeof t!="string")return this._fallbacks.defaultMessages;try{const e=t.split(",");if(!Array.isArray(e)||e.length===0||!e.every(n=>typeof n=="string"&&n.length>0))throw new Error("Invalid default-messages attribute value. Must be array of strings");return e.map(n=>n.trim())}catch(e){return console.error("AnythingLLMEmbed",e),this._fallbacks.defaultMessages}}};function kE(t={}){const e={};for(let[n,r]of Object.entries(t)){if(!W0.hasOwnProperty(n)){e[n]=r;continue}const o=W0[n](r);e[n]=o}return e}let vs;const IE=new Uint8Array(16);function ME(){if(!vs&&(vs=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!vs))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return vs(IE)}const Ve=[];for(let t=0;t<256;++t)Ve.push((t+256).toString(16).slice(1));function FE(t,e=0){return Ve[t[e+0]]+Ve[t[e+1]]+Ve[t[e+2]]+Ve[t[e+3]]+"-"+Ve[t[e+4]]+Ve[t[e+5]]+"-"+Ve[t[e+6]]+Ve[t[e+7]]+"-"+Ve[t[e+8]]+Ve[t[e+9]]+"-"+Ve[t[e+10]]+Ve[t[e+11]]+Ve[t[e+12]]+Ve[t[e+13]]+Ve[t[e+14]]+Ve[t[e+15]]}const K0={randomUUID:typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function Kn(t,e,n){if(K0.randomUUID&&!e&&!t)return K0.randomUUID();t=t||{};const r=t.random||(t.rng||ME)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){n=n||0;for(let o=0;o<16;++o)e[n+o]=r[o];return e}return FE(r)}function Y0(){const[t,e]=U.useState("");return U.useEffect(()=>{function n(){var s,i;if(!window||!((s=ae==null?void 0:ae.settings)!=null&&s.embedId))return;const r=`allm_${(i=ae==null?void 0:ae.settings)==null?void 0:i.embedId}_session_id`,o=window.localStorage.getItem(r);if(o){console.log("Resuming session id",o),e(o);return}const a=Kn();console.log("Registering new session id",a),window.localStorage.setItem(r,a),e(a)}n()},[window]),t}const _u="___anythingllm-chat-widget-open___";function BE(t=null){try{const e=new URL(t);return e.pathname=e.pathname.replace("anythingllm-chat-widget.js","anythingllm-chat-widget.min.css").replace("anythingllm-chat-widget.min.js","anythingllm-chat-widget.min.css"),e.toString()}catch{return""}}function PE(){var r;const[t,e]=U.useState(!!((r=window==null?void 0:window.localStorage)!=null&&r.getItem(_u))||!1);function n(o){o===!0&&window.localStorage.setItem(_u,"1"),o===!1&&window.localStorage.removeItem(_u),e(o)}return{isChatOpen:t,toggleOpenChat:n}}const UE=`
pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}/*!
  Theme: GitHub Dark Dimmed
  Description: Dark dimmed theme as seen on github.com
  Author: github.com
  Maintainer: @Hirse
  Updated: 2021-05-15

  Colors taken from GitHub's CSS
*/.hljs{color:#adbac7;background:#22272e}.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-template-tag,.hljs-template-variable,.hljs-type,.hljs-variable.language_{color:#f47067}.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_{color:#dcbdfb}.hljs-attr,.hljs-attribute,.hljs-literal,.hljs-meta,.hljs-number,.hljs-operator,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-variable{color:#6cb6ff}.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#96d0ff}.hljs-built_in,.hljs-symbol{color:#f69d50}.hljs-code,.hljs-comment,.hljs-formula{color:#768390}.hljs-name,.hljs-quote,.hljs-selector-pseudo,.hljs-selector-tag{color:#8ddb8c}.hljs-subst{color:#adbac7}.hljs-section{color:#316dca;font-weight:700}.hljs-bullet{color:#eac55f}.hljs-emphasis{color:#adbac7;font-style:italic}.hljs-strong{color:#adbac7;font-weight:700}.hljs-addition{color:#b4f1b4;background-color:#1b4721}.hljs-deletion{color:#ffd8d3;background-color:#78191b}
`,qE=`
  /**
   * ==============================================
   * Dot Falling
   * ==============================================
   */
  .allm-dot-falling {
    position: relative;
    left: -9999px;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: #000000;
    color: #5fa4fa;
    box-shadow: 9999px 0 0 0 #000000;
    animation: dot-falling 1.5s infinite linear;
    animation-delay: 0.1s;
  }

  .allm-dot-falling::before,
  .allm-dot-falling::after {
    content: "";
    display: inline-block;
    position: absolute;
    top: 0;
  }

  .allm-dot-falling::before {
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: #000000;
    color: #000000;
    animation: dot-falling-before 1.5s infinite linear;
    animation-delay: 0s;
  }

  .allm-dot-falling::after {
    width: 10px;
    height: 10px;
    border-radius: 5px;
    background-color: #000000;
    color: #000000;
    animation: dot-falling-after 1.5s infinite linear;
    animation-delay: 0.2s;
  }

  @keyframes dot-falling {
    0% {
      box-shadow: 9999px -15px 0 0 rgba(152, 128, 255, 0);
    }
    25%,
    50%,
    75% {
      box-shadow: 9999px 0 0 0 #000000;
    }
    100% {
      box-shadow: 9999px 15px 0 0 rgba(152, 128, 255, 0);
    }
  }

  @keyframes dot-falling-before {
    0% {
      box-shadow: 9984px -15px 0 0 rgba(152, 128, 255, 0);
    }
    25%,
    50%,
    75% {
      box-shadow: 9984px 0 0 0 #000000;
    }
    100% {
      box-shadow: 9984px 15px 0 0 rgba(152, 128, 255, 0);
    }
  }

  @keyframes dot-falling-after {
    0% {
      box-shadow: 10014px -15px 0 0 rgba(152, 128, 255, 0);
    }
    25%,
    50%,
    75% {
      box-shadow: 10014px 0 0 0 #000000;
    }
    100% {
      box-shadow: 10014px 15px 0 0 rgba(152, 128, 255, 0);
    }
  }

  #chat-history::-webkit-scrollbar,
  #chat-container::-webkit-scrollbar,
  .allm-no-scroll::-webkit-scrollbar {
    display: none !important;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  #chat-history,
  #chat-container,
  .allm-no-scroll {
    -ms-overflow-style: none !important; /* IE and Edge */
    scrollbar-width: none !important; /* Firefox */
  }

  span.allm-whitespace-pre-line>p {
    margin: 0px;
  }
`;function HE(){return w.jsxs("head",{children:[w.jsx("style",{children:UE}),w.jsx("style",{children:qE}),w.jsx("link",{rel:"stylesheet",href:ae.stylesSrc})]})}const VE=U.createContext({color:"currentColor",size:"1em",weight:"regular",mirrored:!1});var $E=Object.defineProperty,ys=Object.getOwnPropertySymbols,X0=Object.prototype.hasOwnProperty,Q0=Object.prototype.propertyIsEnumerable,J0=(t,e,n)=>e in t?$E(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,ef=(t,e)=>{for(var n in e||(e={}))X0.call(e,n)&&J0(t,n,e[n]);if(ys)for(var n of ys(e))Q0.call(e,n)&&J0(t,n,e[n]);return t},tf=(t,e)=>{var n={};for(var r in t)X0.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&ys)for(var r of ys(t))e.indexOf(r)<0&&Q0.call(t,r)&&(n[r]=t[r]);return n};const Me=U.forwardRef((t,e)=>{const n=t,{alt:r,color:o,size:a,weight:s,mirrored:i,children:l,weights:u}=n,c=tf(n,["alt","color","size","weight","mirrored","children","weights"]),p=U.useContext(VE),{color:d="currentColor",size:f,weight:b="regular",mirrored:A=!1}=p,y=tf(p,["color","size","weight","mirrored"]);return m.createElement("svg",ef(ef({ref:e,xmlns:"http://www.w3.org/2000/svg",width:a??f,height:a??f,fill:o??d,viewBox:"0 0 256 256",transform:i||A?"scale(-1, 1)":void 0},y),c),!!r&&m.createElement("title",null,r),l,u.get(s??b))});Me.displayName="IconBase";const zE=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M228,128a100,100,0,0,1-98.66,100H128a99.39,99.39,0,0,1-68.62-27.29,12,12,0,0,1,16.48-17.45,76,76,0,1,0-1.57-109c-.13.13-.25.25-.39.37L54.89,92H72a12,12,0,0,1,0,24H24a12,12,0,0,1-12-12V56a12,12,0,0,1,24,0V76.72L57.48,57.06A100,100,0,0,1,228,128Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M72,104H24V56Z",opacity:"0.2"}),m.createElement("path",{d:"M195.88,60.08A96.08,96.08,0,0,0,60.25,60L49.31,70,29.66,50.3A8,8,0,0,0,16,56v48a8,8,0,0,0,8,8H72a8,8,0,0,0,5.66-13.66l-17-17,10.54-9.65a3.07,3.07,0,0,0,.26-.25,80,80,0,1,1,1.65,114.78,8,8,0,0,0-11,11.63A95.38,95.38,0,0,0,128,224h1.32A96,96,0,0,0,195.88,60.08ZM32,96V75.28L52.69,96Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,128a96,96,0,0,1-94.71,96H128A95.38,95.38,0,0,1,62.1,197.8a8,8,0,0,1,11-11.63A80,80,0,1,0,71.43,71.39a3.07,3.07,0,0,1-.26.25L60.63,81.29l17,17A8,8,0,0,1,72,112H24a8,8,0,0,1-8-8V56A8,8,0,0,1,29.66,50.3L49.31,70,60.25,60A96,96,0,0,1,224,128Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M222,128a94,94,0,0,1-92.74,94H128a93.43,93.43,0,0,1-64.5-25.65,6,6,0,1,1,8.24-8.72A82,82,0,1,0,70,70l-.19.19L39.44,98H72a6,6,0,0,1,0,12H24a6,6,0,0,1-6-6V56a6,6,0,0,1,12,0V90.34L61.63,61.4A94,94,0,0,1,222,128Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,128a96,96,0,0,1-94.71,96H128A95.38,95.38,0,0,1,62.1,197.8a8,8,0,0,1,11-11.63A80,80,0,1,0,71.43,71.39a3.07,3.07,0,0,1-.26.25L44.59,96H72a8,8,0,0,1,0,16H24a8,8,0,0,1-8-8V56a8,8,0,0,1,16,0V85.8L60.25,60A96,96,0,0,1,224,128Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M220,128a92,92,0,0,1-90.77,92H128a91.47,91.47,0,0,1-63.13-25.1,4,4,0,1,1,5.5-5.82A84,84,0,1,0,68.6,68.57l-.13.12L34.3,100H72a4,4,0,0,1,0,8H24a4,4,0,0,1-4-4V56a4,4,0,0,1,8,0V94.89l35-32A92,92,0,0,1,220,128Z"}))]]);var GE=Object.defineProperty,ZE=Object.defineProperties,jE=Object.getOwnPropertyDescriptors,nf=Object.getOwnPropertySymbols,WE=Object.prototype.hasOwnProperty,KE=Object.prototype.propertyIsEnumerable,rf=(t,e,n)=>e in t?GE(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,YE=(t,e)=>{for(var n in e||(e={}))WE.call(e,n)&&rf(t,n,e[n]);if(nf)for(var n of nf(e))KE.call(e,n)&&rf(t,n,e[n]);return t},XE=(t,e)=>ZE(t,jE(e));const of=U.forwardRef((t,e)=>m.createElement(Me,XE(YE({ref:e},t),{weights:zE})));of.displayName="ArrowCounterClockwise";const QE=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M208.49,152.49l-72,72a12,12,0,0,1-17,0l-72-72a12,12,0,0,1,17-17L116,187V40a12,12,0,0,1,24,0V187l51.51-51.52a12,12,0,0,1,17,17Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M200,144l-72,72L56,144Z",opacity:"0.2"}),m.createElement("path",{d:"M207.39,140.94A8,8,0,0,0,200,136H136V40a8,8,0,0,0-16,0v96H56a8,8,0,0,0-5.66,13.66l72,72a8,8,0,0,0,11.32,0l72-72A8,8,0,0,0,207.39,140.94ZM128,204.69,75.31,152H180.69Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M205.66,149.66l-72,72a8,8,0,0,1-11.32,0l-72-72A8,8,0,0,1,56,136h64V40a8,8,0,0,1,16,0v96h64a8,8,0,0,1,5.66,13.66Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M204.24,148.24l-72,72a6,6,0,0,1-8.48,0l-72-72a6,6,0,0,1,8.48-8.48L122,201.51V40a6,6,0,0,1,12,0V201.51l61.76-61.75a6,6,0,0,1,8.48,8.48Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M205.66,149.66l-72,72a8,8,0,0,1-11.32,0l-72-72a8,8,0,0,1,11.32-11.32L120,196.69V40a8,8,0,0,1,16,0V196.69l58.34-58.35a8,8,0,0,1,11.32,11.32Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M202.83,146.83l-72,72a4,4,0,0,1-5.66,0l-72-72a4,4,0,0,1,5.66-5.66L124,206.34V40a4,4,0,0,1,8,0V206.34l65.17-65.17a4,4,0,0,1,5.66,5.66Z"}))]]);var JE=Object.defineProperty,eb=Object.defineProperties,tb=Object.getOwnPropertyDescriptors,af=Object.getOwnPropertySymbols,nb=Object.prototype.hasOwnProperty,rb=Object.prototype.propertyIsEnumerable,sf=(t,e,n)=>e in t?JE(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,ob=(t,e)=>{for(var n in e||(e={}))nb.call(e,n)&&sf(t,n,e[n]);if(af)for(var n of af(e))rb.call(e,n)&&sf(t,n,e[n]);return t},ab=(t,e)=>eb(t,tb(e));const lf=U.forwardRef((t,e)=>m.createElement(Me,ab(ob({ref:e},t),{weights:QE})));lf.displayName="ArrowDown";const sb=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M241,150.65s0,0,0-.05a51.33,51.33,0,0,0-2.53-5.9L196.93,50.18a12,12,0,0,0-2.5-3.65,36,36,0,0,0-50.92,0A12,12,0,0,0,140,55V76H116V55a12,12,0,0,0-3.51-8.48,36,36,0,0,0-50.92,0,12,12,0,0,0-2.5,3.65L17.53,144.7A51.33,51.33,0,0,0,15,150.6s0,0,0,.05A52,52,0,1,0,116,168V100h24v68a52,52,0,1,0,101-17.35ZM80,62.28a12,12,0,0,1,12-1.22v63.15a51.9,51.9,0,0,0-35.9-7.62ZM64,196a28,28,0,1,1,28-28A28,28,0,0,1,64,196ZM164,61.06a12.06,12.06,0,0,1,12,1.22l23.87,54.31a51.9,51.9,0,0,0-35.9,7.62ZM192,196a28,28,0,1,1,28-28A28,28,0,0,1,192,196Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M104,168a40,40,0,1,1-40-40A40,40,0,0,1,104,168Zm88-40a40,40,0,1,0,40,40A40,40,0,0,0,192,128Z",opacity:"0.2"}),m.createElement("path",{d:"M237.2,151.87v0a47.1,47.1,0,0,0-2.35-5.45L193.26,51.8a7.82,7.82,0,0,0-1.66-2.44,32,32,0,0,0-45.26,0A8,8,0,0,0,144,55V80H112V55a8,8,0,0,0-2.34-5.66,32,32,0,0,0-45.26,0,7.82,7.82,0,0,0-1.66,2.44L21.15,146.4a47.1,47.1,0,0,0-2.35,5.45v0A48,48,0,1,0,112,168V96h32v72a48,48,0,1,0,93.2-16.13ZM76.71,59.75a16,16,0,0,1,19.29-1v73.51a47.9,47.9,0,0,0-46.79-9.92ZM64,200a32,32,0,1,1,32-32A32,32,0,0,1,64,200ZM160,58.74a16,16,0,0,1,19.29,1l27.5,62.58A47.9,47.9,0,0,0,160,132.25ZM192,200a32,32,0,1,1,32-32A32,32,0,0,1,192,200Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M237.22,151.9l0-.1a1.42,1.42,0,0,0-.07-.22,48.46,48.46,0,0,0-2.31-5.3L193.27,51.8a8,8,0,0,0-1.67-2.44,32,32,0,0,0-45.26,0A8,8,0,0,0,144,55V80H112V55a8,8,0,0,0-2.34-5.66,32,32,0,0,0-45.26,0,8,8,0,0,0-1.67,2.44L21.2,146.28a48.46,48.46,0,0,0-2.31,5.3,1.72,1.72,0,0,0-.07.21s0,.08,0,.11a48,48,0,0,0,90.32,32.51,47.49,47.49,0,0,0,2.9-16.59V96h32v71.83a47.49,47.49,0,0,0,2.9,16.59,48,48,0,0,0,90.32-32.51Zm-143.15,27a32,32,0,0,1-60.2-21.71l1.81-4.13A32,32,0,0,1,96,167.88V168h0A32,32,0,0,1,94.07,178.94ZM203,198.07A32,32,0,0,1,160,168h0v-.11a32,32,0,0,1,60.32-14.78l1.81,4.13A32,32,0,0,1,203,198.07Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M233,147.24,191.43,52.6a6,6,0,0,0-1.25-1.83,30,30,0,0,0-42.42,0A6,6,0,0,0,146,55V82H110V55a6,6,0,0,0-1.76-4.25,30,30,0,0,0-42.42,0,6,6,0,0,0-1.25,1.83L23,147.24A46,46,0,1,0,110,168V94h36v74a46,46,0,1,0,87-20.76ZM64,202a34,34,0,1,1,34-34A34,34,0,0,1,64,202Zm0-80a45.77,45.77,0,0,0-18.55,3.92L75.06,58.54A18,18,0,0,1,98,57.71V137A45.89,45.89,0,0,0,64,122Zm94-64.28a18,18,0,0,1,22.94.83l29.61,67.37A45.9,45.9,0,0,0,158,137ZM192,202a34,34,0,1,1,34-34A34,34,0,0,1,192,202Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M237.2,151.87v0a47.1,47.1,0,0,0-2.35-5.45L193.26,51.8a7.82,7.82,0,0,0-1.66-2.44,32,32,0,0,0-45.26,0A8,8,0,0,0,144,55V80H112V55a8,8,0,0,0-2.34-5.66,32,32,0,0,0-45.26,0,7.82,7.82,0,0,0-1.66,2.44L21.15,146.4a47.1,47.1,0,0,0-2.35,5.45v0A48,48,0,1,0,112,168V96h32v72a48,48,0,1,0,93.2-16.13ZM76.71,59.75a16,16,0,0,1,19.29-1v73.51a47.9,47.9,0,0,0-46.79-9.92ZM64,200a32,32,0,1,1,32-32A32,32,0,0,1,64,200ZM160,58.74a16,16,0,0,1,19.29,1l27.5,62.58A47.9,47.9,0,0,0,160,132.25ZM192,200a32,32,0,1,1,32-32A32,32,0,0,1,192,200Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M231.22,148.09,189.6,53.41a3.94,3.94,0,0,0-.83-1.22,28,28,0,0,0-39.6,0A4,4,0,0,0,148,55V84H108V55a4,4,0,0,0-1.17-2.83,28,28,0,0,0-39.6,0,3.94,3.94,0,0,0-.83,1.22L24.78,148.09A44,44,0,1,0,108,168V92h40v76a44,44,0,1,0,83.22-19.91ZM64,204a36,36,0,1,1,36-36A36,36,0,0,1,64,204Zm0-80a43.78,43.78,0,0,0-22.66,6.3L73.4,57.35a20,20,0,0,1,26.6-.59v86A44,44,0,0,0,64,124Zm92-67.23a20,20,0,0,1,26.6.59l32.06,72.94A43.92,43.92,0,0,0,156,142.74ZM192,204a36,36,0,1,1,36-36A36,36,0,0,1,192,204Z"}))]]);var ib=Object.defineProperty,lb=Object.defineProperties,ub=Object.getOwnPropertyDescriptors,uf=Object.getOwnPropertySymbols,cb=Object.prototype.hasOwnProperty,db=Object.prototype.propertyIsEnumerable,cf=(t,e,n)=>e in t?ib(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,pb=(t,e)=>{for(var n in e||(e={}))cb.call(e,n)&&cf(t,n,e[n]);if(uf)for(var n of uf(e))db.call(e,n)&&cf(t,n,e[n]);return t},fb=(t,e)=>lb(t,ub(e));const df=U.forwardRef((t,e)=>m.createElement(Me,fb(pb({ref:e},t),{weights:sb})));df.displayName="Binoculars";const mb=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M208,96l-80,80L48,96Z",opacity:"0.2"}),m.createElement("path",{d:"M215.39,92.94A8,8,0,0,0,208,88H48a8,8,0,0,0-5.66,13.66l80,80a8,8,0,0,0,11.32,0l80-80A8,8,0,0,0,215.39,92.94ZM128,164.69,67.31,104H188.69Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80A8,8,0,0,1,48,88H208a8,8,0,0,1,5.66,13.66Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M212.24,100.24l-80,80a6,6,0,0,1-8.48,0l-80-80a6,6,0,0,1,8.48-8.48L128,167.51l75.76-75.75a6,6,0,0,1,8.48,8.48Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80A8,8,0,0,1,53.66,90.34L128,164.69l74.34-74.35a8,8,0,0,1,11.32,11.32Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M210.83,98.83l-80,80a4,4,0,0,1-5.66,0l-80-80a4,4,0,0,1,5.66-5.66L128,170.34l77.17-77.17a4,4,0,1,1,5.66,5.66Z"}))]]);var gb=Object.defineProperty,hb=Object.defineProperties,Eb=Object.getOwnPropertyDescriptors,pf=Object.getOwnPropertySymbols,bb=Object.prototype.hasOwnProperty,Ab=Object.prototype.propertyIsEnumerable,ff=(t,e,n)=>e in t?gb(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,_b=(t,e)=>{for(var n in e||(e={}))bb.call(e,n)&&ff(t,n,e[n]);if(pf)for(var n of pf(e))Ab.call(e,n)&&ff(t,n,e[n]);return t},vb=(t,e)=>hb(t,Eb(e));const vu=U.forwardRef((t,e)=>m.createElement(Me,vb(_b({ref:e},t),{weights:mb})));vu.displayName="CaretDown";const yb=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M120,128a16,16,0,1,1-16-16A16,16,0,0,1,120,128Zm32-16a16,16,0,1,0,16,16A16,16,0,0,0,152,112Zm84,16A108,108,0,0,1,78.77,224.15L46.34,235A20,20,0,0,1,21,209.66l10.81-32.43A108,108,0,1,1,236,128Zm-24,0A84,84,0,1,0,55.27,170.06a12,12,0,0,1,1,9.81l-9.93,29.79,29.79-9.93a12.1,12.1,0,0,1,3.8-.62,12,12,0,0,1,6,1.62A84,84,0,0,0,212,128Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,128A96,96,0,0,1,79.93,211.11h0L42.54,223.58a8,8,0,0,1-10.12-10.12l12.47-37.39h0A96,96,0,1,1,224,128Z",opacity:"0.2"}),m.createElement("path",{d:"M128,24A104,104,0,0,0,36.18,176.88L24.83,210.93a16,16,0,0,0,20.24,20.24l34.05-11.35A104,104,0,1,0,128,24Zm0,192a87.87,87.87,0,0,1-44.06-11.81,8,8,0,0,0-4-1.08,7.85,7.85,0,0,0-2.53.42L40,216,52.47,178.6a8,8,0,0,0-.66-6.54A88,88,0,1,1,128,216Zm12-88a12,12,0,1,1-12-12A12,12,0,0,1,140,128Zm-44,0a12,12,0,1,1-12-12A12,12,0,0,1,96,128Zm88,0a12,12,0,1,1-12-12A12,12,0,0,1,184,128Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M128,24A104,104,0,0,0,36.18,176.88L24.83,210.93a16,16,0,0,0,20.24,20.24l34.05-11.35A104,104,0,1,0,128,24ZM84,140a12,12,0,1,1,12-12A12,12,0,0,1,84,140Zm44,0a12,12,0,1,1,12-12A12,12,0,0,1,128,140Zm44,0a12,12,0,1,1,12-12A12,12,0,0,1,172,140Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M138,128a10,10,0,1,1-10-10A10,10,0,0,1,138,128ZM84,118a10,10,0,1,0,10,10A10,10,0,0,0,84,118Zm88,0a10,10,0,1,0,10,10A10,10,0,0,0,172,118Zm58,10A102,102,0,0,1,79.31,217.65L44.44,229.27a14,14,0,0,1-17.71-17.71l11.62-34.87A102,102,0,1,1,230,128Zm-12,0A90,90,0,1,0,50.08,173.06a6,6,0,0,1,.5,4.91L38.12,215.35a2,2,0,0,0,2.53,2.53L78,205.42a6.2,6.2,0,0,1,1.9-.31,6.09,6.09,0,0,1,3,.81A90,90,0,0,0,218,128Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M140,128a12,12,0,1,1-12-12A12,12,0,0,1,140,128ZM84,116a12,12,0,1,0,12,12A12,12,0,0,0,84,116Zm88,0a12,12,0,1,0,12,12A12,12,0,0,0,172,116Zm60,12A104,104,0,0,1,79.12,219.82L45.07,231.17a16,16,0,0,1-20.24-20.24l11.35-34.05A104,104,0,1,1,232,128Zm-16,0A88,88,0,1,0,51.81,172.06a8,8,0,0,1,.66,6.54L40,216,77.4,203.53a7.85,7.85,0,0,1,2.53-.42,8,8,0,0,1,4,1.08A88,88,0,0,0,216,128Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M136,128a8,8,0,1,1-8-8A8,8,0,0,1,136,128Zm-52-8a8,8,0,1,0,8,8A8,8,0,0,0,84,120Zm88,0a8,8,0,1,0,8,8A8,8,0,0,0,172,120Zm56,8A100,100,0,0,1,79.5,215.47l-35.69,11.9a12,12,0,0,1-15.18-15.18l11.9-35.69A100,100,0,1,1,228,128Zm-8,0A92,92,0,1,0,48.35,174.07a4,4,0,0,1,.33,3.27L36.22,214.72a4,4,0,0,0,5.06,5.06l37.38-12.46a3.93,3.93,0,0,1,1.27-.21,4.05,4.05,0,0,1,2,.54A92,92,0,0,0,220,128Z"}))]]);var Db=Object.defineProperty,Cb=Object.defineProperties,Sb=Object.getOwnPropertyDescriptors,mf=Object.getOwnPropertySymbols,Tb=Object.prototype.hasOwnProperty,Nb=Object.prototype.propertyIsEnumerable,gf=(t,e,n)=>e in t?Db(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,wb=(t,e)=>{for(var n in e||(e={}))Tb.call(e,n)&&gf(t,n,e[n]);if(mf)for(var n of mf(e))Nb.call(e,n)&&gf(t,n,e[n]);return t},xb=(t,e)=>Cb(t,Sb(e));const hf=U.forwardRef((t,e)=>m.createElement(Me,xb(wb({ref:e},t),{weights:yb})));hf.displayName="ChatCircleDots";const Rb=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M232.49,80.49l-128,128a12,12,0,0,1-17,0l-56-56a12,12,0,1,1,17-17L96,183,215.51,63.51a12,12,0,0,1,17,17Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M232,56V200a16,16,0,0,1-16,16H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216A16,16,0,0,1,232,56Z",opacity:"0.2"}),m.createElement("path",{d:"M205.66,85.66l-96,96a8,8,0,0,1-11.32,0l-40-40a8,8,0,0,1,11.32-11.32L104,164.69l90.34-90.35a8,8,0,0,1,11.32,11.32Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40ZM205.66,85.66l-96,96a8,8,0,0,1-11.32,0l-40-40a8,8,0,0,1,11.32-11.32L104,164.69l90.34-90.35a8,8,0,0,1,11.32,11.32Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M228.24,76.24l-128,128a6,6,0,0,1-8.48,0l-56-56a6,6,0,0,1,8.48-8.48L96,191.51,219.76,67.76a6,6,0,0,1,8.48,8.48Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M226.83,74.83l-128,128a4,4,0,0,1-5.66,0l-56-56a4,4,0,0,1,5.66-5.66L96,194.34,221.17,69.17a4,4,0,1,1,5.66,5.66Z"}))]]);var Lb=Object.defineProperty,Ob=Object.defineProperties,kb=Object.getOwnPropertyDescriptors,Ef=Object.getOwnPropertySymbols,Ib=Object.prototype.hasOwnProperty,Mb=Object.prototype.propertyIsEnumerable,bf=(t,e,n)=>e in t?Lb(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,Fb=(t,e)=>{for(var n in e||(e={}))Ib.call(e,n)&&bf(t,n,e[n]);if(Ef)for(var n of Ef(e))Mb.call(e,n)&&bf(t,n,e[n]);return t},Bb=(t,e)=>Ob(t,kb(e));const Af=U.forwardRef((t,e)=>m.createElement(Me,Bb(Fb({ref:e},t),{weights:Rb})));Af.displayName="Check";const Pb=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,128a96,96,0,1,1-96-96A96,96,0,0,1,224,128Z",opacity:"0.2"}),m.createElement("path",{d:"M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,176A72,72,0,0,1,92,65.64a8,8,0,0,1,8,13.85,56,56,0,1,0,56,0,8,8,0,0,1,8-13.85A72,72,0,0,1,128,200Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M230,128a102,102,0,0,1-204,0c0-40.18,23.35-76.86,59.5-93.45a6,6,0,0,1,5,10.9C58.61,60.09,38,92.49,38,128a90,90,0,0,0,180,0c0-35.51-20.61-67.91-52.5-82.55a6,6,0,0,1,5-10.9C206.65,51.14,230,87.82,230,128Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M228,128a100,100,0,0,1-200,0c0-39.4,22.9-75.37,58.33-91.63a4,4,0,1,1,3.34,7.27C57.07,58.6,36,91.71,36,128a92,92,0,0,0,184,0c0-36.29-21.07-69.4-53.67-84.36a4,4,0,1,1,3.34-7.27C205.1,52.63,228,88.6,228,128Z"}))]]);var Ub=Object.defineProperty,qb=Object.defineProperties,Hb=Object.getOwnPropertyDescriptors,_f=Object.getOwnPropertySymbols,Vb=Object.prototype.hasOwnProperty,$b=Object.prototype.propertyIsEnumerable,vf=(t,e,n)=>e in t?Ub(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,zb=(t,e)=>{for(var n in e||(e={}))Vb.call(e,n)&&vf(t,n,e[n]);if(_f)for(var n of _f(e))$b.call(e,n)&&vf(t,n,e[n]);return t},Gb=(t,e)=>qb(t,Hb(e));const Ds=U.forwardRef((t,e)=>m.createElement(Me,Gb(zb({ref:e},t),{weights:Pb})));Ds.displayName="CircleNotch";const Zb=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,28H88A12,12,0,0,0,76,40V76H40A12,12,0,0,0,28,88V216a12,12,0,0,0,12,12H168a12,12,0,0,0,12-12V180h36a12,12,0,0,0,12-12V40A12,12,0,0,0,216,28ZM156,204H52V100H156Zm48-48H180V88a12,12,0,0,0-12-12H100V52H204Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,40V168H168V88H88V40Z",opacity:"0.2"}),m.createElement("path",{d:"M216,32H88a8,8,0,0,0-8,8V80H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H168a8,8,0,0,0,8-8V176h40a8,8,0,0,0,8-8V40A8,8,0,0,0,216,32ZM160,208H48V96H160Zm48-48H176V88a8,8,0,0,0-8-8H96V48H208Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,32H88a8,8,0,0,0-8,8V80H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H168a8,8,0,0,0,8-8V176h40a8,8,0,0,0,8-8V40A8,8,0,0,0,216,32Zm-8,128H176V88a8,8,0,0,0-8-8H96V48H208Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,34H88a6,6,0,0,0-6,6V82H40a6,6,0,0,0-6,6V216a6,6,0,0,0,6,6H168a6,6,0,0,0,6-6V174h42a6,6,0,0,0,6-6V40A6,6,0,0,0,216,34ZM162,210H46V94H162Zm48-48H174V88a6,6,0,0,0-6-6H94V46H210Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,32H88a8,8,0,0,0-8,8V80H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H168a8,8,0,0,0,8-8V176h40a8,8,0,0,0,8-8V40A8,8,0,0,0,216,32ZM160,208H48V96H160Zm48-48H176V88a8,8,0,0,0-8-8H96V48H208Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,36H88a4,4,0,0,0-4,4V84H40a4,4,0,0,0-4,4V216a4,4,0,0,0,4,4H168a4,4,0,0,0,4-4V172h44a4,4,0,0,0,4-4V40A4,4,0,0,0,216,36ZM164,212H44V92H164Zm48-48H172V88a4,4,0,0,0-4-4H92V44H212Z"}))]]);var jb=Object.defineProperty,Wb=Object.defineProperties,Kb=Object.getOwnPropertyDescriptors,yf=Object.getOwnPropertySymbols,Yb=Object.prototype.hasOwnProperty,Xb=Object.prototype.propertyIsEnumerable,Df=(t,e,n)=>e in t?jb(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,Qb=(t,e)=>{for(var n in e||(e={}))Yb.call(e,n)&&Df(t,n,e[n]);if(yf)for(var n of yf(e))Xb.call(e,n)&&Df(t,n,e[n]);return t},Jb=(t,e)=>Wb(t,Kb(e));const Cf=U.forwardRef((t,e)=>m.createElement(Me,Jb(Qb({ref:e},t),{weights:Zb})));Cf.displayName="Copy";const eA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M128,96a32,32,0,1,0,32,32A32,32,0,0,0,128,96Zm0,40a8,8,0,1,1,8-8A8,8,0,0,1,128,136Zm0-56A32,32,0,1,0,96,48,32,32,0,0,0,128,80Zm0-40a8,8,0,1,1-8,8A8,8,0,0,1,128,40Zm0,136a32,32,0,1,0,32,32A32,32,0,0,0,128,176Zm0,40a8,8,0,1,1,8-8A8,8,0,0,1,128,216Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M152,128a24,24,0,1,1-24-24A24,24,0,0,1,152,128ZM128,72a24,24,0,1,0-24-24A24,24,0,0,0,128,72Zm0,112a24,24,0,1,0,24,24A24,24,0,0,0,128,184Z",opacity:"0.2"}),m.createElement("path",{d:"M128,96a32,32,0,1,0,32,32A32,32,0,0,0,128,96Zm0,48a16,16,0,1,1,16-16A16,16,0,0,1,128,144Zm0-64A32,32,0,1,0,96,48,32,32,0,0,0,128,80Zm0-48a16,16,0,1,1-16,16A16,16,0,0,1,128,32Zm0,144a32,32,0,1,0,32,32A32,32,0,0,0,128,176Zm0,48a16,16,0,1,1,16-16A16,16,0,0,1,128,224Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M156,128a28,28,0,1,1-28-28A28,28,0,0,1,156,128ZM128,76a28,28,0,1,0-28-28A28,28,0,0,0,128,76Zm0,104a28,28,0,1,0,28,28A28,28,0,0,0,128,180Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M128,98a30,30,0,1,0,30,30A30,30,0,0,0,128,98Zm0,48a18,18,0,1,1,18-18A18,18,0,0,1,128,146Zm0-68A30,30,0,1,0,98,48,30,30,0,0,0,128,78Zm0-48a18,18,0,1,1-18,18A18,18,0,0,1,128,30Zm0,148a30,30,0,1,0,30,30A30,30,0,0,0,128,178Zm0,48a18,18,0,1,1,18-18A18,18,0,0,1,128,226Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M128,96a32,32,0,1,0,32,32A32,32,0,0,0,128,96Zm0,48a16,16,0,1,1,16-16A16,16,0,0,1,128,144Zm0-64A32,32,0,1,0,96,48,32,32,0,0,0,128,80Zm0-48a16,16,0,1,1-16,16A16,16,0,0,1,128,32Zm0,144a32,32,0,1,0,32,32A32,32,0,0,0,128,176Zm0,48a16,16,0,1,1,16-16A16,16,0,0,1,128,224Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M128,100a28,28,0,1,0,28,28A28,28,0,0,0,128,100Zm0,48a20,20,0,1,1,20-20A20,20,0,0,1,128,148Zm0-72a28,28,0,1,0-28-28A28,28,0,0,0,128,76Zm0-48a20,20,0,1,1-20,20A20,20,0,0,1,128,28Zm0,152a28,28,0,1,0,28,28A28,28,0,0,0,128,180Zm0,48a20,20,0,1,1,20-20A20,20,0,0,1,128,228Z"}))]]);var tA=Object.defineProperty,nA=Object.defineProperties,rA=Object.getOwnPropertyDescriptors,Sf=Object.getOwnPropertySymbols,oA=Object.prototype.hasOwnProperty,aA=Object.prototype.propertyIsEnumerable,Tf=(t,e,n)=>e in t?tA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,sA=(t,e)=>{for(var n in e||(e={}))oA.call(e,n)&&Tf(t,n,e[n]);if(Sf)for(var n of Sf(e))aA.call(e,n)&&Tf(t,n,e[n]);return t},iA=(t,e)=>nA(t,rA(e));const Nf=U.forwardRef((t,e)=>m.createElement(Me,iA(sA({ref:e},t),{weights:eA})));Nf.displayName="DotsThreeOutlineVertical";const lA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,44H32A12,12,0,0,0,20,56V192a20,20,0,0,0,20,20H216a20,20,0,0,0,20-20V56A12,12,0,0,0,224,44Zm-96,83.72L62.85,68h130.3ZM92.79,128,44,172.72V83.28Zm17.76,16.28,9.34,8.57a12,12,0,0,0,16.22,0l9.34-8.57L193.15,188H62.85ZM163.21,128,212,83.28v89.44Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,56l-96,88L32,56Z",opacity:"0.2"}),m.createElement("path",{d:"M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48Zm-96,85.15L52.57,64H203.43ZM98.71,128,40,181.81V74.19Zm11.84,10.85,12,11.05a8,8,0,0,0,10.82,0l12-11.05,58,53.15H52.57ZM157.29,128,216,74.18V181.82Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM98.71,128,40,181.81V74.19Zm11.84,10.85,12,11.05a8,8,0,0,0,10.82,0l12-11.05,58,53.15H52.57ZM157.29,128,216,74.18V181.82Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,50H32a6,6,0,0,0-6,6V192a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A6,6,0,0,0,224,50Zm-96,85.86L47.42,62H208.58ZM101.67,128,38,186.36V69.64Zm8.88,8.14L124,148.42a6,6,0,0,0,8.1,0l13.4-12.28L208.58,194H47.43ZM154.33,128,218,69.64V186.36Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48Zm-96,85.15L52.57,64H203.43ZM98.71,128,40,181.81V74.19Zm11.84,10.85,12,11.05a8,8,0,0,0,10.82,0l12-11.05,58,53.15H52.57ZM157.29,128,216,74.18V181.82Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,52H32a4,4,0,0,0-4,4V192a12,12,0,0,0,12,12H216a12,12,0,0,0,12-12V56A4,4,0,0,0,224,52Zm-96,86.57L42.28,60H213.72ZM104.63,128,36,190.91V65.09Zm5.92,5.43L125.3,147a4,4,0,0,0,5.4,0l14.75-13.52L213.72,196H42.28ZM151.37,128,220,65.09V190.91Z"}))]]);var uA=Object.defineProperty,cA=Object.defineProperties,dA=Object.getOwnPropertyDescriptors,wf=Object.getOwnPropertySymbols,pA=Object.prototype.hasOwnProperty,fA=Object.prototype.propertyIsEnumerable,xf=(t,e,n)=>e in t?uA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,mA=(t,e)=>{for(var n in e||(e={}))pA.call(e,n)&&xf(t,n,e[n]);if(wf)for(var n of wf(e))fA.call(e,n)&&xf(t,n,e[n]);return t},gA=(t,e)=>cA(t,dA(e));const Rf=U.forwardRef((t,e)=>m.createElement(Me,gA(mA({ref:e},t),{weights:lA})));Rf.displayName="Envelope";const hA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M204.73,51.85A108.07,108.07,0,0,0,20,128v56a28,28,0,0,0,28,28H64a28,28,0,0,0,28-28V144a28,28,0,0,0-28-28H44.84A84.05,84.05,0,0,1,128,44h.64a83.7,83.7,0,0,1,82.52,72H192a28,28,0,0,0-28,28v40a28,28,0,0,0,28,28h19.6A20,20,0,0,1,192,228H136a12,12,0,0,0,0,24h56a44.05,44.05,0,0,0,44-44V128A107.34,107.34,0,0,0,204.73,51.85ZM64,140a4,4,0,0,1,4,4v40a4,4,0,0,1-4,4H48a4,4,0,0,1-4-4V140Zm124,44V144a4,4,0,0,1,4-4h20v48H192A4,4,0,0,1,188,184Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M80,144v40a16,16,0,0,1-16,16H48a16,16,0,0,1-16-16V128H64A16,16,0,0,1,80,144Zm112-16a16,16,0,0,0-16,16v40a16,16,0,0,0,16,16h32V128Z",opacity:"0.2"}),m.createElement("path",{d:"M201.89,54.66A104.08,104.08,0,0,0,24,128v56a24,24,0,0,0,24,24H64a24,24,0,0,0,24-24V144a24,24,0,0,0-24-24H40.36A88.12,88.12,0,0,1,190.54,65.93,87.39,87.39,0,0,1,215.65,120H192a24,24,0,0,0-24,24v40a24,24,0,0,0,24,24h24a24,24,0,0,1-24,24H136a8,8,0,0,0,0,16h56a40,40,0,0,0,40-40V128A103.41,103.41,0,0,0,201.89,54.66ZM64,136a8,8,0,0,1,8,8v40a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V136Zm128,56a8,8,0,0,1-8-8V144a8,8,0,0,1,8-8h24v56Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M232,128v80a40,40,0,0,1-40,40H136a8,8,0,0,1,0-16h56a24,24,0,0,0,24-24H192a24,24,0,0,1-24-24V144a24,24,0,0,1,24-24h23.65A88,88,0,0,0,66,65.54,87.29,87.29,0,0,0,40.36,120H64a24,24,0,0,1,24,24v40a24,24,0,0,1-24,24H48a24,24,0,0,1-24-24V128A104.11,104.11,0,0,1,201.89,54.66,103.41,103.41,0,0,1,232,128Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M200.47,56.07A101.37,101.37,0,0,0,128.77,26H128A102,102,0,0,0,26,128v56a22,22,0,0,0,22,22H64a22,22,0,0,0,22-22V144a22,22,0,0,0-22-22H38.2A90,90,0,0,1,128,38h.68a89.71,89.71,0,0,1,89.13,84H192a22,22,0,0,0-22,22v40a22,22,0,0,0,22,22h26v2a26,26,0,0,1-26,26H136a6,6,0,0,0,0,12h56a38,38,0,0,0,38-38V128A101.44,101.44,0,0,0,200.47,56.07ZM64,134a10,10,0,0,1,10,10v40a10,10,0,0,1-10,10H48a10,10,0,0,1-10-10V134Zm118,50V144a10,10,0,0,1,10-10h26v60H192A10,10,0,0,1,182,184Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M201.89,54.66A103.43,103.43,0,0,0,128.79,24H128A104,104,0,0,0,24,128v56a24,24,0,0,0,24,24H64a24,24,0,0,0,24-24V144a24,24,0,0,0-24-24H40.36A88.12,88.12,0,0,1,190.54,65.93,87.39,87.39,0,0,1,215.65,120H192a24,24,0,0,0-24,24v40a24,24,0,0,0,24,24h24a24,24,0,0,1-24,24H136a8,8,0,0,0,0,16h56a40,40,0,0,0,40-40V128A103.41,103.41,0,0,0,201.89,54.66ZM64,136a8,8,0,0,1,8,8v40a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V136Zm128,56a8,8,0,0,1-8-8V144a8,8,0,0,1,8-8h24v56Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M199.05,57.48A100.07,100.07,0,0,0,28,128v56a20,20,0,0,0,20,20H64a20,20,0,0,0,20-20V144a20,20,0,0,0-20-20H36.08A92,92,0,0,1,128,36h.7a91.75,91.75,0,0,1,91.22,88H192a20,20,0,0,0-20,20v40a20,20,0,0,0,20,20h28v4a28,28,0,0,1-28,28H136a4,4,0,0,0,0,8h56a36,36,0,0,0,36-36V128A99.44,99.44,0,0,0,199.05,57.48ZM64,132a12,12,0,0,1,12,12v40a12,12,0,0,1-12,12H48a12,12,0,0,1-12-12V132Zm116,52V144a12,12,0,0,1,12-12h28v64H192A12,12,0,0,1,180,184Z"}))]]);var EA=Object.defineProperty,bA=Object.defineProperties,AA=Object.getOwnPropertyDescriptors,Lf=Object.getOwnPropertySymbols,_A=Object.prototype.hasOwnProperty,vA=Object.prototype.propertyIsEnumerable,Of=(t,e,n)=>e in t?EA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,yA=(t,e)=>{for(var n in e||(e={}))_A.call(e,n)&&Of(t,n,e[n]);if(Lf)for(var n of Lf(e))vA.call(e,n)&&Of(t,n,e[n]);return t},DA=(t,e)=>bA(t,AA(e));const kf=U.forwardRef((t,e)=>m.createElement(Me,DA(yA({ref:e},t),{weights:hA})));kf.displayName="Headset";const CA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M252,152a12,12,0,0,1-12,12H228v12a12,12,0,0,1-24,0V164H192a12,12,0,0,1,0-24h12V128a12,12,0,0,1,24,0v12h12A12,12,0,0,1,252,152ZM56,76H68V88a12,12,0,0,0,24,0V76h12a12,12,0,1,0,0-24H92V40a12,12,0,0,0-24,0V52H56a12,12,0,0,0,0,24ZM184,188h-4v-4a12,12,0,0,0-24,0v4h-4a12,12,0,0,0,0,24h4v4a12,12,0,0,0,24,0v-4h4a12,12,0,0,0,0-24ZM222.14,82.83,82.82,222.14a20,20,0,0,1-28.28,0L33.85,201.46a20,20,0,0,1,0-28.29L173.17,33.86a20,20,0,0,1,28.28,0l20.69,20.68A20,20,0,0,1,222.14,82.83ZM159,112,144,97,53.65,187.31l15,15Zm43.31-43.31-15-15L161,80l15,15Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M176,112,74.34,213.66a8,8,0,0,1-11.31,0L42.34,193a8,8,0,0,1,0-11.31L144,80Z",opacity:"0.2"}),m.createElement("path",{d:"M248,152a8,8,0,0,1-8,8H224v16a8,8,0,0,1-16,0V160H192a8,8,0,0,1,0-16h16V128a8,8,0,0,1,16,0v16h16A8,8,0,0,1,248,152ZM56,72H72V88a8,8,0,0,0,16,0V72h16a8,8,0,0,0,0-16H88V40a8,8,0,0,0-16,0V56H56a8,8,0,0,0,0,16ZM184,192h-8v-8a8,8,0,0,0-16,0v8h-8a8,8,0,0,0,0,16h8v8a8,8,0,0,0,16,0v-8h8a8,8,0,0,0,0-16ZM219.31,80,80,219.31a16,16,0,0,1-22.62,0L36.68,198.63a16,16,0,0,1,0-22.63L176,36.69a16,16,0,0,1,22.63,0l20.68,20.68A16,16,0,0,1,219.31,80Zm-54.63,32L144,91.31l-96,96L68.68,208ZM208,68.69,187.31,48l-32,32L176,100.69Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M248,152a8,8,0,0,1-8,8H224v16a8,8,0,0,1-16,0V160H192a8,8,0,0,1,0-16h16V128a8,8,0,0,1,16,0v16h16A8,8,0,0,1,248,152ZM56,72H72V88a8,8,0,0,0,16,0V72h16a8,8,0,0,0,0-16H88V40a8,8,0,0,0-16,0V56H56a8,8,0,0,0,0,16ZM184,192h-8v-8a8,8,0,0,0-16,0v8h-8a8,8,0,0,0,0,16h8v8a8,8,0,0,0,16,0v-8h8a8,8,0,0,0,0-16ZM219.31,80,80,219.31a16,16,0,0,1-22.62,0L36.68,198.63a16,16,0,0,1,0-22.63L176,36.69a16,16,0,0,1,22.63,0l20.68,20.68A16,16,0,0,1,219.31,80ZM208,68.69,187.31,48l-32,32L176,100.69Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M246,152a6,6,0,0,1-6,6H222v18a6,6,0,0,1-12,0V158H192a6,6,0,0,1,0-12h18V128a6,6,0,0,1,12,0v18h18A6,6,0,0,1,246,152ZM56,70H74V88a6,6,0,0,0,12,0V70h18a6,6,0,0,0,0-12H86V40a6,6,0,0,0-12,0V58H56a6,6,0,0,0,0,12ZM184,194H174V184a6,6,0,0,0-12,0v10H152a6,6,0,0,0,0,12h10v10a6,6,0,0,0,12,0V206h10a6,6,0,0,0,0-12ZM217.9,78.59,78.58,217.9a14,14,0,0,1-19.8,0L38.09,197.21a14,14,0,0,1,0-19.8L177.41,38.1a14,14,0,0,1,19.8,0L217.9,58.79A14,14,0,0,1,217.9,78.59ZM167.51,112,144,88.49,46.58,185.9a2,2,0,0,0,0,2.83l20.69,20.68a2,2,0,0,0,2.82,0h0Zm41.9-44.73L188.73,46.59a2,2,0,0,0-2.83,0L152.48,80,176,103.52,209.41,70.1A2,2,0,0,0,209.41,67.27Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M48,64a8,8,0,0,1,8-8H72V40a8,8,0,0,1,16,0V56h16a8,8,0,0,1,0,16H88V88a8,8,0,0,1-16,0V72H56A8,8,0,0,1,48,64ZM184,192h-8v-8a8,8,0,0,0-16,0v8h-8a8,8,0,0,0,0,16h8v8a8,8,0,0,0,16,0v-8h8a8,8,0,0,0,0-16Zm56-48H224V128a8,8,0,0,0-16,0v16H192a8,8,0,0,0,0,16h16v16a8,8,0,0,0,16,0V160h16a8,8,0,0,0,0-16ZM219.31,80,80,219.31a16,16,0,0,1-22.62,0L36.68,198.63a16,16,0,0,1,0-22.63L176,36.69a16,16,0,0,1,22.63,0l20.68,20.68A16,16,0,0,1,219.31,80Zm-54.63,32L144,91.31l-96,96L68.68,208ZM208,68.69,187.31,48l-32,32L176,100.69Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M244,152a4,4,0,0,1-4,4H220v20a4,4,0,0,1-8,0V156H192a4,4,0,0,1,0-8h20V128a4,4,0,0,1,8,0v20h20A4,4,0,0,1,244,152ZM56,68H76V88a4,4,0,0,0,8,0V68h20a4,4,0,0,0,0-8H84V40a4,4,0,0,0-8,0V60H56a4,4,0,0,0,0,8ZM184,196H172V184a4,4,0,0,0-8,0v12H152a4,4,0,0,0,0,8h12v12a4,4,0,0,0,8,0V204h12a4,4,0,0,0,0-8ZM216.48,77.17,77.17,216.49a12,12,0,0,1-17,0L39.51,195.8a12,12,0,0,1,0-17L178.83,39.51a12,12,0,0,1,17,0L216.48,60.2A12,12,0,0,1,216.48,77.17ZM170.34,112,144,85.66,45.17,184.49a4,4,0,0,0,0,5.65l20.68,20.69a4,4,0,0,0,5.66,0Zm40.49-46.14L190.14,45.17a4,4,0,0,0-5.66,0L149.65,80,176,106.34l34.83-34.83A4,4,0,0,0,210.83,65.86Z"}))]]);var SA=Object.defineProperty,TA=Object.defineProperties,NA=Object.getOwnPropertyDescriptors,If=Object.getOwnPropertySymbols,wA=Object.prototype.hasOwnProperty,xA=Object.prototype.propertyIsEnumerable,Mf=(t,e,n)=>e in t?SA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,RA=(t,e)=>{for(var n in e||(e={}))wA.call(e,n)&&Mf(t,n,e[n]);if(If)for(var n of If(e))xA.call(e,n)&&Mf(t,n,e[n]);return t},LA=(t,e)=>TA(t,NA(e));const Ff=U.forwardRef((t,e)=>m.createElement(Me,LA(RA({ref:e},t),{weights:CA})));Ff.displayName="MagicWand";const OA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M232.49,215.51,185,168a92.12,92.12,0,1,0-17,17l47.53,47.54a12,12,0,0,0,17-17ZM44,112a68,68,0,1,1,68,68A68.07,68.07,0,0,1,44,112Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M192,112a80,80,0,1,1-80-80A80,80,0,0,1,192,112Z",opacity:"0.2"}),m.createElement("path",{d:"M229.66,218.34,179.6,168.28a88.21,88.21,0,1,0-11.32,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M168,112a56,56,0,1,1-56-56A56,56,0,0,1,168,112Zm61.66,117.66a8,8,0,0,1-11.32,0l-50.06-50.07a88,88,0,1,1,11.32-11.31l50.06,50.06A8,8,0,0,1,229.66,229.66ZM112,184a72,72,0,1,0-72-72A72.08,72.08,0,0,0,112,184Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M228.24,219.76l-51.38-51.38a86.15,86.15,0,1,0-8.48,8.48l51.38,51.38a6,6,0,0,0,8.48-8.48ZM38,112a74,74,0,1,1,74,74A74.09,74.09,0,0,1,38,112Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M226.83,221.17l-52.7-52.7a84.1,84.1,0,1,0-5.66,5.66l52.7,52.7a4,4,0,0,0,5.66-5.66ZM36,112a76,76,0,1,1,76,76A76.08,76.08,0,0,1,36,112Z"}))]]);var kA=Object.defineProperty,IA=Object.defineProperties,MA=Object.getOwnPropertyDescriptors,Bf=Object.getOwnPropertySymbols,FA=Object.prototype.hasOwnProperty,BA=Object.prototype.propertyIsEnumerable,Pf=(t,e,n)=>e in t?kA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,PA=(t,e)=>{for(var n in e||(e={}))FA.call(e,n)&&Pf(t,n,e[n]);if(Bf)for(var n of Bf(e))BA.call(e,n)&&Pf(t,n,e[n]);return t},UA=(t,e)=>IA(t,MA(e));const Uf=U.forwardRef((t,e)=>m.createElement(Me,UA(PA({ref:e},t),{weights:OA})));Uf.displayName="MagnifyingGlass";const qA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M225.86,110.48,57.8,14.58A20,20,0,0,0,29.16,38.67l30.61,89.21L29.16,217.33A20,20,0,0,0,48,244a20.1,20.1,0,0,0,9.81-2.58l.09-.06,168-96.07a20,20,0,0,0,0-34.81ZM55.24,215.23,81,140h55a12,12,0,0,0,0-24H81.07L55.25,40.76l152.69,87.13Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M219.91,134.86,51.93,231a8,8,0,0,1-11.44-9.67l31-90.71a7.89,7.89,0,0,0,0-5.38l-31-90.47a8,8,0,0,1,11.44-9.67l168,95.85A8,8,0,0,1,219.91,134.86Z",opacity:"0.2"}),m.createElement("path",{d:"M223.87,114l-168-95.89A16,16,0,0,0,32.93,37.32l31,90.47a.42.42,0,0,0,0,.1.3.3,0,0,0,0,.1l-31,90.67A16,16,0,0,0,48,240a16.14,16.14,0,0,0,7.92-2.1l167.91-96.05a16,16,0,0,0,.05-27.89ZM48,224l0-.09L78.14,136H136a8,8,0,0,0,0-16H78.22L48.06,32.12,48,32l168,95.83Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M232,127.89a16,16,0,0,1-8.18,14L55.91,237.9A16.14,16.14,0,0,1,48,240a16,16,0,0,1-15.05-21.34L60.3,138.71A4,4,0,0,1,64.09,136H136a8,8,0,0,0,8-8.53,8.19,8.19,0,0,0-8.26-7.47H64.16a4,4,0,0,1-3.79-2.7l-27.44-80A16,16,0,0,1,55.85,18.07l168,95.89A16,16,0,0,1,232,127.89Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M222.88,115.69l-168-95.88a14,14,0,0,0-20,16.85l31,90.48,0,.07a2.11,2.11,0,0,1,0,1.42l-31,90.64A14,14,0,0,0,48,238a14.11,14.11,0,0,0,6.92-1.83L222.84,140.1a14,14,0,0,0,0-24.41Zm-5.95,14L49,225.73a1.87,1.87,0,0,1-2.27-.22,1.92,1.92,0,0,1-.56-2.28L76.7,134H136a6,6,0,0,0,0-12H76.78L46.14,32.7A2,2,0,0,1,49,30.25l168,95.89a1.93,1.93,0,0,1,1,1.74A2,2,0,0,1,216.93,129.66Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M223.87,114l-168-95.89A16,16,0,0,0,32.93,37.32l31,90.47a.42.42,0,0,0,0,.1.3.3,0,0,0,0,.1l-31,90.67A16,16,0,0,0,48,240a16.14,16.14,0,0,0,7.92-2.1l167.91-96.05a16,16,0,0,0,.05-27.89ZM48,224l0-.09L78.14,136H136a8,8,0,0,0,0-16H78.22L48.06,32.12,48,32l168,95.83Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M221.89,117.43l-168-95.88A12,12,0,0,0,36.7,36l31.05,90.48v.05a4.09,4.09,0,0,1,0,2.74L36.72,220A12,12,0,0,0,48,236a12.13,12.13,0,0,0,5.93-1.57l167.94-96.08a12,12,0,0,0,0-20.92Zm-4,14L50,227.47a4,4,0,0,1-5.7-4.88l31-90.59H136a4,4,0,0,0,0-8H75.35a.65.65,0,0,1,0-.13L44.25,33.37A4,4,0,0,1,50,28.52l168,95.87a4,4,0,0,1,0,7Z"}))]]);var HA=Object.defineProperty,VA=Object.defineProperties,$A=Object.getOwnPropertyDescriptors,qf=Object.getOwnPropertySymbols,zA=Object.prototype.hasOwnProperty,GA=Object.prototype.propertyIsEnumerable,Hf=(t,e,n)=>e in t?HA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,ZA=(t,e)=>{for(var n in e||(e={}))zA.call(e,n)&&Hf(t,n,e[n]);if(qf)for(var n of qf(e))GA.call(e,n)&&Hf(t,n,e[n]);return t},jA=(t,e)=>VA(t,$A(e));const Vf=U.forwardRef((t,e)=>m.createElement(Me,jA(ZA({ref:e},t),{weights:qA})));Vf.displayName="PaperPlaneRight";const WA=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M228,128a12,12,0,0,1-12,12H140v76a12,12,0,0,1-24,0V140H40a12,12,0,0,1,0-24h76V40a12,12,0,0,1,24,0v76h76A12,12,0,0,1,228,128Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,48V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208A8,8,0,0,1,216,48Z",opacity:"0.2"}),m.createElement("path",{d:"M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM184,136H136v48a8,8,0,0,1-16,0V136H72a8,8,0,0,1,0-16h48V72a8,8,0,0,1,16,0v48h48a8,8,0,0,1,0,16Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M222,128a6,6,0,0,1-6,6H134v82a6,6,0,0,1-12,0V134H40a6,6,0,0,1,0-12h82V40a6,6,0,0,1,12,0v82h82A6,6,0,0,1,222,128Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M220,128a4,4,0,0,1-4,4H132v84a4,4,0,0,1-8,0V132H40a4,4,0,0,1,0-8h84V40a4,4,0,0,1,8,0v84h84A4,4,0,0,1,220,128Z"}))]]);var KA=Object.defineProperty,YA=Object.defineProperties,XA=Object.getOwnPropertyDescriptors,$f=Object.getOwnPropertySymbols,QA=Object.prototype.hasOwnProperty,JA=Object.prototype.propertyIsEnumerable,zf=(t,e,n)=>e in t?KA(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,e_=(t,e)=>{for(var n in e||(e={}))QA.call(e,n)&&zf(t,n,e[n]);if($f)for(var n of $f(e))JA.call(e,n)&&zf(t,n,e[n]);return t},t_=(t,e)=>YA(t,XA(e));const Gf=U.forwardRef((t,e)=>m.createElement(Me,t_(e_({ref:e},t),{weights:WA})));Gf.displayName="Plus";const n_=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M240.26,186.1,152.81,34.23h0a28.74,28.74,0,0,0-49.62,0L15.74,186.1a27.45,27.45,0,0,0,0,27.71A28.31,28.31,0,0,0,40.55,228h174.9a28.31,28.31,0,0,0,24.79-14.19A27.45,27.45,0,0,0,240.26,186.1Zm-20.8,15.7a4.46,4.46,0,0,1-4,2.2H40.55a4.46,4.46,0,0,1-4-2.2,3.56,3.56,0,0,1,0-3.73L124,46.2a4.77,4.77,0,0,1,8,0l87.44,151.87A3.56,3.56,0,0,1,219.46,201.8ZM116,136V104a12,12,0,0,1,24,0v32a12,12,0,0,1-24,0Zm28,40a16,16,0,1,1-16-16A16,16,0,0,1,144,176Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M215.46,216H40.54C27.92,216,20,202.79,26.13,192.09L113.59,40.22c6.3-11,22.52-11,28.82,0l87.46,151.87C236,202.79,228.08,216,215.46,216Z",opacity:"0.2"}),m.createElement("path",{d:"M236.8,188.09,149.35,36.22h0a24.76,24.76,0,0,0-42.7,0L19.2,188.09a23.51,23.51,0,0,0,0,23.72A24.35,24.35,0,0,0,40.55,224h174.9a24.35,24.35,0,0,0,21.33-12.19A23.51,23.51,0,0,0,236.8,188.09ZM222.93,203.8a8.5,8.5,0,0,1-7.48,4.2H40.55a8.5,8.5,0,0,1-7.48-4.2,7.59,7.59,0,0,1,0-7.72L120.52,44.21a8.75,8.75,0,0,1,15,0l87.45,151.87A7.59,7.59,0,0,1,222.93,203.8ZM120,144V104a8,8,0,0,1,16,0v40a8,8,0,0,1-16,0Zm20,36a12,12,0,1,1-12-12A12,12,0,0,1,140,180Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M236.8,188.09,149.35,36.22h0a24.76,24.76,0,0,0-42.7,0L19.2,188.09a23.51,23.51,0,0,0,0,23.72A24.35,24.35,0,0,0,40.55,224h174.9a24.35,24.35,0,0,0,21.33-12.19A23.51,23.51,0,0,0,236.8,188.09ZM120,104a8,8,0,0,1,16,0v40a8,8,0,0,1-16,0Zm8,88a12,12,0,1,1,12-12A12,12,0,0,1,128,192Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M235.07,189.09,147.61,37.22h0a22.75,22.75,0,0,0-39.22,0L20.93,189.09a21.53,21.53,0,0,0,0,21.72A22.35,22.35,0,0,0,40.55,222h174.9a22.35,22.35,0,0,0,19.6-11.19A21.53,21.53,0,0,0,235.07,189.09ZM224.66,204.8a10.46,10.46,0,0,1-9.21,5.2H40.55a10.46,10.46,0,0,1-9.21-5.2,9.51,9.51,0,0,1,0-9.72L118.79,43.21a10.75,10.75,0,0,1,18.42,0l87.46,151.87A9.51,9.51,0,0,1,224.66,204.8ZM122,144V104a6,6,0,0,1,12,0v40a6,6,0,0,1-12,0Zm16,36a10,10,0,1,1-10-10A10,10,0,0,1,138,180Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M236.8,188.09,149.35,36.22h0a24.76,24.76,0,0,0-42.7,0L19.2,188.09a23.51,23.51,0,0,0,0,23.72A24.35,24.35,0,0,0,40.55,224h174.9a24.35,24.35,0,0,0,21.33-12.19A23.51,23.51,0,0,0,236.8,188.09ZM222.93,203.8a8.5,8.5,0,0,1-7.48,4.2H40.55a8.5,8.5,0,0,1-7.48-4.2,7.59,7.59,0,0,1,0-7.72L120.52,44.21a8.75,8.75,0,0,1,15,0l87.45,151.87A7.59,7.59,0,0,1,222.93,203.8ZM120,144V104a8,8,0,0,1,16,0v40a8,8,0,0,1-16,0Zm20,36a12,12,0,1,1-12-12A12,12,0,0,1,140,180Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M233.34,190.09,145.88,38.22h0a20.75,20.75,0,0,0-35.76,0L22.66,190.09a19.52,19.52,0,0,0,0,19.71A20.36,20.36,0,0,0,40.54,220H215.46a20.36,20.36,0,0,0,17.86-10.2A19.52,19.52,0,0,0,233.34,190.09ZM226.4,205.8a12.47,12.47,0,0,1-10.94,6.2H40.54a12.47,12.47,0,0,1-10.94-6.2,11.45,11.45,0,0,1,0-11.72L117.05,42.21a12.76,12.76,0,0,1,21.9,0L226.4,194.08A11.45,11.45,0,0,1,226.4,205.8ZM124,144V104a4,4,0,0,1,8,0v40a4,4,0,0,1-8,0Zm12,36a8,8,0,1,1-8-8A8,8,0,0,1,136,180Z"}))]]);var r_=Object.defineProperty,o_=Object.defineProperties,a_=Object.getOwnPropertyDescriptors,Zf=Object.getOwnPropertySymbols,s_=Object.prototype.hasOwnProperty,i_=Object.prototype.propertyIsEnumerable,jf=(t,e,n)=>e in t?r_(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,l_=(t,e)=>{for(var n in e||(e={}))s_.call(e,n)&&jf(t,n,e[n]);if(Zf)for(var n of Zf(e))i_.call(e,n)&&jf(t,n,e[n]);return t},u_=(t,e)=>o_(t,a_(e));const yu=U.forwardRef((t,e)=>m.createElement(Me,u_(l_({ref:e},t),{weights:n_})));yu.displayName="Warning";const c_=new Map([["bold",m.createElement(m.Fragment,null,m.createElement("path",{d:"M208.49,191.51a12,12,0,0,1-17,17L128,145,64.49,208.49a12,12,0,0,1-17-17L111,128,47.51,64.49a12,12,0,0,1,17-17L128,111l63.51-63.52a12,12,0,0,1,17,17L145,128Z"}))],["duotone",m.createElement(m.Fragment,null,m.createElement("path",{d:"M216,48V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208A8,8,0,0,1,216,48Z",opacity:"0.2"}),m.createElement("path",{d:"M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"}))],["fill",m.createElement(m.Fragment,null,m.createElement("path",{d:"M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM181.66,170.34a8,8,0,0,1-11.32,11.32L128,139.31,85.66,181.66a8,8,0,0,1-11.32-11.32L116.69,128,74.34,85.66A8,8,0,0,1,85.66,74.34L128,116.69l42.34-42.35a8,8,0,0,1,11.32,11.32L139.31,128Z"}))],["light",m.createElement(m.Fragment,null,m.createElement("path",{d:"M204.24,195.76a6,6,0,1,1-8.48,8.48L128,136.49,60.24,204.24a6,6,0,0,1-8.48-8.48L119.51,128,51.76,60.24a6,6,0,0,1,8.48-8.48L128,119.51l67.76-67.75a6,6,0,0,1,8.48,8.48L136.49,128Z"}))],["regular",m.createElement(m.Fragment,null,m.createElement("path",{d:"M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"}))],["thin",m.createElement(m.Fragment,null,m.createElement("path",{d:"M202.83,197.17a4,4,0,0,1-5.66,5.66L128,133.66,58.83,202.83a4,4,0,0,1-5.66-5.66L122.34,128,53.17,58.83a4,4,0,0,1,5.66-5.66L128,122.34l69.17-69.17a4,4,0,1,1,5.66,5.66L133.66,128Z"}))]]);var d_=Object.defineProperty,p_=Object.defineProperties,f_=Object.getOwnPropertyDescriptors,Wf=Object.getOwnPropertySymbols,m_=Object.prototype.hasOwnProperty,g_=Object.prototype.propertyIsEnumerable,Kf=(t,e,n)=>e in t?d_(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,h_=(t,e)=>{for(var n in e||(e={}))m_.call(e,n)&&Kf(t,n,e[n]);if(Wf)for(var n of Wf(e))g_.call(e,n)&&Kf(t,n,e[n]);return t},E_=(t,e)=>p_(t,f_(e));const Yf=U.forwardRef((t,e)=>m.createElement(Me,E_(h_({ref:e},t),{weights:c_})));Yf.displayName="X";const Du={plus:Gf,chatBubble:hf,support:kf,search2:df,search:Uf,magic:Ff};function b_({settings:t,isOpen:e,toggleOpen:n}){if(e)return null;const r=Du.hasOwnProperty(t==null?void 0:t.chatIcon)?Du[t.chatIcon]:Du.plus;return w.jsx("button",{style:{backgroundColor:t.buttonColor},id:"anything-llm-embed-chat-button",onClick:n,className:"hover:allm-cursor-pointer allm-border-none allm-flex allm-items-center allm-justify-center allm-p-4 allm-rounded-full allm-text-white allm-text-2xl hover:allm-opacity-95","aria-label":"Toggle Menu",children:w.jsx(r,{className:"text-white"})})}const qo="data:image/svg+xml,%3csvg%20width='49'%20height='49'%20viewBox='0%200%2049%2049'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3crect%20x='0.898438'%20y='0.5'%20width='48'%20height='48'%20rx='24'%20fill='%23222628'%20fill-opacity='0.8'/%3e%3cpath%20fill-rule='evenodd'%20clip-rule='evenodd'%20d='M12.0173%2014.2937C10.4387%2014.2937%209.14844%2015.584%209.14844%2017.1626V31.8372C9.14844%2033.4156%2010.4365%2034.7061%2012.0173%2034.7061H17.5428C18.4316%2034.7061%2019.2557%2034.3035%2019.8034%2033.6063L19.8041%2033.6054L32.4126%2017.4869H37.4552V31.509H32.4204L29.8951%2027.9721L29.8867%2027.9615C29.4483%2027.4042%2028.602%2027.4042%2028.1635%2027.9615L27.52%2028.7815L27.5178%2028.7843C27.2188%2029.1751%2027.2113%2029.7217%2027.512%2030.1178L29.985%2033.5936L29.9935%2033.6044C30.5415%2034.302%2031.3696%2034.7042%2032.2541%2034.7042H37.7795C39.3643%2034.7042%2040.6484%2033.4175%2040.6484%2031.8353V17.1626C40.6484%2015.5827%2039.3646%2014.2937%2037.7795%2014.2937H32.2541C31.3673%2014.2937%2030.5407%2014.6964%2029.9928%2015.3964L17.3858%2031.511H12.3417V17.4889H17.3757L20.133%2021.2573L20.1386%2021.2645C20.5782%2021.8273%2021.4253%2021.8239%2021.8647%2021.2666L21.8661%2021.2648L22.505%2020.4477L22.5069%2020.4453C22.8064%2020.0538%2022.8139%2019.5046%2022.5076%2019.1075L19.8102%2015.4041L19.804%2015.3963C19.2562%2014.6965%2018.4318%2014.2937%2017.5428%2014.2937H12.0173Z'%20fill='white'/%3e%3cpath%20d='M19.8034%2033.6063L20.0392%2033.7915L20.0394%2033.7912L19.8034%2033.6063ZM19.8041%2033.6054L20.0401%2033.7903L20.0403%2033.7901L19.8041%2033.6054ZM32.4126%2017.4869V17.1871H32.2665L32.1764%2017.3022L32.4126%2017.4869ZM37.4552%2017.4869H37.755V17.1871H37.4552V17.4869ZM37.4552%2031.509V31.8089H37.755V31.509H37.4552ZM32.4204%2031.509L32.1763%2031.6833L32.266%2031.8089H32.4204V31.509ZM29.8951%2027.9721L30.1394%2027.7977L30.1307%2027.7867L29.8951%2027.9721ZM29.8867%2027.9615L29.6511%2028.1469L29.6511%2028.1469L29.8867%2027.9615ZM28.1635%2027.9615L27.9279%2027.7761L27.9277%2027.7764L28.1635%2027.9615ZM27.52%2028.7815L27.2841%2028.5964L27.2819%2028.5993L27.52%2028.7815ZM27.5178%2028.7843L27.7559%2028.9665L27.7559%2028.9665L27.5178%2028.7843ZM27.512%2030.1178L27.7564%2029.9439L27.7508%2029.9365L27.512%2030.1178ZM29.985%2033.5936L29.7407%2033.7674L29.7448%2033.7732L29.7492%2033.7788L29.985%2033.5936ZM29.9935%2033.6044L30.2293%2033.4191L30.2293%2033.4191L29.9935%2033.6044ZM29.9928%2015.3964L29.7567%2015.2116L29.7566%2015.2116L29.9928%2015.3964ZM17.3858%2031.511V31.8108H17.5319L17.6219%2031.6957L17.3858%2031.511ZM12.3417%2031.511H12.0418V31.8108H12.3417V31.511ZM12.3417%2017.4889V17.189H12.0418V17.4889H12.3417ZM17.3757%2017.4889L17.6177%2017.3118L17.5278%2017.189H17.3757V17.4889ZM20.133%2021.2573L19.8909%2021.4345L19.8967%2021.4419L20.133%2021.2573ZM20.1386%2021.2645L19.9023%2021.4491V21.4491L20.1386%2021.2645ZM21.8647%2021.2666L22.1001%2021.4522L22.1005%2021.4517L21.8647%2021.2666ZM21.8661%2021.2648L22.1019%2021.45L22.1023%2021.4495L21.8661%2021.2648ZM22.505%2020.4477L22.7412%2020.6324L22.7431%2020.63L22.505%2020.4477ZM22.5069%2020.4453L22.7449%2020.6276L22.745%2020.6275L22.5069%2020.4453ZM22.5076%2019.1075L22.2651%2019.2841L22.2702%2019.2907L22.5076%2019.1075ZM19.8102%2015.4041L20.0527%2015.2275L20.0463%2015.2193L19.8102%2015.4041ZM19.804%2015.3963L19.5679%2015.5811L19.5679%2015.5811L19.804%2015.3963ZM9.44828%2017.1626C9.44828%2015.7496%2010.6043%2014.5935%2012.0173%2014.5935V13.9939C10.2731%2013.9939%208.8486%2015.4184%208.8486%2017.1626H9.44828ZM9.44828%2031.8372V17.1626H8.8486V31.8372H9.44828ZM12.0173%2034.4063C10.6022%2034.4063%209.44828%2033.2501%209.44828%2031.8372H8.8486C8.8486%2033.581%2010.2707%2035.006%2012.0173%2035.006V34.4063ZM17.5428%2034.4063H12.0173V35.006H17.5428V34.4063ZM19.5676%2033.4211C19.0766%2034.0462%2018.3393%2034.4063%2017.5428%2034.4063V35.006C18.524%2035.006%2019.4349%2034.5608%2020.0392%2033.7915L19.5676%2033.4211ZM19.5681%2033.4205L19.5674%2033.4214L20.0394%2033.7912L20.0401%2033.7903L19.5681%2033.4205ZM32.1764%2017.3022L19.5679%2033.4206L20.0403%2033.7901L32.6488%2017.6717L32.1764%2017.3022ZM37.4552%2017.1871H32.4126V17.7868H37.4552V17.1871ZM37.755%2031.509V17.4869H37.1553V31.509H37.755ZM32.4204%2031.8089H37.4552V31.2092H32.4204V31.8089ZM29.651%2028.1464L32.1763%2031.6833L32.6644%2031.3348L30.1391%2027.7979L29.651%2028.1464ZM29.6511%2028.1469L29.6594%2028.1575L30.1307%2027.7867L30.1224%2027.7761L29.6511%2028.1469ZM28.3992%2028.1469C28.7176%2027.7422%2029.3327%2027.7422%2029.6511%2028.1469L30.1224%2027.7761C29.5639%2027.0662%2028.4864%2027.0662%2027.9279%2027.7761L28.3992%2028.1469ZM27.7558%2028.9666L28.3994%2028.1466L27.9277%2027.7764L27.2841%2028.5964L27.7558%2028.9666ZM27.7559%2028.9665L27.7581%2028.9637L27.2819%2028.5993L27.2797%2028.6021L27.7559%2028.9665ZM27.7508%2029.9365C27.5333%2029.65%2027.5374%2029.2521%2027.7559%2028.9665L27.2797%2028.6021C26.9002%2029.098%2026.8893%2029.7935%2027.2732%2030.2991L27.7508%2029.9365ZM30.2293%2033.4197L27.7563%2029.944L27.2677%2030.2916L29.7407%2033.7674L30.2293%2033.4197ZM30.2293%2033.4191L30.2208%2033.4083L29.7492%2033.7788L29.7577%2033.7896L30.2293%2033.4191ZM32.2541%2034.4044C31.4617%2034.4044%2030.7205%2034.0445%2030.2293%2033.4191L29.7577%2033.7896C30.3625%2034.5595%2031.2775%2035.0041%2032.2541%2035.0041V34.4044ZM37.7795%2034.4044H32.2541V35.0041H37.7795V34.4044ZM40.3486%2031.8353C40.3486%2033.2521%2039.1985%2034.4044%2037.7795%2034.4044V35.0041C39.5301%2035.0041%2040.9483%2033.5829%2040.9483%2031.8353H40.3486ZM40.3486%2017.1626V31.8353H40.9483V17.1626H40.3486ZM37.7795%2014.5935C39.1987%2014.5935%2040.3486%2015.7479%2040.3486%2017.1626H40.9483C40.9483%2015.4174%2039.5305%2013.9939%2037.7795%2013.9939V14.5935ZM32.2541%2014.5935H37.7795V13.9939H32.2541V14.5935ZM30.2289%2015.5812C30.72%2014.9537%2031.4596%2014.5935%2032.2541%2014.5935V13.9939C31.2749%2013.9939%2030.3613%2014.4391%2029.7567%2015.2116L30.2289%2015.5812ZM17.6219%2031.6957L30.2289%2015.5811L29.7566%2015.2116L17.1496%2031.3262L17.6219%2031.6957ZM12.3417%2031.8108H17.3858V31.2111H12.3417V31.8108ZM12.0418%2017.4889V31.511H12.6415V17.4889H12.0418ZM17.3757%2017.189H12.3417V17.7887H17.3757V17.189ZM20.375%2021.0803L17.6177%2017.3118L17.1337%2017.6659L19.891%2021.4344L20.375%2021.0803ZM20.3749%2021.08L20.3693%2021.0728L19.8967%2021.4419L19.9023%2021.4491L20.3749%2021.08ZM21.6292%2021.0809C21.3091%2021.4869%2020.6937%2021.488%2020.3749%2021.08L19.9023%2021.4491C20.4627%2022.1665%2021.5415%2022.1608%2022.1001%2021.4522L21.6292%2021.0809ZM21.6302%2021.0796L21.6288%2021.0814L22.1005%2021.4517L22.1019%2021.45L21.6302%2021.0796ZM22.2688%2020.263L21.6299%2021.0801L22.1023%2021.4495L22.7412%2020.6324L22.2688%2020.263ZM22.2688%2020.263L22.2669%2020.2654L22.7431%2020.63L22.7449%2020.6276L22.2688%2020.263ZM22.2702%2019.2907C22.4916%2019.5777%2022.4877%2019.977%2022.2687%2020.2631L22.745%2020.6275C23.1252%2020.1307%2023.1363%2019.4315%2022.7449%2018.9243L22.2702%2019.2907ZM19.5678%2015.5807L22.2652%2019.284L22.7499%2018.931L20.0525%2015.2276L19.5678%2015.5807ZM19.5679%2015.5811L19.5741%2015.589L20.0463%2015.2193L20.0401%2015.2114L19.5679%2015.5811ZM17.5428%2014.5935C18.3394%2014.5935%2019.0768%2014.9537%2019.5679%2015.5811L20.0401%2015.2114C19.4357%2014.4393%2018.5243%2013.9939%2017.5428%2013.9939V14.5935ZM12.0173%2014.5935H17.5428V13.9939H12.0173V14.5935Z'%20fill='white'/%3e%3c/svg%3e";async function A_(t,e){const n=t.getReader();let r;for(;!(r=await n.read()).done;)e(r.value)}function __(t){let e,n,r,o=!1;return function(s){e===void 0?(e=s,n=0,r=-1):e=y_(e,s);const i=e.length;let l=0;for(;n<i;){o&&(e[n]===10&&(l=++n),o=!1);let u=-1;for(;n<i&&u===-1;++n)switch(e[n]){case 58:r===-1&&(r=n-l);break;case 13:o=!0;case 10:u=n;break}if(u===-1)break;t(e.subarray(l,u),r),l=n,r=-1}l===i?e=void 0:l!==0&&(e=e.subarray(l),n-=l)}}function v_(t,e,n){let r=Xf();const o=new TextDecoder;return function(s,i){if(s.length===0)n==null||n(r),r=Xf();else if(i>0){const l=o.decode(s.subarray(0,i)),u=i+(s[i+1]===32?2:1),c=o.decode(s.subarray(u));switch(l){case"data":r.data=r.data?r.data+`
`+c:c;break;case"event":r.event=c;break;case"id":t(r.id=c);break;case"retry":const p=parseInt(c,10);isNaN(p)||e(r.retry=p);break}}}}function y_(t,e){const n=new Uint8Array(t.length+e.length);return n.set(t),n.set(e,t.length),n}function Xf(){return{data:"",event:"",id:"",retry:void 0}}var D_=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]]);return n};const Cu="text/event-stream",C_=1e3,Qf="last-event-id";function S_(t,e){var{signal:n,headers:r,onopen:o,onmessage:a,onclose:s,onerror:i,openWhenHidden:l,fetch:u}=e,c=D_(e,["signal","headers","onopen","onmessage","onclose","onerror","openWhenHidden","fetch"]);return new Promise((p,d)=>{const f=Object.assign({},r);f.accept||(f.accept=Cu);let b;function A(){b.abort(),document.hidden||T()}l||document.addEventListener("visibilitychange",A);let y=C_,h=0;function g(){document.removeEventListener("visibilitychange",A),window.clearTimeout(h),b.abort()}n==null||n.addEventListener("abort",()=>{g(),p()});const E=u??window.fetch,_=o??T_;async function T(){var v;b=new AbortController;try{const N=await E(t,Object.assign(Object.assign({},c),{headers:f,signal:b.signal}));await _(N),await A_(N.body,__(v_(R=>{R?f[Qf]=R:delete f[Qf]},R=>{y=R},a))),s==null||s(),g(),p()}catch(N){if(!b.signal.aborted)try{const R=(v=i==null?void 0:i(N))!==null&&v!==void 0?v:y;window.clearTimeout(h),h=window.setTimeout(T,R)}catch(R){g(),d(R)}}}T()})}function T_(t){const e=t.headers.get("content-type");if(!(e!=null&&e.startsWith(Cu)))throw new Error(`Expected content-type to be ${Cu}, Actual: ${e}`)}let Su="";const Jf=100,N_=1e4;function w_(t){Su=t}const Cs={getHeaders:async function(){return new Promise((t,e)=>{let n=0;const r=N_/Jf,o=()=>{if(Su){const a={Authorization:`Bearer ${Su}`};console.log("Headers:",a.Authorization.split(".")[1]),t(a)}else n++,n<=r?setTimeout(o,Jf):e(new Error("JWT token not available after maximum wait time."))};o()})},embedSessionHistory:async function(t,e){const{embedId:n,baseApiUrl:r}=t;return await fetch(`${r}/${n}/${e}`,{headers:await this.getHeaders()}).then(o=>{if(o.ok)return o.json();throw new Error("Invalid response from server")}).then(o=>o.history.map(a=>({...a,id:Kn(),sender:a.role==="user"?"user":"system",textResponse:a.content,close:!1}))).catch(o=>(console.error(o),[]))},resetEmbedChatSession:async function(t,e){const{baseApiUrl:n,embedId:r}=t;return await fetch(`${n}/${r}/${e}`,{method:"DELETE",headers:await this.getHeaders()}).then(o=>o.ok).catch(()=>!1)},streamChat:async function(t,e,n,r){const{baseApiUrl:o,embedId:a,username:s}=e,i={prompt:(e==null?void 0:e.prompt)??null,model:(e==null?void 0:e.model)??null,temperature:(e==null?void 0:e.temperature)??null},l=new AbortController;await S_(`${o}/${a}/stream-chat`,{method:"POST",headers:await this.getHeaders(),body:JSON.stringify({message:n,sessionId:t,username:s,...i}),signal:l.signal,openWhenHidden:!0,async onopen(u){if(!u.ok)throw u.status>=400?(await u.json().then(c=>{r(c)}).catch(()=>{r({id:Kn(),type:"abort",textResponse:null,sources:[],close:!0,error:`An error occurred while streaming response. Code ${u.status}`})}),l.abort(),new Error):(r({id:Kn(),type:"abort",textResponse:null,sources:[],close:!0,error:"An error occurred while streaming response. Unknown Error."}),l.abort(),new Error("Unknown Error"))},async onmessage(u){try{const c=JSON.parse(u.data);r(c)}catch{}},onerror(u){throw r({id:Kn(),type:"abort",textResponse:null,sources:[],close:!0,error:`An error occurred while streaming response. ${u.message}`}),l.abort(),new Error}})}};function e2({sessionId:t,settings:e={},iconUrl:n=null,closeChat:r,setChatHistory:o}){const[a,s]=U.useState(!1),i=U.useRef(),l=U.useRef(),u=async()=>{await Cs.resetEmbedChatSession(e,t),o([]),s(!1)};return U.useEffect(()=>{function c(p){i.current&&!i.current.contains(p.target)&&l.current&&!l.current.contains(p.target)&&s(!1)}return document.addEventListener("mousedown",c),()=>{document.removeEventListener("mousedown",c)}},[i]),w.jsxs("div",{style:{borderBottom:"1px solid #E9E9E9"},className:"allm-flex allm-items-center allm-relative allm-rounded-t-2xl",id:"anything-llm-header",children:[w.jsx("div",{className:"allm-flex allm-justify-center allm-items-center allm-w-full allm-h-[76px]",children:w.jsx("img",{style:{maxWidth:48,maxHeight:48},src:n??qo,alt:n?"Brand":"AnythingLLM Logo"})}),w.jsxs("div",{className:"allm-absolute allm-right-0 allm-flex allm-gap-x-1 allm-items-center allm-px-[22px]",children:[e.loaded&&w.jsx("button",{ref:l,type:"button",onClick:()=>s(!a),className:"allm-bg-transparent hover:allm-cursor-pointer allm-border-none hover:allm-bg-gray-100 allm-rounded-sm allm-text-slate-800/60","aria-label":"Options",children:w.jsx(Nf,{size:20,weight:"fill"})}),w.jsx("button",{type:"button",onClick:r,className:"allm-bg-transparent hover:allm-cursor-pointer allm-border-none hover:allm-bg-gray-100 allm-rounded-sm allm-text-slate-800/60","aria-label":"Close",children:w.jsx(Yf,{size:20,weight:"bold"})})]}),w.jsx(x_,{settings:e,showing:a,resetChat:u,sessionId:t,menuRef:i})]})}function x_({settings:t,showing:e,resetChat:n,sessionId:r,menuRef:o}){return e?w.jsxs("div",{ref:o,className:"allm-bg-white allm-absolute allm-z-10 allm-flex allm-flex-col allm-gap-y-1 allm-rounded-xl allm-shadow-lg allm-top-[64px] allm-right-[46px]",children:[w.jsxs("button",{onClick:n,className:"hover:allm-cursor-pointer allm-bg-white allm-gap-x-[12px] hover:allm-bg-gray-100 allm-rounded-lg allm-border-none allm-flex allm-items-center allm-text-base allm-text-[#7A7D7E] allm-font-bold allm-px-4",children:[w.jsx(of,{size:24}),w.jsx("p",{className:"allm-text-[14px]",children:"Reset Chat"})]}),w.jsx(L_,{email:t.supportEmail}),w.jsx(R_,{sessionId:r})]}):null}function R_({sessionId:t}){if(!t)return null;const[e,n]=U.useState(!1),r=()=>{navigator.clipboard.writeText(t),n(!0),setTimeout(()=>n(!1),1e3)};return e?w.jsxs("div",{className:"hover:allm-cursor-pointer allm-bg-white allm-gap-x-[12px] hover:allm-bg-gray-100 allm-rounded-lg allm-border-none allm-flex allm-items-center allm-text-base allm-text-[#7A7D7E] allm-font-bold allm-px-4",children:[w.jsx(Af,{size:24}),w.jsx("p",{className:"allm-text-[14px] allm-font-sans",children:"Copied!"})]}):w.jsxs("button",{onClick:r,className:"hover:allm-cursor-pointer allm-bg-white allm-gap-x-[12px] hover:allm-bg-gray-100 allm-rounded-lg allm-border-none allm-flex allm-items-center allm-text-base allm-text-[#7A7D7E] allm-font-bold allm-px-4",children:[w.jsx(Cf,{size:24}),w.jsx("p",{className:"allm-text-[14px]",children:"Session ID"})]})}function L_({email:t=null}){if(!t)return null;const e=`Inquiry from ${window.location.origin}`;return w.jsxs("a",{href:`mailto:${t}?Subject=${encodeURIComponent(e)}`,className:"allm-no-underline hover:allm-underline hover:allm-cursor-pointer allm-bg-white allm-gap-x-[12px] hover:allm-bg-gray-100 allm-rounded-lg allm-border-none allm-flex allm-items-center allm-text-base allm-text-[#7A7D7E] allm-font-bold allm-px-4",children:[w.jsx(Rf,{size:24}),w.jsx("p",{className:"allm-text-[14px] allm-font-sans",children:"Email Support"})]})}function O_(){const t=Y0();return t?w.jsx("div",{className:"allm-text-xs allm-text-gray-300 allm-w-full allm-text-center",children:t}):null}function k_(t=null,e=null){const[n,r]=U.useState(!0),[o,a]=U.useState([]);return U.useEffect(()=>{async function s(){if(!(!e||!t))try{const i=await Cs.embedSessionHistory(t,e);a(i),r(!1)}catch(i){console.error("Error fetching historical chats:",i),r(!1)}}s()},[e,t]),{chatHistory:o,setChatHistory:a,loading:n}}var Ss={exports:{}};/*! https://mths.be/he v1.2.0 by @mathias | MIT license */Ss.exports,function(t,e){(function(n){var r=e,o=t&&t.exports==r&&t,a=typeof xe=="object"&&xe;(a.global===a||a.window===a)&&(n=a);var s=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,i=/[\x01-\x7F]/g,l=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,u=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,c={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","	":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon","ˆ":"circ","ˇ":"caron","°":"deg","©":"copy","®":"reg","℗":"copysr","℘":"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78","𝒶":"ascr","𝕒":"aopf","𝔞":"afr","𝔸":"Aopf","𝔄":"Afr","𝒜":"Ascr",ª:"ordf",á:"aacute",Á:"Aacute",à:"agrave",À:"Agrave",ă:"abreve",Ă:"Abreve",â:"acirc",Â:"Acirc",å:"aring",Å:"angst",ä:"auml",Ä:"Auml",ã:"atilde",Ã:"Atilde",ą:"aogon",Ą:"Aogon",ā:"amacr",Ā:"Amacr",æ:"aelig",Æ:"AElig","𝒷":"bscr","𝕓":"bopf","𝔟":"bfr","𝔹":"Bopf",ℬ:"Bscr","𝔅":"Bfr","𝔠":"cfr","𝒸":"cscr","𝕔":"copf",ℭ:"Cfr","𝒞":"Cscr",ℂ:"Copf",ć:"cacute",Ć:"Cacute",ĉ:"ccirc",Ĉ:"Ccirc",č:"ccaron",Č:"Ccaron",ċ:"cdot",Ċ:"Cdot",ç:"ccedil",Ç:"Ccedil","℅":"incare","𝔡":"dfr","ⅆ":"dd","𝕕":"dopf","𝒹":"dscr","𝒟":"Dscr","𝔇":"Dfr","ⅅ":"DD","𝔻":"Dopf",ď:"dcaron",Ď:"Dcaron",đ:"dstrok",Đ:"Dstrok",ð:"eth",Ð:"ETH","ⅇ":"ee",ℯ:"escr","𝔢":"efr","𝕖":"eopf",ℰ:"Escr","𝔈":"Efr","𝔼":"Eopf",é:"eacute",É:"Eacute",è:"egrave",È:"Egrave",ê:"ecirc",Ê:"Ecirc",ě:"ecaron",Ě:"Ecaron",ë:"euml",Ë:"Euml",ė:"edot",Ė:"Edot",ę:"eogon",Ę:"Eogon",ē:"emacr",Ē:"Emacr","𝔣":"ffr","𝕗":"fopf","𝒻":"fscr","𝔉":"Ffr","𝔽":"Fopf",ℱ:"Fscr",ﬀ:"fflig",ﬃ:"ffilig",ﬄ:"ffllig",ﬁ:"filig",fj:"fjlig",ﬂ:"fllig",ƒ:"fnof",ℊ:"gscr","𝕘":"gopf","𝔤":"gfr","𝒢":"Gscr","𝔾":"Gopf","𝔊":"Gfr",ǵ:"gacute",ğ:"gbreve",Ğ:"Gbreve",ĝ:"gcirc",Ĝ:"Gcirc",ġ:"gdot",Ġ:"Gdot",Ģ:"Gcedil","𝔥":"hfr",ℎ:"planckh","𝒽":"hscr","𝕙":"hopf",ℋ:"Hscr",ℌ:"Hfr",ℍ:"Hopf",ĥ:"hcirc",Ĥ:"Hcirc",ℏ:"hbar",ħ:"hstrok",Ħ:"Hstrok","𝕚":"iopf","𝔦":"ifr","𝒾":"iscr","ⅈ":"ii","𝕀":"Iopf",ℐ:"Iscr",ℑ:"Im",í:"iacute",Í:"Iacute",ì:"igrave",Ì:"Igrave",î:"icirc",Î:"Icirc",ï:"iuml",Ï:"Iuml",ĩ:"itilde",Ĩ:"Itilde",İ:"Idot",į:"iogon",Į:"Iogon",ī:"imacr",Ī:"Imacr",ĳ:"ijlig",Ĳ:"IJlig",ı:"imath","𝒿":"jscr","𝕛":"jopf","𝔧":"jfr","𝒥":"Jscr","𝔍":"Jfr","𝕁":"Jopf",ĵ:"jcirc",Ĵ:"Jcirc","ȷ":"jmath","𝕜":"kopf","𝓀":"kscr","𝔨":"kfr","𝒦":"Kscr","𝕂":"Kopf","𝔎":"Kfr",ķ:"kcedil",Ķ:"Kcedil","𝔩":"lfr","𝓁":"lscr",ℓ:"ell","𝕝":"lopf",ℒ:"Lscr","𝔏":"Lfr","𝕃":"Lopf",ĺ:"lacute",Ĺ:"Lacute",ľ:"lcaron",Ľ:"Lcaron",ļ:"lcedil",Ļ:"Lcedil",ł:"lstrok",Ł:"Lstrok",ŀ:"lmidot",Ŀ:"Lmidot","𝔪":"mfr","𝕞":"mopf","𝓂":"mscr","𝔐":"Mfr","𝕄":"Mopf",ℳ:"Mscr","𝔫":"nfr","𝕟":"nopf","𝓃":"nscr",ℕ:"Nopf","𝒩":"Nscr","𝔑":"Nfr",ń:"nacute",Ń:"Nacute",ň:"ncaron",Ň:"Ncaron",ñ:"ntilde",Ñ:"Ntilde",ņ:"ncedil",Ņ:"Ncedil","№":"numero",ŋ:"eng",Ŋ:"ENG","𝕠":"oopf","𝔬":"ofr",ℴ:"oscr","𝒪":"Oscr","𝔒":"Ofr","𝕆":"Oopf",º:"ordm",ó:"oacute",Ó:"Oacute",ò:"ograve",Ò:"Ograve",ô:"ocirc",Ô:"Ocirc",ö:"ouml",Ö:"Ouml",ő:"odblac",Ő:"Odblac",õ:"otilde",Õ:"Otilde",ø:"oslash",Ø:"Oslash",ō:"omacr",Ō:"Omacr",œ:"oelig",Œ:"OElig","𝔭":"pfr","𝓅":"pscr","𝕡":"popf",ℙ:"Popf","𝔓":"Pfr","𝒫":"Pscr","𝕢":"qopf","𝔮":"qfr","𝓆":"qscr","𝒬":"Qscr","𝔔":"Qfr",ℚ:"Qopf",ĸ:"kgreen","𝔯":"rfr","𝕣":"ropf","𝓇":"rscr",ℛ:"Rscr",ℜ:"Re",ℝ:"Ropf",ŕ:"racute",Ŕ:"Racute",ř:"rcaron",Ř:"Rcaron",ŗ:"rcedil",Ŗ:"Rcedil","𝕤":"sopf","𝓈":"sscr","𝔰":"sfr","𝕊":"Sopf","𝔖":"Sfr","𝒮":"Sscr","Ⓢ":"oS",ś:"sacute",Ś:"Sacute",ŝ:"scirc",Ŝ:"Scirc",š:"scaron",Š:"Scaron",ş:"scedil",Ş:"Scedil",ß:"szlig","𝔱":"tfr","𝓉":"tscr","𝕥":"topf","𝒯":"Tscr","𝔗":"Tfr","𝕋":"Topf",ť:"tcaron",Ť:"Tcaron",ţ:"tcedil",Ţ:"Tcedil","™":"trade",ŧ:"tstrok",Ŧ:"Tstrok","𝓊":"uscr","𝕦":"uopf","𝔲":"ufr","𝕌":"Uopf","𝔘":"Ufr","𝒰":"Uscr",ú:"uacute",Ú:"Uacute",ù:"ugrave",Ù:"Ugrave",ŭ:"ubreve",Ŭ:"Ubreve",û:"ucirc",Û:"Ucirc",ů:"uring",Ů:"Uring",ü:"uuml",Ü:"Uuml",ű:"udblac",Ű:"Udblac",ũ:"utilde",Ũ:"Utilde",ų:"uogon",Ų:"Uogon",ū:"umacr",Ū:"Umacr","𝔳":"vfr","𝕧":"vopf","𝓋":"vscr","𝔙":"Vfr","𝕍":"Vopf","𝒱":"Vscr","𝕨":"wopf","𝓌":"wscr","𝔴":"wfr","𝒲":"Wscr","𝕎":"Wopf","𝔚":"Wfr",ŵ:"wcirc",Ŵ:"Wcirc","𝔵":"xfr","𝓍":"xscr","𝕩":"xopf","𝕏":"Xopf","𝔛":"Xfr","𝒳":"Xscr","𝔶":"yfr","𝓎":"yscr","𝕪":"yopf","𝒴":"Yscr","𝔜":"Yfr","𝕐":"Yopf",ý:"yacute",Ý:"Yacute",ŷ:"ycirc",Ŷ:"Ycirc",ÿ:"yuml",Ÿ:"Yuml","𝓏":"zscr","𝔷":"zfr","𝕫":"zopf",ℨ:"Zfr",ℤ:"Zopf","𝒵":"Zscr",ź:"zacute",Ź:"Zacute",ž:"zcaron",Ž:"Zcaron",ż:"zdot",Ż:"Zdot",Ƶ:"imped",þ:"thorn",Þ:"THORN",ŉ:"napos",α:"alpha",Α:"Alpha",β:"beta",Β:"Beta",γ:"gamma",Γ:"Gamma",δ:"delta",Δ:"Delta",ε:"epsi","ϵ":"epsiv",Ε:"Epsilon",ϝ:"gammad",Ϝ:"Gammad",ζ:"zeta",Ζ:"Zeta",η:"eta",Η:"Eta",θ:"theta",ϑ:"thetav",Θ:"Theta",ι:"iota",Ι:"Iota",κ:"kappa",ϰ:"kappav",Κ:"Kappa",λ:"lambda",Λ:"Lambda",μ:"mu",µ:"micro",Μ:"Mu",ν:"nu",Ν:"Nu",ξ:"xi",Ξ:"Xi",ο:"omicron",Ο:"Omicron",π:"pi",ϖ:"piv",Π:"Pi",ρ:"rho",ϱ:"rhov",Ρ:"Rho",σ:"sigma",Σ:"Sigma",ς:"sigmaf",τ:"tau",Τ:"Tau",υ:"upsi",Υ:"Upsilon",ϒ:"Upsi",φ:"phi",ϕ:"phiv",Φ:"Phi",χ:"chi",Χ:"Chi",ψ:"psi",Ψ:"Psi",ω:"omega",Ω:"ohm",а:"acy",А:"Acy",б:"bcy",Б:"Bcy",в:"vcy",В:"Vcy",г:"gcy",Г:"Gcy",ѓ:"gjcy",Ѓ:"GJcy",д:"dcy",Д:"Dcy",ђ:"djcy",Ђ:"DJcy",е:"iecy",Е:"IEcy",ё:"iocy",Ё:"IOcy",є:"jukcy",Є:"Jukcy",ж:"zhcy",Ж:"ZHcy",з:"zcy",З:"Zcy",ѕ:"dscy",Ѕ:"DScy",и:"icy",И:"Icy",і:"iukcy",І:"Iukcy",ї:"yicy",Ї:"YIcy",й:"jcy",Й:"Jcy",ј:"jsercy",Ј:"Jsercy",к:"kcy",К:"Kcy",ќ:"kjcy",Ќ:"KJcy",л:"lcy",Л:"Lcy",љ:"ljcy",Љ:"LJcy",м:"mcy",М:"Mcy",н:"ncy",Н:"Ncy",њ:"njcy",Њ:"NJcy",о:"ocy",О:"Ocy",п:"pcy",П:"Pcy",р:"rcy",Р:"Rcy",с:"scy",С:"Scy",т:"tcy",Т:"Tcy",ћ:"tshcy",Ћ:"TSHcy",у:"ucy",У:"Ucy",ў:"ubrcy",Ў:"Ubrcy",ф:"fcy",Ф:"Fcy",х:"khcy",Х:"KHcy",ц:"tscy",Ц:"TScy",ч:"chcy",Ч:"CHcy",џ:"dzcy",Џ:"DZcy",ш:"shcy",Ш:"SHcy",щ:"shchcy",Щ:"SHCHcy",ъ:"hardcy",Ъ:"HARDcy",ы:"ycy",Ы:"Ycy",ь:"softcy",Ь:"SOFTcy",э:"ecy",Э:"Ecy",ю:"yucy",Ю:"YUcy",я:"yacy",Я:"YAcy",ℵ:"aleph",ℶ:"beth",ℷ:"gimel",ℸ:"daleth"},p=/["&'<>`]/g,d={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},f=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,b=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,A=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,y={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:`
`,nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"	",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},h={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},g={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},E=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],_=String.fromCharCode,T={},v=T.hasOwnProperty,N=function(C,L){return v.call(C,L)},R=function(C,L){for(var k=-1,$=C.length;++k<$;)if(C[k]==L)return!0;return!1},H=function(C,L){if(!C)return L;var k={},$;for($ in L)k[$]=N(C,$)?C[$]:L[$];return k},I=function(C,L){var k="";return C>=55296&&C<=57343||C>1114111?(L&&K("character reference outside the permissible Unicode range"),"�"):N(g,C)?(L&&K("disallowed character reference"),g[C]):(L&&R(E,C)&&K("disallowed character reference"),C>65535&&(C-=65536,k+=_(C>>>10&1023|55296),C=56320|C&1023),k+=_(C),k)},W=function(C){return"&#x"+C.toString(16).toUpperCase()+";"},le=function(C){return"&#"+C+";"},K=function(C){throw Error("Parse error: "+C)},O=function(C,L){L=H(L,O.options);var k=L.strict;k&&b.test(C)&&K("forbidden code point");var $=L.encodeEverything,j=L.useNamedReferences,ge=L.allowUnsafeSymbols,pe=L.decimal?le:W,ue=function(ce){return pe(ce.charCodeAt(0))};return $?(C=C.replace(i,function(ce){return j&&N(c,ce)?"&"+c[ce]+";":ue(ce)}),j&&(C=C.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),j&&(C=C.replace(u,function(ce){return"&"+c[ce]+";"}))):j?(ge||(C=C.replace(p,function(ce){return"&"+c[ce]+";"})),C=C.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;"),C=C.replace(u,function(ce){return"&"+c[ce]+";"})):ge||(C=C.replace(p,ue)),C.replace(s,function(ce){var bt=ce.charCodeAt(0),Ut=ce.charCodeAt(1),At=(bt-55296)*1024+Ut-56320+65536;return pe(At)}).replace(l,ue)};O.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var V=function(C,L){L=H(L,V.options);var k=L.strict;return k&&f.test(C)&&K("malformed character reference"),C.replace(A,function($,j,ge,pe,ue,ce,bt,Ut,At){var je,xt,ne,Oe,Be,Te;return j?(Be=j,y[Be]):ge?(Be=ge,Te=pe,Te&&L.isAttributeValue?(k&&Te=="="&&K("`&` did not start a character reference"),$):(k&&K("named character reference was not terminated by a semicolon"),h[Be]+(Te||""))):ue?(ne=ue,xt=ce,k&&!xt&&K("character reference was not terminated by a semicolon"),je=parseInt(ne,10),I(je,k)):bt?(Oe=bt,xt=Ut,k&&!xt&&K("character reference was not terminated by a semicolon"),je=parseInt(Oe,16),I(je,k)):(k&&K("named character reference was not terminated by a semicolon"),$)})};V.options={isAttributeValue:!1,strict:!1};var B=function(C){return C.replace(p,function(L){return d[L]})},x={version:"1.2.0",encode:O,decode:V,escape:B,unescape:V};if(r&&!r.nodeType)if(o)o.exports=x;else for(var S in x)N(x,S)&&(r[S]=x[S]);else n.he=x})(xe)}(Ss,Ss.exports);var I_=Ss.exports,ie={},t2={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:`
`,nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"	",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"},Tu=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/,Ir={},n2={};function M_(t){var e,n,r=n2[t];if(r)return r;for(r=n2[t]=[],e=0;e<128;e++)n=String.fromCharCode(e),/^[0-9a-z]$/i.test(n)?r.push(n):r.push("%"+("0"+e.toString(16).toUpperCase()).slice(-2));for(e=0;e<t.length;e++)r[t.charCodeAt(e)]=t[e];return r}function Ts(t,e,n){var r,o,a,s,i,l="";for(typeof e!="string"&&(n=e,e=Ts.defaultChars),typeof n>"u"&&(n=!0),i=M_(e),r=0,o=t.length;r<o;r++){if(a=t.charCodeAt(r),n&&a===37&&r+2<o&&/^[0-9a-f]{2}$/i.test(t.slice(r+1,r+3))){l+=t.slice(r,r+3),r+=2;continue}if(a<128){l+=i[a];continue}if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&r+1<o&&(s=t.charCodeAt(r+1),s>=56320&&s<=57343)){l+=encodeURIComponent(t[r]+t[r+1]),r++;continue}l+="%EF%BF%BD";continue}l+=encodeURIComponent(t[r])}return l}Ts.defaultChars=";/?:@&=+$,-_.!~*'()#",Ts.componentChars="-_.!~*'()";var F_=Ts,r2={};function B_(t){var e,n,r=r2[t];if(r)return r;for(r=r2[t]=[],e=0;e<128;e++)n=String.fromCharCode(e),r.push(n);for(e=0;e<t.length;e++)n=t.charCodeAt(e),r[n]="%"+("0"+n.toString(16).toUpperCase()).slice(-2);return r}function Ns(t,e){var n;return typeof e!="string"&&(e=Ns.defaultChars),n=B_(e),t.replace(/(%[a-f0-9]{2})+/gi,function(r){var o,a,s,i,l,u,c,p="";for(o=0,a=r.length;o<a;o+=3){if(s=parseInt(r.slice(o+1,o+3),16),s<128){p+=n[s];continue}if((s&224)===192&&o+3<a&&(i=parseInt(r.slice(o+4,o+6),16),(i&192)===128)){c=s<<6&1984|i&63,c<128?p+="��":p+=String.fromCharCode(c),o+=3;continue}if((s&240)===224&&o+6<a&&(i=parseInt(r.slice(o+4,o+6),16),l=parseInt(r.slice(o+7,o+9),16),(i&192)===128&&(l&192)===128)){c=s<<12&61440|i<<6&4032|l&63,c<2048||c>=55296&&c<=57343?p+="���":p+=String.fromCharCode(c),o+=6;continue}if((s&248)===240&&o+9<a&&(i=parseInt(r.slice(o+4,o+6),16),l=parseInt(r.slice(o+7,o+9),16),u=parseInt(r.slice(o+10,o+12),16),(i&192)===128&&(l&192)===128&&(u&192)===128)){c=s<<18&1835008|i<<12&258048|l<<6&4032|u&63,c<65536||c>1114111?p+="����":(c-=65536,p+=String.fromCharCode(55296+(c>>10),56320+(c&1023))),o+=9;continue}p+="�"}return p})}Ns.defaultChars=";/?:@&=+$,#",Ns.componentChars="";var P_=Ns,U_=function(e){var n="";return n+=e.protocol||"",n+=e.slashes?"//":"",n+=e.auth?e.auth+"@":"",e.hostname&&e.hostname.indexOf(":")!==-1?n+="["+e.hostname+"]":n+=e.hostname||"",n+=e.port?":"+e.port:"",n+=e.pathname||"",n+=e.search||"",n+=e.hash||"",n};function ws(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null}var q_=/^([a-z0-9.+-]+:)/i,H_=/:[0-9]*$/,V_=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,$_=["<",">",'"',"`"," ","\r",`
`,"	"],z_=["{","}","|","\\","^","`"].concat($_),G_=["'"].concat(z_),o2=["%","/","?",";","#"].concat(G_),a2=["/","?","#"],Z_=255,s2=/^[+a-z0-9A-Z_-]{0,63}$/,j_=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,i2={javascript:!0,"javascript:":!0},l2={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function W_(t,e){if(t&&t instanceof ws)return t;var n=new ws;return n.parse(t,e),n}ws.prototype.parse=function(t,e){var n,r,o,a,s,i=t;if(i=i.trim(),!e&&t.split("#").length===1){var l=V_.exec(i);if(l)return this.pathname=l[1],l[2]&&(this.search=l[2]),this}var u=q_.exec(i);if(u&&(u=u[0],o=u.toLowerCase(),this.protocol=u,i=i.substr(u.length)),(e||u||i.match(/^\/\/[^@\/]+@[^@\/]+/))&&(s=i.substr(0,2)==="//",s&&!(u&&i2[u])&&(i=i.substr(2),this.slashes=!0)),!i2[u]&&(s||u&&!l2[u])){var c=-1;for(n=0;n<a2.length;n++)a=i.indexOf(a2[n]),a!==-1&&(c===-1||a<c)&&(c=a);var p,d;for(c===-1?d=i.lastIndexOf("@"):d=i.lastIndexOf("@",c),d!==-1&&(p=i.slice(0,d),i=i.slice(d+1),this.auth=p),c=-1,n=0;n<o2.length;n++)a=i.indexOf(o2[n]),a!==-1&&(c===-1||a<c)&&(c=a);c===-1&&(c=i.length),i[c-1]===":"&&c--;var f=i.slice(0,c);i=i.slice(c),this.parseHost(f),this.hostname=this.hostname||"";var b=this.hostname[0]==="["&&this.hostname[this.hostname.length-1]==="]";if(!b){var A=this.hostname.split(/\./);for(n=0,r=A.length;n<r;n++){var y=A[n];if(y&&!y.match(s2)){for(var h="",g=0,E=y.length;g<E;g++)y.charCodeAt(g)>127?h+="x":h+=y[g];if(!h.match(s2)){var _=A.slice(0,n),T=A.slice(n+1),v=y.match(j_);v&&(_.push(v[1]),T.unshift(v[2])),T.length&&(i=T.join(".")+i),this.hostname=_.join(".");break}}}}this.hostname.length>Z_&&(this.hostname=""),b&&(this.hostname=this.hostname.substr(1,this.hostname.length-2))}var N=i.indexOf("#");N!==-1&&(this.hash=i.substr(N),i=i.slice(0,N));var R=i.indexOf("?");return R!==-1&&(this.search=i.substr(R),i=i.slice(0,R)),i&&(this.pathname=i),l2[o]&&this.hostname&&!this.pathname&&(this.pathname=""),this},ws.prototype.parseHost=function(t){var e=H_.exec(t);e&&(e=e[0],e!==":"&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)};var K_=W_;Ir.encode=F_,Ir.decode=P_,Ir.format=U_,Ir.parse=K_;var Yn={},Nu,u2;function c2(){return u2||(u2=1,Nu=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/),Nu}var wu,d2;function p2(){return d2||(d2=1,wu=/[\0-\x1F\x7F-\x9F]/),wu}var xu,f2;function Y_(){return f2||(f2=1,xu=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/),xu}var Ru,m2;function g2(){return m2||(m2=1,Ru=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/),Ru}var h2;function X_(){return h2||(h2=1,Yn.Any=c2(),Yn.Cc=p2(),Yn.Cf=Y_(),Yn.P=Tu,Yn.Z=g2()),Yn}(function(t){function e(O){return Object.prototype.toString.call(O)}function n(O){return e(O)==="[object String]"}var r=Object.prototype.hasOwnProperty;function o(O,V){return r.call(O,V)}function a(O){var V=Array.prototype.slice.call(arguments,1);return V.forEach(function(B){if(B){if(typeof B!="object")throw new TypeError(B+"must be object");Object.keys(B).forEach(function(x){O[x]=B[x]})}}),O}function s(O,V,B){return[].concat(O.slice(0,V),B,O.slice(V+1))}function i(O){return!(O>=55296&&O<=57343||O>=64976&&O<=65007||(O&65535)===65535||(O&65535)===65534||O>=0&&O<=8||O===11||O>=14&&O<=31||O>=127&&O<=159||O>1114111)}function l(O){if(O>65535){O-=65536;var V=55296+(O>>10),B=56320+(O&1023);return String.fromCharCode(V,B)}return String.fromCharCode(O)}var u=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,c=/&([a-z#][a-z0-9]{1,31});/gi,p=new RegExp(u.source+"|"+c.source,"gi"),d=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i,f=t2;function b(O,V){var B;return o(f,V)?f[V]:V.charCodeAt(0)===35&&d.test(V)&&(B=V[1].toLowerCase()==="x"?parseInt(V.slice(2),16):parseInt(V.slice(1),10),i(B))?l(B):O}function A(O){return O.indexOf("\\")<0?O:O.replace(u,"$1")}function y(O){return O.indexOf("\\")<0&&O.indexOf("&")<0?O:O.replace(p,function(V,B,x){return B||b(V,x)})}var h=/[&<>"]/,g=/[&<>"]/g,E={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function _(O){return E[O]}function T(O){return h.test(O)?O.replace(g,_):O}var v=/[.?*+^$[\]\\(){}|-]/g;function N(O){return O.replace(v,"\\$&")}function R(O){switch(O){case 9:case 32:return!0}return!1}function H(O){if(O>=8192&&O<=8202)return!0;switch(O){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1}var I=Tu;function W(O){return I.test(O)}function le(O){switch(O){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}}function K(O){return O=O.trim().replace(/\s+/g," "),"ẞ".toLowerCase()==="Ṿ"&&(O=O.replace(/ẞ/g,"ß")),O.toLowerCase().toUpperCase()}t.lib={},t.lib.mdurl=Ir,t.lib.ucmicro=X_(),t.assign=a,t.isString=n,t.has=o,t.unescapeMd=A,t.unescapeAll=y,t.isValidEntityCode=i,t.fromCodePoint=l,t.escapeHtml=T,t.arrayReplaceAt=s,t.isSpace=R,t.isWhiteSpace=H,t.isMdAsciiPunct=le,t.isPunctChar=W,t.escapeRE=N,t.normalizeReference=K})(ie);var xs={},Q_=function(e,n,r){var o,a,s,i,l=-1,u=e.posMax,c=e.pos;for(e.pos=n+1,o=1;e.pos<u;){if(s=e.src.charCodeAt(e.pos),s===93&&(o--,o===0)){a=!0;break}if(i=e.pos,e.md.inline.skipToken(e),s===91){if(i===e.pos-1)o++;else if(r)return e.pos=c,-1}}return a&&(l=e.pos),e.pos=c,l},E2=ie.unescapeAll,J_=function(e,n,r){var o,a,s=n,i={ok:!1,pos:0,lines:0,str:""};if(e.charCodeAt(s)===60){for(s++;s<r;){if(o=e.charCodeAt(s),o===10||o===60)return i;if(o===62)return i.pos=s+1,i.str=E2(e.slice(n+1,s)),i.ok=!0,i;if(o===92&&s+1<r){s+=2;continue}s++}return i}for(a=0;s<r&&(o=e.charCodeAt(s),!(o===32||o<32||o===127));){if(o===92&&s+1<r){if(e.charCodeAt(s+1)===32)break;s+=2;continue}if(o===40&&(a++,a>32))return i;if(o===41){if(a===0)break;a--}s++}return n===s||a!==0||(i.str=E2(e.slice(n,s)),i.pos=s,i.ok=!0),i},ev=ie.unescapeAll,tv=function(e,n,r){var o,a,s=0,i=n,l={ok:!1,pos:0,lines:0,str:""};if(i>=r||(a=e.charCodeAt(i),a!==34&&a!==39&&a!==40))return l;for(i++,a===40&&(a=41);i<r;){if(o=e.charCodeAt(i),o===a)return l.pos=i+1,l.lines=s,l.str=ev(e.slice(n+1,i)),l.ok=!0,l;if(o===40&&a===41)return l;o===10?s++:o===92&&i+1<r&&(i++,e.charCodeAt(i)===10&&s++),i++}return l};xs.parseLinkLabel=Q_,xs.parseLinkDestination=J_,xs.parseLinkTitle=tv;var nv=ie.assign,rv=ie.unescapeAll,Xn=ie.escapeHtml,jt={};jt.code_inline=function(t,e,n,r,o){var a=t[e];return"<code"+o.renderAttrs(a)+">"+Xn(a.content)+"</code>"},jt.code_block=function(t,e,n,r,o){var a=t[e];return"<pre"+o.renderAttrs(a)+"><code>"+Xn(t[e].content)+`</code></pre>
`},jt.fence=function(t,e,n,r,o){var a=t[e],s=a.info?rv(a.info).trim():"",i="",l="",u,c,p,d,f;return s&&(p=s.split(/(\s+)/g),i=p[0],l=p.slice(2).join("")),n.highlight?u=n.highlight(a.content,i,l)||Xn(a.content):u=Xn(a.content),u.indexOf("<pre")===0?u+`
`:s?(c=a.attrIndex("class"),d=a.attrs?a.attrs.slice():[],c<0?d.push(["class",n.langPrefix+i]):(d[c]=d[c].slice(),d[c][1]+=" "+n.langPrefix+i),f={attrs:d},"<pre><code"+o.renderAttrs(f)+">"+u+`</code></pre>
`):"<pre><code"+o.renderAttrs(a)+">"+u+`</code></pre>
`},jt.image=function(t,e,n,r,o){var a=t[e];return a.attrs[a.attrIndex("alt")][1]=o.renderInlineAsText(a.children,n,r),o.renderToken(t,e,n)},jt.hardbreak=function(t,e,n){return n.xhtmlOut?`<br />
`:`<br>
`},jt.softbreak=function(t,e,n){return n.breaks?n.xhtmlOut?`<br />
`:`<br>
`:`
`},jt.text=function(t,e){return Xn(t[e].content)},jt.html_block=function(t,e){return t[e].content},jt.html_inline=function(t,e){return t[e].content};function Mr(){this.rules=nv({},jt)}Mr.prototype.renderAttrs=function(e){var n,r,o;if(!e.attrs)return"";for(o="",n=0,r=e.attrs.length;n<r;n++)o+=" "+Xn(e.attrs[n][0])+'="'+Xn(e.attrs[n][1])+'"';return o},Mr.prototype.renderToken=function(e,n,r){var o,a="",s=!1,i=e[n];return i.hidden?"":(i.block&&i.nesting!==-1&&n&&e[n-1].hidden&&(a+=`
`),a+=(i.nesting===-1?"</":"<")+i.tag,a+=this.renderAttrs(i),i.nesting===0&&r.xhtmlOut&&(a+=" /"),i.block&&(s=!0,i.nesting===1&&n+1<e.length&&(o=e[n+1],(o.type==="inline"||o.hidden||o.nesting===-1&&o.tag===i.tag)&&(s=!1))),a+=s?`>
`:">",a)},Mr.prototype.renderInline=function(t,e,n){for(var r,o="",a=this.rules,s=0,i=t.length;s<i;s++)r=t[s].type,typeof a[r]<"u"?o+=a[r](t,s,e,n,this):o+=this.renderToken(t,s,e);return o},Mr.prototype.renderInlineAsText=function(t,e,n){for(var r="",o=0,a=t.length;o<a;o++)t[o].type==="text"?r+=t[o].content:t[o].type==="image"?r+=this.renderInlineAsText(t[o].children,e,n):t[o].type==="softbreak"&&(r+=`
`);return r},Mr.prototype.render=function(t,e,n){var r,o,a,s="",i=this.rules;for(r=0,o=t.length;r<o;r++)a=t[r].type,a==="inline"?s+=this.renderInline(t[r].children,e,n):typeof i[a]<"u"?s+=i[a](t,r,e,n,this):s+=this.renderToken(t,r,e,n);return s};var ov=Mr;function Bt(){this.__rules__=[],this.__cache__=null}Bt.prototype.__find__=function(t){for(var e=0;e<this.__rules__.length;e++)if(this.__rules__[e].name===t)return e;return-1},Bt.prototype.__compile__=function(){var t=this,e=[""];t.__rules__.forEach(function(n){n.enabled&&n.alt.forEach(function(r){e.indexOf(r)<0&&e.push(r)})}),t.__cache__={},e.forEach(function(n){t.__cache__[n]=[],t.__rules__.forEach(function(r){r.enabled&&(n&&r.alt.indexOf(n)<0||t.__cache__[n].push(r.fn))})})},Bt.prototype.at=function(t,e,n){var r=this.__find__(t),o=n||{};if(r===-1)throw new Error("Parser rule not found: "+t);this.__rules__[r].fn=e,this.__rules__[r].alt=o.alt||[],this.__cache__=null},Bt.prototype.before=function(t,e,n,r){var o=this.__find__(t),a=r||{};if(o===-1)throw new Error("Parser rule not found: "+t);this.__rules__.splice(o,0,{name:e,enabled:!0,fn:n,alt:a.alt||[]}),this.__cache__=null},Bt.prototype.after=function(t,e,n,r){var o=this.__find__(t),a=r||{};if(o===-1)throw new Error("Parser rule not found: "+t);this.__rules__.splice(o+1,0,{name:e,enabled:!0,fn:n,alt:a.alt||[]}),this.__cache__=null},Bt.prototype.push=function(t,e,n){var r=n||{};this.__rules__.push({name:t,enabled:!0,fn:e,alt:r.alt||[]}),this.__cache__=null},Bt.prototype.enable=function(t,e){Array.isArray(t)||(t=[t]);var n=[];return t.forEach(function(r){var o=this.__find__(r);if(o<0){if(e)return;throw new Error("Rules manager: invalid rule name "+r)}this.__rules__[o].enabled=!0,n.push(r)},this),this.__cache__=null,n},Bt.prototype.enableOnly=function(t,e){Array.isArray(t)||(t=[t]),this.__rules__.forEach(function(n){n.enabled=!1}),this.enable(t,e)},Bt.prototype.disable=function(t,e){Array.isArray(t)||(t=[t]);var n=[];return t.forEach(function(r){var o=this.__find__(r);if(o<0){if(e)return;throw new Error("Rules manager: invalid rule name "+r)}this.__rules__[o].enabled=!1,n.push(r)},this),this.__cache__=null,n},Bt.prototype.getRules=function(t){return this.__cache__===null&&this.__compile__(),this.__cache__[t]||[]};var Lu=Bt,av=/\r\n?|\n/g,sv=/\0/g,iv=function(e){var n;n=e.src.replace(av,`
`),n=n.replace(sv,"�"),e.src=n},lv=function(e){var n;e.inlineMode?(n=new e.Token("inline","",0),n.content=e.src,n.map=[0,1],n.children=[],e.tokens.push(n)):e.md.block.parse(e.src,e.md,e.env,e.tokens)},uv=function(e){var n=e.tokens,r,o,a;for(o=0,a=n.length;o<a;o++)r=n[o],r.type==="inline"&&e.md.inline.parse(r.content,e.md,e.env,r.children)},cv=ie.arrayReplaceAt;function dv(t){return/^<a[>\s]/i.test(t)}function pv(t){return/^<\/a\s*>/i.test(t)}var fv=function(e){var n,r,o,a,s,i,l,u,c,p,d,f,b,A,y,h,g=e.tokens,E;if(e.md.options.linkify){for(r=0,o=g.length;r<o;r++)if(!(g[r].type!=="inline"||!e.md.linkify.pretest(g[r].content)))for(a=g[r].children,b=0,n=a.length-1;n>=0;n--){if(i=a[n],i.type==="link_close"){for(n--;a[n].level!==i.level&&a[n].type!=="link_open";)n--;continue}if(i.type==="html_inline"&&(dv(i.content)&&b>0&&b--,pv(i.content)&&b++),!(b>0)&&i.type==="text"&&e.md.linkify.test(i.content)){for(c=i.content,E=e.md.linkify.match(c),l=[],f=i.level,d=0,E.length>0&&E[0].index===0&&n>0&&a[n-1].type==="text_special"&&(E=E.slice(1)),u=0;u<E.length;u++)A=E[u].url,y=e.md.normalizeLink(A),e.md.validateLink(y)&&(h=E[u].text,E[u].schema?E[u].schema==="mailto:"&&!/^mailto:/i.test(h)?h=e.md.normalizeLinkText("mailto:"+h).replace(/^mailto:/,""):h=e.md.normalizeLinkText(h):h=e.md.normalizeLinkText("http://"+h).replace(/^http:\/\//,""),p=E[u].index,p>d&&(s=new e.Token("text","",0),s.content=c.slice(d,p),s.level=f,l.push(s)),s=new e.Token("link_open","a",1),s.attrs=[["href",y]],s.level=f++,s.markup="linkify",s.info="auto",l.push(s),s=new e.Token("text","",0),s.content=h,s.level=f,l.push(s),s=new e.Token("link_close","a",-1),s.level=--f,s.markup="linkify",s.info="auto",l.push(s),d=E[u].lastIndex);d<c.length&&(s=new e.Token("text","",0),s.content=c.slice(d),s.level=f,l.push(s)),g[r].children=a=cv(a,n,l)}}}},b2=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,mv=/\((c|tm|r)\)/i,gv=/\((c|tm|r)\)/ig,hv={c:"©",r:"®",tm:"™"};function Ev(t,e){return hv[e.toLowerCase()]}function bv(t){var e,n,r=0;for(e=t.length-1;e>=0;e--)n=t[e],n.type==="text"&&!r&&(n.content=n.content.replace(gv,Ev)),n.type==="link_open"&&n.info==="auto"&&r--,n.type==="link_close"&&n.info==="auto"&&r++}function Av(t){var e,n,r=0;for(e=t.length-1;e>=0;e--)n=t[e],n.type==="text"&&!r&&b2.test(n.content)&&(n.content=n.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---(?=[^-]|$)/mg,"$1—").replace(/(^|\s)--(?=\s|$)/mg,"$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg,"$1–")),n.type==="link_open"&&n.info==="auto"&&r--,n.type==="link_close"&&n.info==="auto"&&r++}var _v=function(e){var n;if(e.md.options.typographer)for(n=e.tokens.length-1;n>=0;n--)e.tokens[n].type==="inline"&&(mv.test(e.tokens[n].content)&&bv(e.tokens[n].children),b2.test(e.tokens[n].content)&&Av(e.tokens[n].children))},A2=ie.isWhiteSpace,_2=ie.isPunctChar,v2=ie.isMdAsciiPunct,vv=/['"]/,y2=/['"]/g,D2="’";function Rs(t,e,n){return t.slice(0,e)+n+t.slice(e+1)}function yv(t,e){var n,r,o,a,s,i,l,u,c,p,d,f,b,A,y,h,g,E,_,T,v;for(_=[],n=0;n<t.length;n++){for(r=t[n],l=t[n].level,g=_.length-1;g>=0&&!(_[g].level<=l);g--);if(_.length=g+1,r.type==="text"){o=r.content,s=0,i=o.length;e:for(;s<i&&(y2.lastIndex=s,a=y2.exec(o),!!a);){if(y=h=!0,s=a.index+1,E=a[0]==="'",c=32,a.index-1>=0)c=o.charCodeAt(a.index-1);else for(g=n-1;g>=0&&!(t[g].type==="softbreak"||t[g].type==="hardbreak");g--)if(t[g].content){c=t[g].content.charCodeAt(t[g].content.length-1);break}if(p=32,s<i)p=o.charCodeAt(s);else for(g=n+1;g<t.length&&!(t[g].type==="softbreak"||t[g].type==="hardbreak");g++)if(t[g].content){p=t[g].content.charCodeAt(0);break}if(d=v2(c)||_2(String.fromCharCode(c)),f=v2(p)||_2(String.fromCharCode(p)),b=A2(c),A=A2(p),A?y=!1:f&&(b||d||(y=!1)),b?h=!1:d&&(A||f||(h=!1)),p===34&&a[0]==='"'&&c>=48&&c<=57&&(h=y=!1),y&&h&&(y=d,h=f),!y&&!h){E&&(r.content=Rs(r.content,a.index,D2));continue}if(h){for(g=_.length-1;g>=0&&(u=_[g],!(_[g].level<l));g--)if(u.single===E&&_[g].level===l){u=_[g],E?(T=e.md.options.quotes[2],v=e.md.options.quotes[3]):(T=e.md.options.quotes[0],v=e.md.options.quotes[1]),r.content=Rs(r.content,a.index,v),t[u.token].content=Rs(t[u.token].content,u.pos,T),s+=v.length-1,u.token===n&&(s+=T.length-1),o=r.content,i=o.length,_.length=g;continue e}}y?_.push({token:n,pos:a.index,single:E,level:l}):h&&E&&(r.content=Rs(r.content,a.index,D2))}}}}var Dv=function(e){var n;if(e.md.options.typographer)for(n=e.tokens.length-1;n>=0;n--)e.tokens[n].type!=="inline"||!vv.test(e.tokens[n].content)||yv(e.tokens[n].children,e)},Cv=function(e){var n,r,o,a,s,i,l=e.tokens;for(n=0,r=l.length;n<r;n++)if(l[n].type==="inline"){for(o=l[n].children,s=o.length,a=0;a<s;a++)o[a].type==="text_special"&&(o[a].type="text");for(a=i=0;a<s;a++)o[a].type==="text"&&a+1<s&&o[a+1].type==="text"?o[a+1].content=o[a].content+o[a+1].content:(a!==i&&(o[i]=o[a]),i++);a!==i&&(o.length=i)}};function Fr(t,e,n){this.type=t,this.tag=e,this.attrs=null,this.map=null,this.nesting=n,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}Fr.prototype.attrIndex=function(e){var n,r,o;if(!this.attrs)return-1;for(n=this.attrs,r=0,o=n.length;r<o;r++)if(n[r][0]===e)return r;return-1},Fr.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e]},Fr.prototype.attrSet=function(e,n){var r=this.attrIndex(e),o=[e,n];r<0?this.attrPush(o):this.attrs[r]=o},Fr.prototype.attrGet=function(e){var n=this.attrIndex(e),r=null;return n>=0&&(r=this.attrs[n][1]),r},Fr.prototype.attrJoin=function(e,n){var r=this.attrIndex(e);r<0?this.attrPush([e,n]):this.attrs[r][1]=this.attrs[r][1]+" "+n};var Ou=Fr,Sv=Ou;function C2(t,e,n){this.src=t,this.env=n,this.tokens=[],this.inlineMode=!1,this.md=e}C2.prototype.Token=Sv;var Tv=C2,Nv=Lu,ku=[["normalize",iv],["block",lv],["inline",uv],["linkify",fv],["replacements",_v],["smartquotes",Dv],["text_join",Cv]];function Iu(){this.ruler=new Nv;for(var t=0;t<ku.length;t++)this.ruler.push(ku[t][0],ku[t][1])}Iu.prototype.process=function(t){var e,n,r;for(r=this.ruler.getRules(""),e=0,n=r.length;e<n;e++)r[e](t)},Iu.prototype.State=Tv;var wv=Iu,Mu=ie.isSpace;function Fu(t,e){var n=t.bMarks[e]+t.tShift[e],r=t.eMarks[e];return t.src.slice(n,r)}function S2(t){var e=[],n=0,r=t.length,o,a=!1,s=0,i="";for(o=t.charCodeAt(n);n<r;)o===124&&(a?(i+=t.substring(s,n-1),s=n):(e.push(i+t.substring(s,n)),i="",s=n+1)),a=o===92,n++,o=t.charCodeAt(n);return e.push(i+t.substring(s)),e}var xv=function(e,n,r,o){var a,s,i,l,u,c,p,d,f,b,A,y,h,g,E,_,T,v;if(n+2>r||(c=n+1,e.sCount[c]<e.blkIndent)||e.sCount[c]-e.blkIndent>=4||(i=e.bMarks[c]+e.tShift[c],i>=e.eMarks[c])||(T=e.src.charCodeAt(i++),T!==124&&T!==45&&T!==58)||i>=e.eMarks[c]||(v=e.src.charCodeAt(i++),v!==124&&v!==45&&v!==58&&!Mu(v))||T===45&&Mu(v))return!1;for(;i<e.eMarks[c];){if(a=e.src.charCodeAt(i),a!==124&&a!==45&&a!==58&&!Mu(a))return!1;i++}for(s=Fu(e,n+1),p=s.split("|"),b=[],l=0;l<p.length;l++){if(A=p[l].trim(),!A){if(l===0||l===p.length-1)continue;return!1}if(!/^:?-+:?$/.test(A))return!1;A.charCodeAt(A.length-1)===58?b.push(A.charCodeAt(0)===58?"center":"right"):A.charCodeAt(0)===58?b.push("left"):b.push("")}if(s=Fu(e,n).trim(),s.indexOf("|")===-1||e.sCount[n]-e.blkIndent>=4||(p=S2(s),p.length&&p[0]===""&&p.shift(),p.length&&p[p.length-1]===""&&p.pop(),d=p.length,d===0||d!==b.length))return!1;if(o)return!0;for(g=e.parentType,e.parentType="table",_=e.md.block.ruler.getRules("blockquote"),f=e.push("table_open","table",1),f.map=y=[n,0],f=e.push("thead_open","thead",1),f.map=[n,n+1],f=e.push("tr_open","tr",1),f.map=[n,n+1],l=0;l<p.length;l++)f=e.push("th_open","th",1),b[l]&&(f.attrs=[["style","text-align:"+b[l]]]),f=e.push("inline","",0),f.content=p[l].trim(),f.children=[],f=e.push("th_close","th",-1);for(f=e.push("tr_close","tr",-1),f=e.push("thead_close","thead",-1),c=n+2;c<r&&!(e.sCount[c]<e.blkIndent);c++){for(E=!1,l=0,u=_.length;l<u;l++)if(_[l](e,c,r,!0)){E=!0;break}if(E||(s=Fu(e,c).trim(),!s)||e.sCount[c]-e.blkIndent>=4)break;for(p=S2(s),p.length&&p[0]===""&&p.shift(),p.length&&p[p.length-1]===""&&p.pop(),c===n+2&&(f=e.push("tbody_open","tbody",1),f.map=h=[n+2,0]),f=e.push("tr_open","tr",1),f.map=[c,c+1],l=0;l<d;l++)f=e.push("td_open","td",1),b[l]&&(f.attrs=[["style","text-align:"+b[l]]]),f=e.push("inline","",0),f.content=p[l]?p[l].trim():"",f.children=[],f=e.push("td_close","td",-1);f=e.push("tr_close","tr",-1)}return h&&(f=e.push("tbody_close","tbody",-1),h[1]=c),f=e.push("table_close","table",-1),y[1]=c,e.parentType=g,e.line=c,!0},Rv=function(e,n,r){var o,a,s;if(e.sCount[n]-e.blkIndent<4)return!1;for(a=o=n+1;o<r;){if(e.isEmpty(o)){o++;continue}if(e.sCount[o]-e.blkIndent>=4){o++,a=o;continue}break}return e.line=a,s=e.push("code_block","code",0),s.content=e.getLines(n,a,4+e.blkIndent,!1)+`
`,s.map=[n,e.line],!0},Lv=function(e,n,r,o){var a,s,i,l,u,c,p,d=!1,f=e.bMarks[n]+e.tShift[n],b=e.eMarks[n];if(e.sCount[n]-e.blkIndent>=4||f+3>b||(a=e.src.charCodeAt(f),a!==126&&a!==96)||(u=f,f=e.skipChars(f,a),s=f-u,s<3)||(p=e.src.slice(u,f),i=e.src.slice(f,b),a===96&&i.indexOf(String.fromCharCode(a))>=0))return!1;if(o)return!0;for(l=n;l++,!(l>=r||(f=u=e.bMarks[l]+e.tShift[l],b=e.eMarks[l],f<b&&e.sCount[l]<e.blkIndent));)if(e.src.charCodeAt(f)===a&&!(e.sCount[l]-e.blkIndent>=4)&&(f=e.skipChars(f,a),!(f-u<s)&&(f=e.skipSpaces(f),!(f<b)))){d=!0;break}return s=e.sCount[n],e.line=l+(d?1:0),c=e.push("fence","code",0),c.info=i,c.content=e.getLines(n+1,l,s,!0),c.markup=p,c.map=[n,e.line],!0},Ov=ie.isSpace,kv=function(e,n,r,o){var a,s,i,l,u,c,p,d,f,b,A,y,h,g,E,_,T,v,N,R,H=e.lineMax,I=e.bMarks[n]+e.tShift[n],W=e.eMarks[n];if(e.sCount[n]-e.blkIndent>=4||e.src.charCodeAt(I)!==62)return!1;if(o)return!0;for(b=[],A=[],g=[],E=[],v=e.md.block.ruler.getRules("blockquote"),h=e.parentType,e.parentType="blockquote",d=n;d<r&&(R=e.sCount[d]<e.blkIndent,I=e.bMarks[d]+e.tShift[d],W=e.eMarks[d],!(I>=W));d++){if(e.src.charCodeAt(I++)===62&&!R){for(l=e.sCount[d]+1,e.src.charCodeAt(I)===32?(I++,l++,a=!1,_=!0):e.src.charCodeAt(I)===9?(_=!0,(e.bsCount[d]+l)%4===3?(I++,l++,a=!1):a=!0):_=!1,f=l,b.push(e.bMarks[d]),e.bMarks[d]=I;I<W&&(s=e.src.charCodeAt(I),Ov(s));){s===9?f+=4-(f+e.bsCount[d]+(a?1:0))%4:f++;I++}c=I>=W,A.push(e.bsCount[d]),e.bsCount[d]=e.sCount[d]+1+(_?1:0),g.push(e.sCount[d]),e.sCount[d]=f-l,E.push(e.tShift[d]),e.tShift[d]=I-e.bMarks[d];continue}if(c)break;for(T=!1,i=0,u=v.length;i<u;i++)if(v[i](e,d,r,!0)){T=!0;break}if(T){e.lineMax=d,e.blkIndent!==0&&(b.push(e.bMarks[d]),A.push(e.bsCount[d]),E.push(e.tShift[d]),g.push(e.sCount[d]),e.sCount[d]-=e.blkIndent);break}b.push(e.bMarks[d]),A.push(e.bsCount[d]),E.push(e.tShift[d]),g.push(e.sCount[d]),e.sCount[d]=-1}for(y=e.blkIndent,e.blkIndent=0,N=e.push("blockquote_open","blockquote",1),N.markup=">",N.map=p=[n,0],e.md.block.tokenize(e,n,d),N=e.push("blockquote_close","blockquote",-1),N.markup=">",e.lineMax=H,e.parentType=h,p[1]=e.line,i=0;i<E.length;i++)e.bMarks[i+n]=b[i],e.tShift[i+n]=E[i],e.sCount[i+n]=g[i],e.bsCount[i+n]=A[i];return e.blkIndent=y,!0},Iv=ie.isSpace,Mv=function(e,n,r,o){var a,s,i,l,u=e.bMarks[n]+e.tShift[n],c=e.eMarks[n];if(e.sCount[n]-e.blkIndent>=4||(a=e.src.charCodeAt(u++),a!==42&&a!==45&&a!==95))return!1;for(s=1;u<c;){if(i=e.src.charCodeAt(u++),i!==a&&!Iv(i))return!1;i===a&&s++}return s<3?!1:(o||(e.line=n+1,l=e.push("hr","hr",0),l.map=[n,e.line],l.markup=Array(s+1).join(String.fromCharCode(a))),!0)},T2=ie.isSpace;function N2(t,e){var n,r,o,a;return r=t.bMarks[e]+t.tShift[e],o=t.eMarks[e],n=t.src.charCodeAt(r++),n!==42&&n!==45&&n!==43||r<o&&(a=t.src.charCodeAt(r),!T2(a))?-1:r}function w2(t,e){var n,r=t.bMarks[e]+t.tShift[e],o=r,a=t.eMarks[e];if(o+1>=a||(n=t.src.charCodeAt(o++),n<48||n>57))return-1;for(;;){if(o>=a)return-1;if(n=t.src.charCodeAt(o++),n>=48&&n<=57){if(o-r>=10)return-1;continue}if(n===41||n===46)break;return-1}return o<a&&(n=t.src.charCodeAt(o),!T2(n))?-1:o}function Fv(t,e){var n,r,o=t.level+2;for(n=e+2,r=t.tokens.length-2;n<r;n++)t.tokens[n].level===o&&t.tokens[n].type==="paragraph_open"&&(t.tokens[n+2].hidden=!0,t.tokens[n].hidden=!0,n+=2)}var Bv=function(e,n,r,o){var a,s,i,l,u,c,p,d,f,b,A,y,h,g,E,_,T,v,N,R,H,I,W,le,K,O,V,B=n,x=!1,S=!0;if(e.sCount[B]-e.blkIndent>=4||e.listIndent>=0&&e.sCount[B]-e.listIndent>=4&&e.sCount[B]<e.blkIndent)return!1;if(o&&e.parentType==="paragraph"&&e.sCount[B]>=e.blkIndent&&(x=!0),(I=w2(e,B))>=0){if(p=!0,le=e.bMarks[B]+e.tShift[B],h=Number(e.src.slice(le,I-1)),x&&h!==1)return!1}else if((I=N2(e,B))>=0)p=!1;else return!1;if(x&&e.skipSpaces(I)>=e.eMarks[B])return!1;if(o)return!0;for(y=e.src.charCodeAt(I-1),A=e.tokens.length,p?(V=e.push("ordered_list_open","ol",1),h!==1&&(V.attrs=[["start",h]])):V=e.push("bullet_list_open","ul",1),V.map=b=[B,0],V.markup=String.fromCharCode(y),W=!1,O=e.md.block.ruler.getRules("list"),T=e.parentType,e.parentType="list";B<r;){for(H=I,g=e.eMarks[B],c=E=e.sCount[B]+I-(e.bMarks[B]+e.tShift[B]);H<g;){if(a=e.src.charCodeAt(H),a===9)E+=4-(E+e.bsCount[B])%4;else if(a===32)E++;else break;H++}if(s=H,s>=g?u=1:u=E-c,u>4&&(u=1),l=c+u,V=e.push("list_item_open","li",1),V.markup=String.fromCharCode(y),V.map=d=[B,0],p&&(V.info=e.src.slice(le,I-1)),R=e.tight,N=e.tShift[B],v=e.sCount[B],_=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=l,e.tight=!0,e.tShift[B]=s-e.bMarks[B],e.sCount[B]=E,s>=g&&e.isEmpty(B+1)?e.line=Math.min(e.line+2,r):e.md.block.tokenize(e,B,r,!0),(!e.tight||W)&&(S=!1),W=e.line-B>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=_,e.tShift[B]=N,e.sCount[B]=v,e.tight=R,V=e.push("list_item_close","li",-1),V.markup=String.fromCharCode(y),B=e.line,d[1]=B,B>=r||e.sCount[B]<e.blkIndent||e.sCount[B]-e.blkIndent>=4)break;for(K=!1,i=0,f=O.length;i<f;i++)if(O[i](e,B,r,!0)){K=!0;break}if(K)break;if(p){if(I=w2(e,B),I<0)break;le=e.bMarks[B]+e.tShift[B]}else if(I=N2(e,B),I<0)break;if(y!==e.src.charCodeAt(I-1))break}return p?V=e.push("ordered_list_close","ol",-1):V=e.push("bullet_list_close","ul",-1),V.markup=String.fromCharCode(y),b[1]=B,e.line=B,e.parentType=T,S&&Fv(e,A),!0},Pv=ie.normalizeReference,Ls=ie.isSpace,Uv=function(e,n,r,o){var a,s,i,l,u,c,p,d,f,b,A,y,h,g,E,_,T=0,v=e.bMarks[n]+e.tShift[n],N=e.eMarks[n],R=n+1;if(e.sCount[n]-e.blkIndent>=4||e.src.charCodeAt(v)!==91)return!1;for(;++v<N;)if(e.src.charCodeAt(v)===93&&e.src.charCodeAt(v-1)!==92){if(v+1===N||e.src.charCodeAt(v+1)!==58)return!1;break}for(l=e.lineMax,E=e.md.block.ruler.getRules("reference"),b=e.parentType,e.parentType="reference";R<l&&!e.isEmpty(R);R++)if(!(e.sCount[R]-e.blkIndent>3)&&!(e.sCount[R]<0)){for(g=!1,c=0,p=E.length;c<p;c++)if(E[c](e,R,l,!0)){g=!0;break}if(g)break}for(h=e.getLines(n,R,e.blkIndent,!1).trim(),N=h.length,v=1;v<N;v++){if(a=h.charCodeAt(v),a===91)return!1;if(a===93){f=v;break}else a===10?T++:a===92&&(v++,v<N&&h.charCodeAt(v)===10&&T++)}if(f<0||h.charCodeAt(f+1)!==58)return!1;for(v=f+2;v<N;v++)if(a=h.charCodeAt(v),a===10)T++;else if(!Ls(a))break;if(A=e.md.helpers.parseLinkDestination(h,v,N),!A.ok||(u=e.md.normalizeLink(A.str),!e.md.validateLink(u)))return!1;for(v=A.pos,T+=A.lines,s=v,i=T,y=v;v<N;v++)if(a=h.charCodeAt(v),a===10)T++;else if(!Ls(a))break;for(A=e.md.helpers.parseLinkTitle(h,v,N),v<N&&y!==v&&A.ok?(_=A.str,v=A.pos,T+=A.lines):(_="",v=s,T=i);v<N&&(a=h.charCodeAt(v),!!Ls(a));)v++;if(v<N&&h.charCodeAt(v)!==10&&_)for(_="",v=s,T=i;v<N&&(a=h.charCodeAt(v),!!Ls(a));)v++;return v<N&&h.charCodeAt(v)!==10||(d=Pv(h.slice(1,f)),!d)?!1:(o||(typeof e.env.references>"u"&&(e.env.references={}),typeof e.env.references[d]>"u"&&(e.env.references[d]={title:_,href:u}),e.parentType=b,e.line=n+T+1),!0)},qv=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Os={},Hv="[a-zA-Z_:][a-zA-Z0-9:._-]*",Vv="[^\"'=<>`\\x00-\\x20]+",$v="'[^']*'",zv='"[^"]*"',Gv="(?:"+Vv+"|"+$v+"|"+zv+")",Zv="(?:\\s+"+Hv+"(?:\\s*=\\s*"+Gv+")?)",x2="<[A-Za-z][A-Za-z0-9\\-]*"+Zv+"*\\s*\\/?>",R2="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",jv="<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->",Wv="<[?][\\s\\S]*?[?]>",Kv="<![A-Z]+\\s+[^>]*>",Yv="<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",Xv=new RegExp("^(?:"+x2+"|"+R2+"|"+jv+"|"+Wv+"|"+Kv+"|"+Yv+")"),Qv=new RegExp("^(?:"+x2+"|"+R2+")");Os.HTML_TAG_RE=Xv,Os.HTML_OPEN_CLOSE_TAG_RE=Qv;var Jv=qv,ey=Os.HTML_OPEN_CLOSE_TAG_RE,Br=[[/^<(script|pre|style|textarea)(?=(\s|>|$))/i,/<\/(script|pre|style|textarea)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+Jv.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(ey.source+"\\s*$"),/^$/,!1]],ty=function(e,n,r,o){var a,s,i,l,u=e.bMarks[n]+e.tShift[n],c=e.eMarks[n];if(e.sCount[n]-e.blkIndent>=4||!e.md.options.html||e.src.charCodeAt(u)!==60)return!1;for(l=e.src.slice(u,c),a=0;a<Br.length&&!Br[a][0].test(l);a++);if(a===Br.length)return!1;if(o)return Br[a][2];if(s=n+1,!Br[a][1].test(l)){for(;s<r&&!(e.sCount[s]<e.blkIndent);s++)if(u=e.bMarks[s]+e.tShift[s],c=e.eMarks[s],l=e.src.slice(u,c),Br[a][1].test(l)){l.length!==0&&s++;break}}return e.line=s,i=e.push("html_block","",0),i.map=[n,s],i.content=e.getLines(n,s,e.blkIndent,!0),!0},L2=ie.isSpace,ny=function(e,n,r,o){var a,s,i,l,u=e.bMarks[n]+e.tShift[n],c=e.eMarks[n];if(e.sCount[n]-e.blkIndent>=4||(a=e.src.charCodeAt(u),a!==35||u>=c))return!1;for(s=1,a=e.src.charCodeAt(++u);a===35&&u<c&&s<=6;)s++,a=e.src.charCodeAt(++u);return s>6||u<c&&!L2(a)?!1:(o||(c=e.skipSpacesBack(c,u),i=e.skipCharsBack(c,35,u),i>u&&L2(e.src.charCodeAt(i-1))&&(c=i),e.line=n+1,l=e.push("heading_open","h"+String(s),1),l.markup="########".slice(0,s),l.map=[n,e.line],l=e.push("inline","",0),l.content=e.src.slice(u,c).trim(),l.map=[n,e.line],l.children=[],l=e.push("heading_close","h"+String(s),-1),l.markup="########".slice(0,s)),!0)},ry=function(e,n,r){var o,a,s,i,l,u,c,p,d,f=n+1,b,A=e.md.block.ruler.getRules("paragraph");if(e.sCount[n]-e.blkIndent>=4)return!1;for(b=e.parentType,e.parentType="paragraph";f<r&&!e.isEmpty(f);f++)if(!(e.sCount[f]-e.blkIndent>3)){if(e.sCount[f]>=e.blkIndent&&(u=e.bMarks[f]+e.tShift[f],c=e.eMarks[f],u<c&&(d=e.src.charCodeAt(u),(d===45||d===61)&&(u=e.skipChars(u,d),u=e.skipSpaces(u),u>=c)))){p=d===61?1:2;break}if(!(e.sCount[f]<0)){for(a=!1,s=0,i=A.length;s<i;s++)if(A[s](e,f,r,!0)){a=!0;break}if(a)break}}return p?(o=e.getLines(n,f,e.blkIndent,!1).trim(),e.line=f+1,l=e.push("heading_open","h"+String(p),1),l.markup=String.fromCharCode(d),l.map=[n,e.line],l=e.push("inline","",0),l.content=o,l.map=[n,e.line-1],l.children=[],l=e.push("heading_close","h"+String(p),-1),l.markup=String.fromCharCode(d),e.parentType=b,!0):!1},oy=function(e,n,r){var o,a,s,i,l,u,c=n+1,p=e.md.block.ruler.getRules("paragraph");for(u=e.parentType,e.parentType="paragraph";c<r&&!e.isEmpty(c);c++)if(!(e.sCount[c]-e.blkIndent>3)&&!(e.sCount[c]<0)){for(a=!1,s=0,i=p.length;s<i;s++)if(p[s](e,c,r,!0)){a=!0;break}if(a)break}return o=e.getLines(n,c,e.blkIndent,!1).trim(),e.line=c,l=e.push("paragraph_open","p",1),l.map=[n,e.line],l=e.push("inline","",0),l.content=o,l.map=[n,e.line],l.children=[],l=e.push("paragraph_close","p",-1),e.parentType=u,!0},O2=Ou,ks=ie.isSpace;function Wt(t,e,n,r){var o,a,s,i,l,u,c,p;for(this.src=t,this.md=e,this.env=n,this.tokens=r,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",a=this.src,p=!1,s=i=u=c=0,l=a.length;i<l;i++){if(o=a.charCodeAt(i),!p)if(ks(o)){u++,o===9?c+=4-c%4:c++;continue}else p=!0;(o===10||i===l-1)&&(o!==10&&i++,this.bMarks.push(s),this.eMarks.push(i),this.tShift.push(u),this.sCount.push(c),this.bsCount.push(0),p=!1,u=0,c=0,s=i+1)}this.bMarks.push(a.length),this.eMarks.push(a.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}Wt.prototype.push=function(t,e,n){var r=new O2(t,e,n);return r.block=!0,n<0&&this.level--,r.level=this.level,n>0&&this.level++,this.tokens.push(r),r},Wt.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},Wt.prototype.skipEmptyLines=function(e){for(var n=this.lineMax;e<n&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},Wt.prototype.skipSpaces=function(e){for(var n,r=this.src.length;e<r&&(n=this.src.charCodeAt(e),!!ks(n));e++);return e},Wt.prototype.skipSpacesBack=function(e,n){if(e<=n)return e;for(;e>n;)if(!ks(this.src.charCodeAt(--e)))return e+1;return e},Wt.prototype.skipChars=function(e,n){for(var r=this.src.length;e<r&&this.src.charCodeAt(e)===n;e++);return e},Wt.prototype.skipCharsBack=function(e,n,r){if(e<=r)return e;for(;e>r;)if(n!==this.src.charCodeAt(--e))return e+1;return e},Wt.prototype.getLines=function(e,n,r,o){var a,s,i,l,u,c,p,d=e;if(e>=n)return"";for(c=new Array(n-e),a=0;d<n;d++,a++){for(s=0,p=l=this.bMarks[d],d+1<n||o?u=this.eMarks[d]+1:u=this.eMarks[d];l<u&&s<r;){if(i=this.src.charCodeAt(l),ks(i))i===9?s+=4-(s+this.bsCount[d])%4:s++;else if(l-p<this.tShift[d])s++;else break;l++}s>r?c[a]=new Array(s-r+1).join(" ")+this.src.slice(l,u):c[a]=this.src.slice(l,u)}return c.join("")},Wt.prototype.Token=O2;var ay=Wt,sy=Lu,Is=[["table",xv,["paragraph","reference"]],["code",Rv],["fence",Lv,["paragraph","reference","blockquote","list"]],["blockquote",kv,["paragraph","reference","blockquote","list"]],["hr",Mv,["paragraph","reference","blockquote","list"]],["list",Bv,["paragraph","reference","blockquote"]],["reference",Uv],["html_block",ty,["paragraph","reference","blockquote"]],["heading",ny,["paragraph","reference","blockquote"]],["lheading",ry],["paragraph",oy]];function Ms(){this.ruler=new sy;for(var t=0;t<Is.length;t++)this.ruler.push(Is[t][0],Is[t][1],{alt:(Is[t][2]||[]).slice()})}Ms.prototype.tokenize=function(t,e,n){for(var r,o,a,s=this.ruler.getRules(""),i=s.length,l=e,u=!1,c=t.md.options.maxNesting;l<n&&(t.line=l=t.skipEmptyLines(l),!(l>=n||t.sCount[l]<t.blkIndent));){if(t.level>=c){t.line=n;break}for(a=t.line,o=0;o<i;o++)if(r=s[o](t,l,n,!1),r){if(a>=t.line)throw new Error("block rule didn't increment state.line");break}if(!r)throw new Error("none of the block rules matched");t.tight=!u,t.isEmpty(t.line-1)&&(u=!0),l=t.line,l<n&&t.isEmpty(l)&&(u=!0,l++,t.line=l)}},Ms.prototype.parse=function(t,e,n,r){var o;t&&(o=new this.State(t,e,n,r),this.tokenize(o,o.line,o.lineMax))},Ms.prototype.State=ay;var iy=Ms;function ly(t){switch(t){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}for(var uy=function(e,n){for(var r=e.pos;r<e.posMax&&!ly(e.src.charCodeAt(r));)r++;return r===e.pos?!1:(n||(e.pending+=e.src.slice(e.pos,r)),e.pos=r,!0)},cy=/(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i,dy=function(e,n){var r,o,a,s,i,l,u,c;return!e.md.options.linkify||e.linkLevel>0||(r=e.pos,o=e.posMax,r+3>o)||e.src.charCodeAt(r)!==58||e.src.charCodeAt(r+1)!==47||e.src.charCodeAt(r+2)!==47||(a=e.pending.match(cy),!a)||(s=a[1],i=e.md.linkify.matchAtStart(e.src.slice(r-s.length)),!i)||(l=i.url,l.length<=s.length)||(l=l.replace(/\*+$/,""),u=e.md.normalizeLink(l),!e.md.validateLink(u))?!1:(n||(e.pending=e.pending.slice(0,-s.length),c=e.push("link_open","a",1),c.attrs=[["href",u]],c.markup="linkify",c.info="auto",c=e.push("text","",0),c.content=e.md.normalizeLinkText(l),c=e.push("link_close","a",-1),c.markup="linkify",c.info="auto"),e.pos+=l.length-s.length,!0)},py=ie.isSpace,fy=function(e,n){var r,o,a,s=e.pos;if(e.src.charCodeAt(s)!==10)return!1;if(r=e.pending.length-1,o=e.posMax,!n)if(r>=0&&e.pending.charCodeAt(r)===32)if(r>=1&&e.pending.charCodeAt(r-1)===32){for(a=r-1;a>=1&&e.pending.charCodeAt(a-1)===32;)a--;e.pending=e.pending.slice(0,a),e.push("hardbreak","br",0)}else e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0);else e.push("softbreak","br",0);for(s++;s<o&&py(e.src.charCodeAt(s));)s++;return e.pos=s,!0},my=ie.isSpace,Bu=[],k2=0;k2<256;k2++)Bu.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(t){Bu[t.charCodeAt(0)]=1});var gy=function(e,n){var r,o,a,s,i,l=e.pos,u=e.posMax;if(e.src.charCodeAt(l)!==92||(l++,l>=u))return!1;if(r=e.src.charCodeAt(l),r===10){for(n||e.push("hardbreak","br",0),l++;l<u&&(r=e.src.charCodeAt(l),!!my(r));)l++;return e.pos=l,!0}return s=e.src[l],r>=55296&&r<=56319&&l+1<u&&(o=e.src.charCodeAt(l+1),o>=56320&&o<=57343&&(s+=e.src[l+1],l++)),a="\\"+s,n||(i=e.push("text_special","",0),r<256&&Bu[r]!==0?i.content=s:i.content=a,i.markup=a,i.info="escape"),e.pos=l+1,!0},hy=function(e,n){var r,o,a,s,i,l,u,c,p=e.pos,d=e.src.charCodeAt(p);if(d!==96)return!1;for(r=p,p++,o=e.posMax;p<o&&e.src.charCodeAt(p)===96;)p++;if(a=e.src.slice(r,p),u=a.length,e.backticksScanned&&(e.backticks[u]||0)<=r)return n||(e.pending+=a),e.pos+=u,!0;for(l=p;(i=e.src.indexOf("`",l))!==-1;){for(l=i+1;l<o&&e.src.charCodeAt(l)===96;)l++;if(c=l-i,c===u)return n||(s=e.push("code_inline","code",0),s.markup=a,s.content=e.src.slice(p,i).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=l,!0;e.backticks[c]=i}return e.backticksScanned=!0,n||(e.pending+=a),e.pos+=u,!0},Fs={};Fs.tokenize=function(e,n){var r,o,a,s,i,l=e.pos,u=e.src.charCodeAt(l);if(n||u!==126||(o=e.scanDelims(e.pos,!0),s=o.length,i=String.fromCharCode(u),s<2))return!1;for(s%2&&(a=e.push("text","",0),a.content=i,s--),r=0;r<s;r+=2)a=e.push("text","",0),a.content=i+i,e.delimiters.push({marker:u,length:0,token:e.tokens.length-1,end:-1,open:o.can_open,close:o.can_close});return e.pos+=o.length,!0};function I2(t,e){var n,r,o,a,s,i=[],l=e.length;for(n=0;n<l;n++)o=e[n],o.marker===126&&o.end!==-1&&(a=e[o.end],s=t.tokens[o.token],s.type="s_open",s.tag="s",s.nesting=1,s.markup="~~",s.content="",s=t.tokens[a.token],s.type="s_close",s.tag="s",s.nesting=-1,s.markup="~~",s.content="",t.tokens[a.token-1].type==="text"&&t.tokens[a.token-1].content==="~"&&i.push(a.token-1));for(;i.length;){for(n=i.pop(),r=n+1;r<t.tokens.length&&t.tokens[r].type==="s_close";)r++;r--,n!==r&&(s=t.tokens[r],t.tokens[r]=t.tokens[n],t.tokens[n]=s)}}Fs.postProcess=function(e){var n,r=e.tokens_meta,o=e.tokens_meta.length;for(I2(e,e.delimiters),n=0;n<o;n++)r[n]&&r[n].delimiters&&I2(e,r[n].delimiters)};var Bs={};Bs.tokenize=function(e,n){var r,o,a,s=e.pos,i=e.src.charCodeAt(s);if(n||i!==95&&i!==42)return!1;for(o=e.scanDelims(e.pos,i===42),r=0;r<o.length;r++)a=e.push("text","",0),a.content=String.fromCharCode(i),e.delimiters.push({marker:i,length:o.length,token:e.tokens.length-1,end:-1,open:o.can_open,close:o.can_close});return e.pos+=o.length,!0};function M2(t,e){var n,r,o,a,s,i,l=e.length;for(n=l-1;n>=0;n--)r=e[n],!(r.marker!==95&&r.marker!==42)&&r.end!==-1&&(o=e[r.end],i=n>0&&e[n-1].end===r.end+1&&e[n-1].marker===r.marker&&e[n-1].token===r.token-1&&e[r.end+1].token===o.token+1,s=String.fromCharCode(r.marker),a=t.tokens[r.token],a.type=i?"strong_open":"em_open",a.tag=i?"strong":"em",a.nesting=1,a.markup=i?s+s:s,a.content="",a=t.tokens[o.token],a.type=i?"strong_close":"em_close",a.tag=i?"strong":"em",a.nesting=-1,a.markup=i?s+s:s,a.content="",i&&(t.tokens[e[n-1].token].content="",t.tokens[e[r.end+1].token].content="",n--))}Bs.postProcess=function(e){var n,r=e.tokens_meta,o=e.tokens_meta.length;for(M2(e,e.delimiters),n=0;n<o;n++)r[n]&&r[n].delimiters&&M2(e,r[n].delimiters)};var Ey=ie.normalizeReference,Pu=ie.isSpace,by=function(e,n){var r,o,a,s,i,l,u,c,p,d="",f="",b=e.pos,A=e.posMax,y=e.pos,h=!0;if(e.src.charCodeAt(e.pos)!==91||(i=e.pos+1,s=e.md.helpers.parseLinkLabel(e,e.pos,!0),s<0))return!1;if(l=s+1,l<A&&e.src.charCodeAt(l)===40){for(h=!1,l++;l<A&&(o=e.src.charCodeAt(l),!(!Pu(o)&&o!==10));l++);if(l>=A)return!1;if(y=l,u=e.md.helpers.parseLinkDestination(e.src,l,e.posMax),u.ok){for(d=e.md.normalizeLink(u.str),e.md.validateLink(d)?l=u.pos:d="",y=l;l<A&&(o=e.src.charCodeAt(l),!(!Pu(o)&&o!==10));l++);if(u=e.md.helpers.parseLinkTitle(e.src,l,e.posMax),l<A&&y!==l&&u.ok)for(f=u.str,l=u.pos;l<A&&(o=e.src.charCodeAt(l),!(!Pu(o)&&o!==10));l++);}(l>=A||e.src.charCodeAt(l)!==41)&&(h=!0),l++}if(h){if(typeof e.env.references>"u")return!1;if(l<A&&e.src.charCodeAt(l)===91?(y=l+1,l=e.md.helpers.parseLinkLabel(e,l),l>=0?a=e.src.slice(y,l++):l=s+1):l=s+1,a||(a=e.src.slice(i,s)),c=e.env.references[Ey(a)],!c)return e.pos=b,!1;d=c.href,f=c.title}return n||(e.pos=i,e.posMax=s,p=e.push("link_open","a",1),p.attrs=r=[["href",d]],f&&r.push(["title",f]),e.linkLevel++,e.md.inline.tokenize(e),e.linkLevel--,p=e.push("link_close","a",-1)),e.pos=l,e.posMax=A,!0},Ay=ie.normalizeReference,Uu=ie.isSpace,_y=function(e,n){var r,o,a,s,i,l,u,c,p,d,f,b,A,y="",h=e.pos,g=e.posMax;if(e.src.charCodeAt(e.pos)!==33||e.src.charCodeAt(e.pos+1)!==91||(l=e.pos+2,i=e.md.helpers.parseLinkLabel(e,e.pos+1,!1),i<0))return!1;if(u=i+1,u<g&&e.src.charCodeAt(u)===40){for(u++;u<g&&(o=e.src.charCodeAt(u),!(!Uu(o)&&o!==10));u++);if(u>=g)return!1;for(A=u,p=e.md.helpers.parseLinkDestination(e.src,u,e.posMax),p.ok&&(y=e.md.normalizeLink(p.str),e.md.validateLink(y)?u=p.pos:y=""),A=u;u<g&&(o=e.src.charCodeAt(u),!(!Uu(o)&&o!==10));u++);if(p=e.md.helpers.parseLinkTitle(e.src,u,e.posMax),u<g&&A!==u&&p.ok)for(d=p.str,u=p.pos;u<g&&(o=e.src.charCodeAt(u),!(!Uu(o)&&o!==10));u++);else d="";if(u>=g||e.src.charCodeAt(u)!==41)return e.pos=h,!1;u++}else{if(typeof e.env.references>"u")return!1;if(u<g&&e.src.charCodeAt(u)===91?(A=u+1,u=e.md.helpers.parseLinkLabel(e,u),u>=0?s=e.src.slice(A,u++):u=i+1):u=i+1,s||(s=e.src.slice(l,i)),c=e.env.references[Ay(s)],!c)return e.pos=h,!1;y=c.href,d=c.title}return n||(a=e.src.slice(l,i),e.md.inline.parse(a,e.md,e.env,b=[]),f=e.push("image","img",0),f.attrs=r=[["src",y],["alt",""]],f.children=b,f.content=a,d&&r.push(["title",d])),e.pos=u,e.posMax=g,!0},vy=/^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/,yy=/^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/,Dy=function(e,n){var r,o,a,s,i,l,u=e.pos;if(e.src.charCodeAt(u)!==60)return!1;for(i=e.pos,l=e.posMax;;){if(++u>=l||(s=e.src.charCodeAt(u),s===60))return!1;if(s===62)break}return r=e.src.slice(i+1,u),yy.test(r)?(o=e.md.normalizeLink(r),e.md.validateLink(o)?(n||(a=e.push("link_open","a",1),a.attrs=[["href",o]],a.markup="autolink",a.info="auto",a=e.push("text","",0),a.content=e.md.normalizeLinkText(r),a=e.push("link_close","a",-1),a.markup="autolink",a.info="auto"),e.pos+=r.length+2,!0):!1):vy.test(r)?(o=e.md.normalizeLink("mailto:"+r),e.md.validateLink(o)?(n||(a=e.push("link_open","a",1),a.attrs=[["href",o]],a.markup="autolink",a.info="auto",a=e.push("text","",0),a.content=e.md.normalizeLinkText(r),a=e.push("link_close","a",-1),a.markup="autolink",a.info="auto"),e.pos+=r.length+2,!0):!1):!1},Cy=Os.HTML_TAG_RE;function Sy(t){return/^<a[>\s]/i.test(t)}function Ty(t){return/^<\/a\s*>/i.test(t)}function Ny(t){var e=t|32;return e>=97&&e<=122}var wy=function(e,n){var r,o,a,s,i=e.pos;return!e.md.options.html||(a=e.posMax,e.src.charCodeAt(i)!==60||i+2>=a)||(r=e.src.charCodeAt(i+1),r!==33&&r!==63&&r!==47&&!Ny(r))||(o=e.src.slice(i).match(Cy),!o)?!1:(n||(s=e.push("html_inline","",0),s.content=o[0],Sy(s.content)&&e.linkLevel++,Ty(s.content)&&e.linkLevel--),e.pos+=o[0].length,!0)},F2=t2,xy=ie.has,Ry=ie.isValidEntityCode,B2=ie.fromCodePoint,Ly=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,Oy=/^&([a-z][a-z0-9]{1,31});/i,ky=function(e,n){var r,o,a,s,i=e.pos,l=e.posMax;if(e.src.charCodeAt(i)!==38||i+1>=l)return!1;if(r=e.src.charCodeAt(i+1),r===35){if(a=e.src.slice(i).match(Ly),a)return n||(o=a[1][0].toLowerCase()==="x"?parseInt(a[1].slice(1),16):parseInt(a[1],10),s=e.push("text_special","",0),s.content=Ry(o)?B2(o):B2(65533),s.markup=a[0],s.info="entity"),e.pos+=a[0].length,!0}else if(a=e.src.slice(i).match(Oy),a&&xy(F2,a[1]))return n||(s=e.push("text_special","",0),s.content=F2[a[1]],s.markup=a[0],s.info="entity"),e.pos+=a[0].length,!0;return!1};function P2(t){var e,n,r,o,a,s,i,l,u={},c=t.length;if(c){var p=0,d=-2,f=[];for(e=0;e<c;e++)if(r=t[e],f.push(0),(t[p].marker!==r.marker||d!==r.token-1)&&(p=e),d=r.token,r.length=r.length||0,!!r.close){for(u.hasOwnProperty(r.marker)||(u[r.marker]=[-1,-1,-1,-1,-1,-1]),a=u[r.marker][(r.open?3:0)+r.length%3],n=p-f[p]-1,s=n;n>a;n-=f[n]+1)if(o=t[n],o.marker===r.marker&&o.open&&o.end<0&&(i=!1,(o.close||r.open)&&(o.length+r.length)%3===0&&(o.length%3!==0||r.length%3!==0)&&(i=!0),!i)){l=n>0&&!t[n-1].open?f[n-1]+1:0,f[e]=e-n+l,f[n]=l,r.open=!1,o.end=e,o.close=!1,s=-1,d=-2;break}s!==-1&&(u[r.marker][(r.open?3:0)+(r.length||0)%3]=s)}}}var Iy=function(e){var n,r=e.tokens_meta,o=e.tokens_meta.length;for(P2(e.delimiters),n=0;n<o;n++)r[n]&&r[n].delimiters&&P2(r[n].delimiters)},My=function(e){var n,r,o=0,a=e.tokens,s=e.tokens.length;for(n=r=0;n<s;n++)a[n].nesting<0&&o--,a[n].level=o,a[n].nesting>0&&o++,a[n].type==="text"&&n+1<s&&a[n+1].type==="text"?a[n+1].content=a[n].content+a[n+1].content:(n!==r&&(a[r]=a[n]),r++);n!==r&&(a.length=r)},qu=Ou,U2=ie.isWhiteSpace,q2=ie.isPunctChar,H2=ie.isMdAsciiPunct;function Ho(t,e,n,r){this.src=t,this.env=n,this.md=e,this.tokens=r,this.tokens_meta=Array(r.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[],this.backticks={},this.backticksScanned=!1,this.linkLevel=0}Ho.prototype.pushPending=function(){var t=new qu("text","",0);return t.content=this.pending,t.level=this.pendingLevel,this.tokens.push(t),this.pending="",t},Ho.prototype.push=function(t,e,n){this.pending&&this.pushPending();var r=new qu(t,e,n),o=null;return n<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),r.level=this.level,n>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],o={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(r),this.tokens_meta.push(o),r},Ho.prototype.scanDelims=function(t,e){var n=t,r,o,a,s,i,l,u,c,p,d=!0,f=!0,b=this.posMax,A=this.src.charCodeAt(t);for(r=t>0?this.src.charCodeAt(t-1):32;n<b&&this.src.charCodeAt(n)===A;)n++;return a=n-t,o=n<b?this.src.charCodeAt(n):32,u=H2(r)||q2(String.fromCharCode(r)),p=H2(o)||q2(String.fromCharCode(o)),l=U2(r),c=U2(o),c?d=!1:p&&(l||u||(d=!1)),l?f=!1:u&&(c||p||(f=!1)),e?(s=d,i=f):(s=d&&(!f||u),i=f&&(!d||p)),{can_open:s,can_close:i,length:a}},Ho.prototype.Token=qu;var Fy=Ho,V2=Lu,Hu=[["text",uy],["linkify",dy],["newline",fy],["escape",gy],["backticks",hy],["strikethrough",Fs.tokenize],["emphasis",Bs.tokenize],["link",by],["image",_y],["autolink",Dy],["html_inline",wy],["entity",ky]],Vu=[["balance_pairs",Iy],["strikethrough",Fs.postProcess],["emphasis",Bs.postProcess],["fragments_join",My]];function Vo(){var t;for(this.ruler=new V2,t=0;t<Hu.length;t++)this.ruler.push(Hu[t][0],Hu[t][1]);for(this.ruler2=new V2,t=0;t<Vu.length;t++)this.ruler2.push(Vu[t][0],Vu[t][1])}Vo.prototype.skipToken=function(t){var e,n,r=t.pos,o=this.ruler.getRules(""),a=o.length,s=t.md.options.maxNesting,i=t.cache;if(typeof i[r]<"u"){t.pos=i[r];return}if(t.level<s){for(n=0;n<a;n++)if(t.level++,e=o[n](t,!0),t.level--,e){if(r>=t.pos)throw new Error("inline rule didn't increment state.pos");break}}else t.pos=t.posMax;e||t.pos++,i[r]=t.pos},Vo.prototype.tokenize=function(t){for(var e,n,r,o=this.ruler.getRules(""),a=o.length,s=t.posMax,i=t.md.options.maxNesting;t.pos<s;){if(r=t.pos,t.level<i){for(n=0;n<a;n++)if(e=o[n](t,!1),e){if(r>=t.pos)throw new Error("inline rule didn't increment state.pos");break}}if(e){if(t.pos>=s)break;continue}t.pending+=t.src[t.pos++]}t.pending&&t.pushPending()},Vo.prototype.parse=function(t,e,n,r){var o,a,s,i=new this.State(t,e,n,r);for(this.tokenize(i),a=this.ruler2.getRules(""),s=a.length,o=0;o<s;o++)a[o](i)},Vo.prototype.State=Fy;var By=Vo,$u,$2;function Py(){return $2||($2=1,$u=function(t){var e={};t=t||{},e.src_Any=c2().source,e.src_Cc=p2().source,e.src_Z=g2().source,e.src_P=Tu.source,e.src_ZPCc=[e.src_Z,e.src_P,e.src_Cc].join("|"),e.src_ZCc=[e.src_Z,e.src_Cc].join("|");var n="[><｜]";return e.src_pseudo_letter="(?:(?!"+n+"|"+e.src_ZPCc+")"+e.src_Any+")",e.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",e.src_auth="(?:(?:(?!"+e.src_ZCc+"|[@/\\[\\]()]).)+@)?",e.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",e.src_host_terminator="(?=$|"+n+"|"+e.src_ZPCc+")(?!"+(t["---"]?"-(?!--)|":"-|")+"_|:\\d|\\.-|\\.(?!$|"+e.src_ZPCc+"))",e.src_path="(?:[/?#](?:(?!"+e.src_ZCc+"|"+n+`|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!`+e.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+e.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+e.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+e.src_ZCc+`|["]).)+\\"|\\'(?:(?!`+e.src_ZCc+"|[']).)+\\'|\\'(?="+e.src_pseudo_letter+"|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!"+e.src_ZCc+"|[.]|$)|"+(t["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+",(?!"+e.src_ZCc+"|$)|;(?!"+e.src_ZCc+"|$)|\\!+(?!"+e.src_ZCc+"|[!]|$)|\\?(?!"+e.src_ZCc+"|[?]|$))+|\\/)?",e.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',e.src_xn="xn--[a-z0-9\\-]{1,59}",e.src_domain_root="(?:"+e.src_xn+"|"+e.src_pseudo_letter+"{1,63})",e.src_domain="(?:"+e.src_xn+"|(?:"+e.src_pseudo_letter+")|(?:"+e.src_pseudo_letter+"(?:-|"+e.src_pseudo_letter+"){0,61}"+e.src_pseudo_letter+"))",e.src_host="(?:(?:(?:(?:"+e.src_domain+")\\.)*"+e.src_domain+"))",e.tpl_host_fuzzy="(?:"+e.src_ip4+"|(?:(?:(?:"+e.src_domain+")\\.)+(?:%TLDS%)))",e.tpl_host_no_ip_fuzzy="(?:(?:(?:"+e.src_domain+")\\.)+(?:%TLDS%))",e.src_host_strict=e.src_host+e.src_host_terminator,e.tpl_host_fuzzy_strict=e.tpl_host_fuzzy+e.src_host_terminator,e.src_host_port_strict=e.src_host+e.src_port+e.src_host_terminator,e.tpl_host_port_fuzzy_strict=e.tpl_host_fuzzy+e.src_port+e.src_host_terminator,e.tpl_host_port_no_ip_fuzzy_strict=e.tpl_host_no_ip_fuzzy+e.src_port+e.src_host_terminator,e.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+e.src_ZPCc+"|>|$))",e.tpl_email_fuzzy="(^|"+n+'|"|\\(|'+e.src_ZCc+")("+e.src_email_name+"@"+e.tpl_host_fuzzy_strict+")",e.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+e.src_ZPCc+"))((?![$+<=>^`|｜])"+e.tpl_host_port_fuzzy_strict+e.src_path+")",e.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+e.src_ZPCc+"))((?![$+<=>^`|｜])"+e.tpl_host_port_no_ip_fuzzy_strict+e.src_path+")",e}),$u}function zu(t){var e=Array.prototype.slice.call(arguments,1);return e.forEach(function(n){n&&Object.keys(n).forEach(function(r){t[r]=n[r]})}),t}function Ps(t){return Object.prototype.toString.call(t)}function Uy(t){return Ps(t)==="[object String]"}function qy(t){return Ps(t)==="[object Object]"}function Hy(t){return Ps(t)==="[object RegExp]"}function z2(t){return Ps(t)==="[object Function]"}function Vy(t){return t.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var G2={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1};function $y(t){return Object.keys(t||{}).reduce(function(e,n){return e||G2.hasOwnProperty(n)},!1)}var zy={"http:":{validate:function(t,e,n){var r=t.slice(e);return n.re.http||(n.re.http=new RegExp("^\\/\\/"+n.re.src_auth+n.re.src_host_port_strict+n.re.src_path,"i")),n.re.http.test(r)?r.match(n.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(t,e,n){var r=t.slice(e);return n.re.no_http||(n.re.no_http=new RegExp("^"+n.re.src_auth+"(?:localhost|(?:(?:"+n.re.src_domain+")\\.)+"+n.re.src_domain_root+")"+n.re.src_port+n.re.src_host_terminator+n.re.src_path,"i")),n.re.no_http.test(r)?e>=3&&t[e-3]===":"||e>=3&&t[e-3]==="/"?0:r.match(n.re.no_http)[0].length:0}},"mailto:":{validate:function(t,e,n){var r=t.slice(e);return n.re.mailto||(n.re.mailto=new RegExp("^"+n.re.src_email_name+"@"+n.re.src_host_strict,"i")),n.re.mailto.test(r)?r.match(n.re.mailto)[0].length:0}}},Gy="a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]",Zy="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function jy(t){t.__index__=-1,t.__text_cache__=""}function Wy(t){return function(e,n){var r=e.slice(n);return t.test(r)?r.match(t)[0].length:0}}function Z2(){return function(t,e){e.normalize(t)}}function Us(t){var e=t.re=Py()(t.__opts__),n=t.__tlds__.slice();t.onCompile(),t.__tlds_replaced__||n.push(Gy),n.push(e.src_xn),e.src_tlds=n.join("|");function r(i){return i.replace("%TLDS%",e.src_tlds)}e.email_fuzzy=RegExp(r(e.tpl_email_fuzzy),"i"),e.link_fuzzy=RegExp(r(e.tpl_link_fuzzy),"i"),e.link_no_ip_fuzzy=RegExp(r(e.tpl_link_no_ip_fuzzy),"i"),e.host_fuzzy_test=RegExp(r(e.tpl_host_fuzzy_test),"i");var o=[];t.__compiled__={};function a(i,l){throw new Error('(LinkifyIt) Invalid schema "'+i+'": '+l)}Object.keys(t.__schemas__).forEach(function(i){var l=t.__schemas__[i];if(l!==null){var u={validate:null,link:null};if(t.__compiled__[i]=u,qy(l)){Hy(l.validate)?u.validate=Wy(l.validate):z2(l.validate)?u.validate=l.validate:a(i,l),z2(l.normalize)?u.normalize=l.normalize:l.normalize?a(i,l):u.normalize=Z2();return}if(Uy(l)){o.push(i);return}a(i,l)}}),o.forEach(function(i){t.__compiled__[t.__schemas__[i]]&&(t.__compiled__[i].validate=t.__compiled__[t.__schemas__[i]].validate,t.__compiled__[i].normalize=t.__compiled__[t.__schemas__[i]].normalize)}),t.__compiled__[""]={validate:null,normalize:Z2()};var s=Object.keys(t.__compiled__).filter(function(i){return i.length>0&&t.__compiled__[i]}).map(Vy).join("|");t.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+e.src_ZPCc+"))("+s+")","i"),t.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+e.src_ZPCc+"))("+s+")","ig"),t.re.schema_at_start=RegExp("^"+t.re.schema_search.source,"i"),t.re.pretest=RegExp("("+t.re.schema_test.source+")|("+t.re.host_fuzzy_test.source+")|@","i"),jy(t)}function Ky(t,e){var n=t.__index__,r=t.__last_index__,o=t.__text_cache__.slice(n,r);this.schema=t.__schema__.toLowerCase(),this.index=n+e,this.lastIndex=r+e,this.raw=o,this.text=o,this.url=o}function Gu(t,e){var n=new Ky(t,e);return t.__compiled__[n.schema].normalize(n,t),n}function ht(t,e){if(!(this instanceof ht))return new ht(t,e);e||$y(t)&&(e=t,t={}),this.__opts__=zu({},G2,e),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=zu({},zy,t),this.__compiled__={},this.__tlds__=Zy,this.__tlds_replaced__=!1,this.re={},Us(this)}ht.prototype.add=function(e,n){return this.__schemas__[e]=n,Us(this),this},ht.prototype.set=function(e){return this.__opts__=zu(this.__opts__,e),this},ht.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return!1;var n,r,o,a,s,i,l,u,c;if(this.re.schema_test.test(e)){for(l=this.re.schema_search,l.lastIndex=0;(n=l.exec(e))!==null;)if(a=this.testSchemaAt(e,n[2],l.lastIndex),a){this.__schema__=n[2],this.__index__=n.index+n[1].length,this.__last_index__=n.index+n[0].length+a;break}}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(u=e.search(this.re.host_fuzzy_test),u>=0&&(this.__index__<0||u<this.__index__)&&(r=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))!==null&&(s=r.index+r[1].length,(this.__index__<0||s<this.__index__)&&(this.__schema__="",this.__index__=s,this.__last_index__=r.index+r[0].length))),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&(c=e.indexOf("@"),c>=0&&(o=e.match(this.re.email_fuzzy))!==null&&(s=o.index+o[1].length,i=o.index+o[0].length,(this.__index__<0||s<this.__index__||s===this.__index__&&i>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=s,this.__last_index__=i))),this.__index__>=0},ht.prototype.pretest=function(e){return this.re.pretest.test(e)},ht.prototype.testSchemaAt=function(e,n,r){return this.__compiled__[n.toLowerCase()]?this.__compiled__[n.toLowerCase()].validate(e,r,this):0},ht.prototype.match=function(e){var n=0,r=[];this.__index__>=0&&this.__text_cache__===e&&(r.push(Gu(this,n)),n=this.__last_index__);for(var o=n?e.slice(n):e;this.test(o);)r.push(Gu(this,n)),o=o.slice(this.__last_index__),n+=this.__last_index__;return r.length?r:null},ht.prototype.matchAtStart=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return null;var n=this.re.schema_at_start.exec(e);if(!n)return null;var r=this.testSchemaAt(e,n[2],n[0].length);return r?(this.__schema__=n[2],this.__index__=n.index+n[1].length,this.__last_index__=n.index+n[0].length+r,Gu(this,0)):null},ht.prototype.tlds=function(e,n){return e=Array.isArray(e)?e:[e],n?(this.__tlds__=this.__tlds__.concat(e).sort().filter(function(r,o,a){return r!==a[o-1]}).reverse(),Us(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,Us(this),this)},ht.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),e.schema==="mailto:"&&!/^mailto:/i.test(e.url)&&(e.url="mailto:"+e.url)},ht.prototype.onCompile=function(){};var Yy=ht;const Pr=2147483647,Kt=36,Zu=1,$o=26,Xy=38,Qy=700,j2=72,W2=128,K2="-",Jy=/^xn--/,eD=/[^\0-\x7F]/,tD=/[\x2E\u3002\uFF0E\uFF61]/g,nD={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},ju=Kt-Zu,Yt=Math.floor,Wu=String.fromCharCode;function On(t){throw new RangeError(nD[t])}function rD(t,e){const n=[];let r=t.length;for(;r--;)n[r]=e(t[r]);return n}function Y2(t,e){const n=t.split("@");let r="";n.length>1&&(r=n[0]+"@",t=n[1]),t=t.replace(tD,".");const o=t.split("."),a=rD(o,e).join(".");return r+a}function Ku(t){const e=[];let n=0;const r=t.length;for(;n<r;){const o=t.charCodeAt(n++);if(o>=55296&&o<=56319&&n<r){const a=t.charCodeAt(n++);(a&64512)==56320?e.push(((o&1023)<<10)+(a&1023)+65536):(e.push(o),n--)}else e.push(o)}return e}const X2=t=>String.fromCodePoint(...t),oD=function(t){return t>=48&&t<58?26+(t-48):t>=65&&t<91?t-65:t>=97&&t<123?t-97:Kt},Q2=function(t,e){return t+22+75*(t<26)-((e!=0)<<5)},J2=function(t,e,n){let r=0;for(t=n?Yt(t/Qy):t>>1,t+=Yt(t/e);t>ju*$o>>1;r+=Kt)t=Yt(t/ju);return Yt(r+(ju+1)*t/(t+Xy))},Yu=function(t){const e=[],n=t.length;let r=0,o=W2,a=j2,s=t.lastIndexOf(K2);s<0&&(s=0);for(let i=0;i<s;++i)t.charCodeAt(i)>=128&&On("not-basic"),e.push(t.charCodeAt(i));for(let i=s>0?s+1:0;i<n;){const l=r;for(let c=1,p=Kt;;p+=Kt){i>=n&&On("invalid-input");const d=oD(t.charCodeAt(i++));d>=Kt&&On("invalid-input"),d>Yt((Pr-r)/c)&&On("overflow"),r+=d*c;const f=p<=a?Zu:p>=a+$o?$o:p-a;if(d<f)break;const b=Kt-f;c>Yt(Pr/b)&&On("overflow"),c*=b}const u=e.length+1;a=J2(r-l,u,l==0),Yt(r/u)>Pr-o&&On("overflow"),o+=Yt(r/u),r%=u,e.splice(r++,0,o)}return String.fromCodePoint(...e)},Xu=function(t){const e=[];t=Ku(t);const n=t.length;let r=W2,o=0,a=j2;for(const l of t)l<128&&e.push(Wu(l));const s=e.length;let i=s;for(s&&e.push(K2);i<n;){let l=Pr;for(const c of t)c>=r&&c<l&&(l=c);const u=i+1;l-r>Yt((Pr-o)/u)&&On("overflow"),o+=(l-r)*u,r=l;for(const c of t)if(c<r&&++o>Pr&&On("overflow"),c===r){let p=o;for(let d=Kt;;d+=Kt){const f=d<=a?Zu:d>=a+$o?$o:d-a;if(p<f)break;const b=p-f,A=Kt-f;e.push(Wu(Q2(f+b%A,0))),p=Yt(b/A)}e.push(Wu(Q2(p,0))),a=J2(o,u,i===s),o=0,++i}++o,++r}return e.join("")},em=function(t){return Y2(t,function(e){return Jy.test(e)?Yu(e.slice(4).toLowerCase()):e})},tm=function(t){return Y2(t,function(e){return eD.test(e)?"xn--"+Xu(e):e})},aD=s1(Object.freeze(Object.defineProperty({__proto__:null,decode:Yu,default:{version:"2.3.1",ucs2:{decode:Ku,encode:X2},decode:Yu,encode:Xu,toASCII:tm,toUnicode:em},encode:Xu,toASCII:tm,toUnicode:em,ucs2decode:Ku,ucs2encode:X2},Symbol.toStringTag,{value:"Module"})));var sD={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}},iD={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline","text_join"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","fragments_join"]}}},lD={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline","text_join"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","fragments_join"]}}},zo=ie,uD=xs,cD=ov,dD=wv,pD=iy,fD=By,mD=Yy,Qn=Ir,nm=aD,gD={default:sD,zero:iD,commonmark:lD},hD=/^(vbscript|javascript|file|data):/,ED=/^data:image\/(gif|png|jpeg|webp);/;function bD(t){var e=t.trim().toLowerCase();return hD.test(e)?!!ED.test(e):!0}var rm=["http:","https:","mailto:"];function AD(t){var e=Qn.parse(t,!0);if(e.hostname&&(!e.protocol||rm.indexOf(e.protocol)>=0))try{e.hostname=nm.toASCII(e.hostname)}catch{}return Qn.encode(Qn.format(e))}function _D(t){var e=Qn.parse(t,!0);if(e.hostname&&(!e.protocol||rm.indexOf(e.protocol)>=0))try{e.hostname=nm.toUnicode(e.hostname)}catch{}return Qn.decode(Qn.format(e),Qn.decode.defaultChars+"%")}function Nt(t,e){if(!(this instanceof Nt))return new Nt(t,e);e||zo.isString(t)||(e=t||{},t="default"),this.inline=new fD,this.block=new pD,this.core=new dD,this.renderer=new cD,this.linkify=new mD,this.validateLink=bD,this.normalizeLink=AD,this.normalizeLinkText=_D,this.utils=zo,this.helpers=zo.assign({},uD),this.options={},this.configure(t),e&&this.set(e)}Nt.prototype.set=function(t){return zo.assign(this.options,t),this},Nt.prototype.configure=function(t){var e=this,n;if(zo.isString(t)&&(n=t,t=gD[n],!t))throw new Error('Wrong `markdown-it` preset "'+n+'", check name');if(!t)throw new Error("Wrong `markdown-it` preset, can't be empty");return t.options&&e.set(t.options),t.components&&Object.keys(t.components).forEach(function(r){t.components[r].rules&&e[r].ruler.enableOnly(t.components[r].rules),t.components[r].rules2&&e[r].ruler2.enableOnly(t.components[r].rules2)}),this},Nt.prototype.enable=function(t,e){var n=[];Array.isArray(t)||(t=[t]),["core","block","inline"].forEach(function(o){n=n.concat(this[o].ruler.enable(t,!0))},this),n=n.concat(this.inline.ruler2.enable(t,!0));var r=t.filter(function(o){return n.indexOf(o)<0});if(r.length&&!e)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+r);return this},Nt.prototype.disable=function(t,e){var n=[];Array.isArray(t)||(t=[t]),["core","block","inline"].forEach(function(o){n=n.concat(this[o].ruler.disable(t,!0))},this),n=n.concat(this.inline.ruler2.disable(t,!0));var r=t.filter(function(o){return n.indexOf(o)<0});if(r.length&&!e)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+r);return this},Nt.prototype.use=function(t){var e=[this].concat(Array.prototype.slice.call(arguments,1));return t.apply(t,e),this},Nt.prototype.parse=function(t,e){if(typeof t!="string")throw new Error("Input data should be a String");var n=new this.core.State(t,this,e);return this.core.process(n),n.tokens},Nt.prototype.render=function(t,e){return e=e||{},this.renderer.render(this.parse(t,e),this.options,e)},Nt.prototype.parseInline=function(t,e){var n=new this.core.State(t,this,e);return n.inlineMode=!0,this.core.process(n),n.tokens},Nt.prototype.renderInline=function(t,e){return e=e||{},this.renderer.render(this.parseInline(t,e),this.options,e)};var vD=Nt,yD=vD;const DD=Ht(yD);function om(t){return t instanceof Map?t.clear=t.delete=t.set=function(){throw new Error("map is read-only")}:t instanceof Set&&(t.add=t.clear=t.delete=function(){throw new Error("set is read-only")}),Object.freeze(t),Object.getOwnPropertyNames(t).forEach(e=>{const n=t[e],r=typeof n;(r==="object"||r==="function")&&!Object.isFrozen(n)&&om(n)}),t}class am{constructor(e){e.data===void 0&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function sm(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function kn(t,...e){const n=Object.create(null);for(const r in t)n[r]=t[r];return e.forEach(function(r){for(const o in r)n[o]=r[o]}),n}const CD="</span>",im=t=>!!t.scope,SD=(t,{prefix:e})=>{if(t.startsWith("language:"))return t.replace("language:","language-");if(t.includes(".")){const n=t.split(".");return[`${e}${n.shift()}`,...n.map((r,o)=>`${r}${"_".repeat(o+1)}`)].join(" ")}return`${e}${t}`};class TD{constructor(e,n){this.buffer="",this.classPrefix=n.classPrefix,e.walk(this)}addText(e){this.buffer+=sm(e)}openNode(e){if(!im(e))return;const n=SD(e.scope,{prefix:this.classPrefix});this.span(n)}closeNode(e){im(e)&&(this.buffer+=CD)}value(){return this.buffer}span(e){this.buffer+=`<span class="${e}">`}}const lm=(t={})=>{const e={children:[]};return Object.assign(e,t),e};class Qu{constructor(){this.rootNode=lm(),this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){this.top.children.push(e)}openNode(e){const n=lm({scope:e});this.add(n),this.stack.push(n)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,n){return typeof n=="string"?e.addText(n):n.children&&(e.openNode(n),n.children.forEach(r=>this._walk(e,r)),e.closeNode(n)),e}static _collapse(e){typeof e!="string"&&e.children&&(e.children.every(n=>typeof n=="string")?e.children=[e.children.join("")]:e.children.forEach(n=>{Qu._collapse(n)}))}}class ND extends Qu{constructor(e){super(),this.options=e}addText(e){e!==""&&this.add(e)}startScope(e){this.openNode(e)}endScope(){this.closeNode()}__addSublanguage(e,n){const r=e.root;n&&(r.scope=`language:${n}`),this.add(r)}toHTML(){return new TD(this,this.options).value()}finalize(){return this.closeAllNodes(),!0}}function Go(t){return t?typeof t=="string"?t:t.source:null}function um(t){return Jn("(?=",t,")")}function wD(t){return Jn("(?:",t,")*")}function xD(t){return Jn("(?:",t,")?")}function Jn(...t){return t.map(n=>Go(n)).join("")}function RD(t){const e=t[t.length-1];return typeof e=="object"&&e.constructor===Object?(t.splice(t.length-1,1),e):{}}function Ju(...t){return"("+(RD(t).capture?"":"?:")+t.map(r=>Go(r)).join("|")+")"}function cm(t){return new RegExp(t.toString()+"|").exec("").length-1}function LD(t,e){const n=t&&t.exec(e);return n&&n.index===0}const OD=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;function ec(t,{joinWith:e}){let n=0;return t.map(r=>{n+=1;const o=n;let a=Go(r),s="";for(;a.length>0;){const i=OD.exec(a);if(!i){s+=a;break}s+=a.substring(0,i.index),a=a.substring(i.index+i[0].length),i[0][0]==="\\"&&i[1]?s+="\\"+String(Number(i[1])+o):(s+=i[0],i[0]==="("&&n++)}return s}).map(r=>`(${r})`).join(e)}const kD=/\b\B/,dm="[a-zA-Z]\\w*",tc="[a-zA-Z_]\\w*",pm="\\b\\d+(\\.\\d+)?",fm="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",mm="\\b(0b[01]+)",ID="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",MD=(t={})=>{const e=/^#![ ]*\//;return t.binary&&(t.begin=Jn(e,/.*\b/,t.binary,/\b.*/)),kn({scope:"meta",begin:e,end:/$/,relevance:0,"on:begin":(n,r)=>{n.index!==0&&r.ignoreMatch()}},t)},Zo={begin:"\\\\[\\s\\S]",relevance:0},FD={scope:"string",begin:"'",end:"'",illegal:"\\n",contains:[Zo]},BD={scope:"string",begin:'"',end:'"',illegal:"\\n",contains:[Zo]},PD={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},qs=function(t,e,n={}){const r=kn({scope:"comment",begin:t,end:e,contains:[]},n);r.contains.push({scope:"doctag",begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0});const o=Ju("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/);return r.contains.push({begin:Jn(/[ ]+/,"(",o,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),r},UD=qs("//","$"),qD=qs("/\\*","\\*/"),HD=qs("#","$"),VD={scope:"number",begin:pm,relevance:0},$D={scope:"number",begin:fm,relevance:0},zD={scope:"number",begin:mm,relevance:0},GD={scope:"regexp",begin:/\/(?=[^/\n]*\/)/,end:/\/[gimuy]*/,contains:[Zo,{begin:/\[/,end:/\]/,relevance:0,contains:[Zo]}]},ZD={scope:"title",begin:dm,relevance:0},jD={scope:"title",begin:tc,relevance:0},WD={begin:"\\.\\s*"+tc,relevance:0};var Hs=Object.freeze({__proto__:null,APOS_STRING_MODE:FD,BACKSLASH_ESCAPE:Zo,BINARY_NUMBER_MODE:zD,BINARY_NUMBER_RE:mm,COMMENT:qs,C_BLOCK_COMMENT_MODE:qD,C_LINE_COMMENT_MODE:UD,C_NUMBER_MODE:$D,C_NUMBER_RE:fm,END_SAME_AS_BEGIN:function(t){return Object.assign(t,{"on:begin":(e,n)=>{n.data._beginMatch=e[1]},"on:end":(e,n)=>{n.data._beginMatch!==e[1]&&n.ignoreMatch()}})},HASH_COMMENT_MODE:HD,IDENT_RE:dm,MATCH_NOTHING_RE:kD,METHOD_GUARD:WD,NUMBER_MODE:VD,NUMBER_RE:pm,PHRASAL_WORDS_MODE:PD,QUOTE_STRING_MODE:BD,REGEXP_MODE:GD,RE_STARTERS_RE:ID,SHEBANG:MD,TITLE_MODE:ZD,UNDERSCORE_IDENT_RE:tc,UNDERSCORE_TITLE_MODE:jD});function KD(t,e){t.input[t.index-1]==="."&&e.ignoreMatch()}function YD(t,e){t.className!==void 0&&(t.scope=t.className,delete t.className)}function XD(t,e){e&&t.beginKeywords&&(t.begin="\\b("+t.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",t.__beforeBegin=KD,t.keywords=t.keywords||t.beginKeywords,delete t.beginKeywords,t.relevance===void 0&&(t.relevance=0))}function QD(t,e){Array.isArray(t.illegal)&&(t.illegal=Ju(...t.illegal))}function JD(t,e){if(t.match){if(t.begin||t.end)throw new Error("begin & end are not supported with match");t.begin=t.match,delete t.match}}function e3(t,e){t.relevance===void 0&&(t.relevance=1)}const t3=(t,e)=>{if(!t.beforeMatch)return;if(t.starts)throw new Error("beforeMatch cannot be used with starts");const n=Object.assign({},t);Object.keys(t).forEach(r=>{delete t[r]}),t.keywords=n.keywords,t.begin=Jn(n.beforeMatch,um(n.begin)),t.starts={relevance:0,contains:[Object.assign(n,{endsParent:!0})]},t.relevance=0,delete n.beforeMatch},n3=["of","and","for","in","not","or","if","then","parent","list","value"],r3="keyword";function gm(t,e,n=r3){const r=Object.create(null);return typeof t=="string"?o(n,t.split(" ")):Array.isArray(t)?o(n,t):Object.keys(t).forEach(function(a){Object.assign(r,gm(t[a],e,a))}),r;function o(a,s){e&&(s=s.map(i=>i.toLowerCase())),s.forEach(function(i){const l=i.split("|");r[l[0]]=[a,o3(l[0],l[1])]})}}function o3(t,e){return e?Number(e):a3(t)?0:1}function a3(t){return n3.includes(t.toLowerCase())}const hm={},er=t=>{console.error(t)},Em=(t,...e)=>{console.log(`WARN: ${t}`,...e)},Ur=(t,e)=>{hm[`${t}/${e}`]||(console.log(`Deprecated as of ${t}. ${e}`),hm[`${t}/${e}`]=!0)},Vs=new Error;function bm(t,e,{key:n}){let r=0;const o=t[n],a={},s={};for(let i=1;i<=e.length;i++)s[i+r]=o[i],a[i+r]=!0,r+=cm(e[i-1]);t[n]=s,t[n]._emit=a,t[n]._multi=!0}function s3(t){if(Array.isArray(t.begin)){if(t.skip||t.excludeBegin||t.returnBegin)throw er("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),Vs;if(typeof t.beginScope!="object"||t.beginScope===null)throw er("beginScope must be object"),Vs;bm(t,t.begin,{key:"beginScope"}),t.begin=ec(t.begin,{joinWith:""})}}function i3(t){if(Array.isArray(t.end)){if(t.skip||t.excludeEnd||t.returnEnd)throw er("skip, excludeEnd, returnEnd not compatible with endScope: {}"),Vs;if(typeof t.endScope!="object"||t.endScope===null)throw er("endScope must be object"),Vs;bm(t,t.end,{key:"endScope"}),t.end=ec(t.end,{joinWith:""})}}function l3(t){t.scope&&typeof t.scope=="object"&&t.scope!==null&&(t.beginScope=t.scope,delete t.scope)}function u3(t){l3(t),typeof t.beginScope=="string"&&(t.beginScope={_wrap:t.beginScope}),typeof t.endScope=="string"&&(t.endScope={_wrap:t.endScope}),s3(t),i3(t)}function c3(t){function e(s,i){return new RegExp(Go(s),"m"+(t.case_insensitive?"i":"")+(t.unicodeRegex?"u":"")+(i?"g":""))}class n{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(i,l){l.position=this.position++,this.matchIndexes[this.matchAt]=l,this.regexes.push([l,i]),this.matchAt+=cm(i)+1}compile(){this.regexes.length===0&&(this.exec=()=>null);const i=this.regexes.map(l=>l[1]);this.matcherRe=e(ec(i,{joinWith:"|"}),!0),this.lastIndex=0}exec(i){this.matcherRe.lastIndex=this.lastIndex;const l=this.matcherRe.exec(i);if(!l)return null;const u=l.findIndex((p,d)=>d>0&&p!==void 0),c=this.matchIndexes[u];return l.splice(0,u),Object.assign(l,c)}}class r{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(i){if(this.multiRegexes[i])return this.multiRegexes[i];const l=new n;return this.rules.slice(i).forEach(([u,c])=>l.addRule(u,c)),l.compile(),this.multiRegexes[i]=l,l}resumingScanAtSamePosition(){return this.regexIndex!==0}considerAll(){this.regexIndex=0}addRule(i,l){this.rules.push([i,l]),l.type==="begin"&&this.count++}exec(i){const l=this.getMatcher(this.regexIndex);l.lastIndex=this.lastIndex;let u=l.exec(i);if(this.resumingScanAtSamePosition()&&!(u&&u.index===this.lastIndex)){const c=this.getMatcher(0);c.lastIndex=this.lastIndex+1,u=c.exec(i)}return u&&(this.regexIndex+=u.position+1,this.regexIndex===this.count&&this.considerAll()),u}}function o(s){const i=new r;return s.contains.forEach(l=>i.addRule(l.begin,{rule:l,type:"begin"})),s.terminatorEnd&&i.addRule(s.terminatorEnd,{type:"end"}),s.illegal&&i.addRule(s.illegal,{type:"illegal"}),i}function a(s,i){const l=s;if(s.isCompiled)return l;[YD,JD,u3,t3].forEach(c=>c(s,i)),t.compilerExtensions.forEach(c=>c(s,i)),s.__beforeBegin=null,[XD,QD,e3].forEach(c=>c(s,i)),s.isCompiled=!0;let u=null;return typeof s.keywords=="object"&&s.keywords.$pattern&&(s.keywords=Object.assign({},s.keywords),u=s.keywords.$pattern,delete s.keywords.$pattern),u=u||/\w+/,s.keywords&&(s.keywords=gm(s.keywords,t.case_insensitive)),l.keywordPatternRe=e(u,!0),i&&(s.begin||(s.begin=/\B|\b/),l.beginRe=e(l.begin),!s.end&&!s.endsWithParent&&(s.end=/\B|\b/),s.end&&(l.endRe=e(l.end)),l.terminatorEnd=Go(l.end)||"",s.endsWithParent&&i.terminatorEnd&&(l.terminatorEnd+=(s.end?"|":"")+i.terminatorEnd)),s.illegal&&(l.illegalRe=e(s.illegal)),s.contains||(s.contains=[]),s.contains=[].concat(...s.contains.map(function(c){return d3(c==="self"?s:c)})),s.contains.forEach(function(c){a(c,l)}),s.starts&&a(s.starts,i),l.matcher=o(l),l}if(t.compilerExtensions||(t.compilerExtensions=[]),t.contains&&t.contains.includes("self"))throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return t.classNameAliases=kn(t.classNameAliases||{}),a(t)}function Am(t){return t?t.endsWithParent||Am(t.starts):!1}function d3(t){return t.variants&&!t.cachedVariants&&(t.cachedVariants=t.variants.map(function(e){return kn(t,{variants:null},e)})),t.cachedVariants?t.cachedVariants:Am(t)?kn(t,{starts:t.starts?kn(t.starts):null}):Object.isFrozen(t)?kn(t):t}var p3="11.9.0";class f3 extends Error{constructor(e,n){super(e),this.name="HTMLInjectionError",this.html=n}}const nc=sm,_m=kn,vm=Symbol("nomatch"),m3=7,ym=function(t){const e=Object.create(null),n=Object.create(null),r=[];let o=!0;const a="Could not find the language '{}', did you forget to load/include a language module?",s={disableAutodetect:!0,name:"Plain text",contains:[]};let i={ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",cssSelector:"pre code",languages:null,__emitter:ND};function l(x){return i.noHighlightRe.test(x)}function u(x){let S=x.className+" ";S+=x.parentNode?x.parentNode.className:"";const C=i.languageDetectRe.exec(S);if(C){const L=H(C[1]);return L||(Em(a.replace("{}",C[1])),Em("Falling back to no-highlight mode for this block.",x)),L?C[1]:"no-highlight"}return S.split(/\s+/).find(L=>l(L)||H(L))}function c(x,S,C){let L="",k="";typeof S=="object"?(L=x,C=S.ignoreIllegals,k=S.language):(Ur("10.7.0","highlight(lang, code, ...args) has been deprecated."),Ur("10.7.0",`Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`),k=x,L=S),C===void 0&&(C=!0);const $={code:L,language:k};V("before:highlight",$);const j=$.result?$.result:p($.language,$.code,C);return j.code=$.code,V("after:highlight",j),j}function p(x,S,C,L){const k=Object.create(null);function $(P,z){return P.keywords[z]}function j(){if(!X.keywords){Ce.addText(se);return}let P=0;X.keywordPatternRe.lastIndex=0;let z=X.keywordPatternRe.exec(se),Q="";for(;z;){Q+=se.substring(P,z.index);const re=Te.case_insensitive?z[0].toLowerCase():z[0],he=$(X,re);if(he){const[We,na]=he;if(Ce.addText(Q),Q="",k[re]=(k[re]||0)+1,k[re]<=m3&&(qt+=na),We.startsWith("_"))Q+=z[0];else{const ra=Te.classNameAliases[We]||We;ue(z[0],ra)}}else Q+=z[0];P=X.keywordPatternRe.lastIndex,z=X.keywordPatternRe.exec(se)}Q+=se.substring(P),Ce.addText(Q)}function ge(){if(se==="")return;let P=null;if(typeof X.subLanguage=="string"){if(!e[X.subLanguage]){Ce.addText(se);return}P=p(X.subLanguage,se,!0,Zr[X.subLanguage]),Zr[X.subLanguage]=P._top}else P=f(se,X.subLanguage.length?X.subLanguage:null);X.relevance>0&&(qt+=P.relevance),Ce.__addSublanguage(P._emitter,P.language)}function pe(){X.subLanguage!=null?ge():j(),se=""}function ue(P,z){P!==""&&(Ce.startScope(z),Ce.addText(P),Ce.endScope())}function ce(P,z){let Q=1;const re=z.length-1;for(;Q<=re;){if(!P._emit[Q]){Q++;continue}const he=Te.classNameAliases[P[Q]]||P[Q],We=z[Q];he?ue(We,he):(se=We,j(),se=""),Q++}}function bt(P,z){return P.scope&&typeof P.scope=="string"&&Ce.openNode(Te.classNameAliases[P.scope]||P.scope),P.beginScope&&(P.beginScope._wrap?(ue(se,Te.classNameAliases[P.beginScope._wrap]||P.beginScope._wrap),se=""):P.beginScope._multi&&(ce(P.beginScope,z),se="")),X=Object.create(P,{parent:{value:X}}),X}function Ut(P,z,Q){let re=LD(P.endRe,Q);if(re){if(P["on:end"]){const he=new am(P);P["on:end"](z,he),he.isMatchIgnored&&(re=!1)}if(re){for(;P.endsParent&&P.parent;)P=P.parent;return P}}if(P.endsWithParent)return Ut(P.parent,z,Q)}function At(P){return X.matcher.regexIndex===0?(se+=P[0],1):(Wr=!0,0)}function je(P){const z=P[0],Q=P.rule,re=new am(Q),he=[Q.__beforeBegin,Q["on:begin"]];for(const We of he)if(We&&(We(P,re),re.isMatchIgnored))return At(z);return Q.skip?se+=z:(Q.excludeBegin&&(se+=z),pe(),!Q.returnBegin&&!Q.excludeBegin&&(se=z)),bt(Q,P),Q.returnBegin?0:z.length}function xt(P){const z=P[0],Q=S.substring(P.index),re=Ut(X,P,Q);if(!re)return vm;const he=X;X.endScope&&X.endScope._wrap?(pe(),ue(z,X.endScope._wrap)):X.endScope&&X.endScope._multi?(pe(),ce(X.endScope,P)):he.skip?se+=z:(he.returnEnd||he.excludeEnd||(se+=z),pe(),he.excludeEnd&&(se=z));do X.scope&&Ce.closeNode(),!X.skip&&!X.subLanguage&&(qt+=X.relevance),X=X.parent;while(X!==re.parent);return re.starts&&bt(re.starts,P),he.returnEnd?0:z.length}function ne(){const P=[];for(let z=X;z!==Te;z=z.parent)z.scope&&P.unshift(z.scope);P.forEach(z=>Ce.openNode(z))}let Oe={};function Be(P,z){const Q=z&&z[0];if(se+=P,Q==null)return pe(),0;if(Oe.type==="begin"&&z.type==="end"&&Oe.index===z.index&&Q===""){if(se+=S.slice(z.index,z.index+1),!o){const re=new Error(`0 width match regex (${x})`);throw re.languageName=x,re.badRule=Oe.rule,re}return 1}if(Oe=z,z.type==="begin")return je(z);if(z.type==="illegal"&&!C){const re=new Error('Illegal lexeme "'+Q+'" for mode "'+(X.scope||"<unnamed>")+'"');throw re.mode=X,re}else if(z.type==="end"){const re=xt(z);if(re!==vm)return re}if(z.type==="illegal"&&Q==="")return 1;if(jr>1e5&&jr>z.index*3)throw new Error("potential infinite loop, way more iterations than matches");return se+=Q,Q.length}const Te=H(x);if(!Te)throw er(a.replace("{}",x)),new Error('Unknown language: "'+x+'"');const si=c3(Te);let Gr="",X=L||si;const Zr={},Ce=new i.__emitter(i);ne();let se="",qt=0,Qt=0,jr=0,Wr=!1;try{if(Te.__emitTokens)Te.__emitTokens(S,Ce);else{for(X.matcher.considerAll();;){jr++,Wr?Wr=!1:X.matcher.considerAll(),X.matcher.lastIndex=Qt;const P=X.matcher.exec(S);if(!P)break;const z=S.substring(Qt,P.index),Q=Be(z,P);Qt=P.index+Q}Be(S.substring(Qt))}return Ce.finalize(),Gr=Ce.toHTML(),{language:x,value:Gr,relevance:qt,illegal:!1,_emitter:Ce,_top:X}}catch(P){if(P.message&&P.message.includes("Illegal"))return{language:x,value:nc(S),illegal:!0,relevance:0,_illegalBy:{message:P.message,index:Qt,context:S.slice(Qt-100,Qt+100),mode:P.mode,resultSoFar:Gr},_emitter:Ce};if(o)return{language:x,value:nc(S),illegal:!1,relevance:0,errorRaised:P,_emitter:Ce,_top:X};throw P}}function d(x){const S={value:nc(x),illegal:!1,relevance:0,_top:s,_emitter:new i.__emitter(i)};return S._emitter.addText(x),S}function f(x,S){S=S||i.languages||Object.keys(e);const C=d(x),L=S.filter(H).filter(W).map(pe=>p(pe,x,!1));L.unshift(C);const k=L.sort((pe,ue)=>{if(pe.relevance!==ue.relevance)return ue.relevance-pe.relevance;if(pe.language&&ue.language){if(H(pe.language).supersetOf===ue.language)return 1;if(H(ue.language).supersetOf===pe.language)return-1}return 0}),[$,j]=k,ge=$;return ge.secondBest=j,ge}function b(x,S,C){const L=S&&n[S]||C;x.classList.add("hljs"),x.classList.add(`language-${L}`)}function A(x){let S=null;const C=u(x);if(l(C))return;if(V("before:highlightElement",{el:x,language:C}),x.dataset.highlighted){console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.",x);return}if(x.children.length>0&&(i.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),console.warn("https://github.com/highlightjs/highlight.js/wiki/security"),console.warn("The element with unescaped HTML:"),console.warn(x)),i.throwUnescapedHTML))throw new f3("One of your code blocks includes unescaped HTML.",x.innerHTML);S=x;const L=S.textContent,k=C?c(L,{language:C,ignoreIllegals:!0}):f(L);x.innerHTML=k.value,x.dataset.highlighted="yes",b(x,C,k.language),x.result={language:k.language,re:k.relevance,relevance:k.relevance},k.secondBest&&(x.secondBest={language:k.secondBest.language,relevance:k.secondBest.relevance}),V("after:highlightElement",{el:x,result:k,text:L})}function y(x){i=_m(i,x)}const h=()=>{_(),Ur("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")};function g(){_(),Ur("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")}let E=!1;function _(){if(document.readyState==="loading"){E=!0;return}document.querySelectorAll(i.cssSelector).forEach(A)}function T(){E&&_()}typeof window<"u"&&window.addEventListener&&window.addEventListener("DOMContentLoaded",T,!1);function v(x,S){let C=null;try{C=S(t)}catch(L){if(er("Language definition for '{}' could not be registered.".replace("{}",x)),o)er(L);else throw L;C=s}C.name||(C.name=x),e[x]=C,C.rawDefinition=S.bind(null,t),C.aliases&&I(C.aliases,{languageName:x})}function N(x){delete e[x];for(const S of Object.keys(n))n[S]===x&&delete n[S]}function R(){return Object.keys(e)}function H(x){return x=(x||"").toLowerCase(),e[x]||e[n[x]]}function I(x,{languageName:S}){typeof x=="string"&&(x=[x]),x.forEach(C=>{n[C.toLowerCase()]=S})}function W(x){const S=H(x);return S&&!S.disableAutodetect}function le(x){x["before:highlightBlock"]&&!x["before:highlightElement"]&&(x["before:highlightElement"]=S=>{x["before:highlightBlock"](Object.assign({block:S.el},S))}),x["after:highlightBlock"]&&!x["after:highlightElement"]&&(x["after:highlightElement"]=S=>{x["after:highlightBlock"](Object.assign({block:S.el},S))})}function K(x){le(x),r.push(x)}function O(x){const S=r.indexOf(x);S!==-1&&r.splice(S,1)}function V(x,S){const C=x;r.forEach(function(L){L[C]&&L[C](S)})}function B(x){return Ur("10.7.0","highlightBlock will be removed entirely in v12.0"),Ur("10.7.0","Please use highlightElement now."),A(x)}Object.assign(t,{highlight:c,highlightAuto:f,highlightAll:_,highlightElement:A,highlightBlock:B,configure:y,initHighlighting:h,initHighlightingOnLoad:g,registerLanguage:v,unregisterLanguage:N,listLanguages:R,getLanguage:H,registerAliases:I,autoDetection:W,inherit:_m,addPlugin:K,removePlugin:O}),t.debugMode=function(){o=!1},t.safeMode=function(){o=!0},t.versionString=p3,t.regex={concat:Jn,lookahead:um,either:Ju,optional:xD,anyNumberOfTimes:wD};for(const x in Hs)typeof Hs[x]=="object"&&om(Hs[x]);return Object.assign(t,Hs),t},qr=ym({});qr.newInstance=()=>ym({});var g3=qr;qr.HighlightJS=qr,qr.default=qr;const J=Ht(g3);function h3(t){const e={className:"number",begin:/[$%]\d+/},n={className:"number",begin:/\b\d+/},r={className:"number",begin:/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/},o={className:"number",begin:/:\d{1,5}/};return{name:"Apache config",aliases:["apacheconf"],case_insensitive:!0,contains:[t.HASH_COMMENT_MODE,{className:"section",begin:/<\/?/,end:/>/,contains:[r,o,t.inherit(t.QUOTE_STRING_MODE,{relevance:0})]},{className:"attribute",begin:/\w+/,relevance:0,keywords:{_:["order","deny","allow","setenv","rewriterule","rewriteengine","rewritecond","documentroot","sethandler","errordocument","loadmodule","options","header","listen","serverroot","servername"]},starts:{end:/$/,relevance:0,keywords:{literal:"on off all deny allow"},contains:[{className:"meta",begin:/\s\[/,end:/\]$/},{className:"variable",begin:/[\$%]\{/,end:/\}/,contains:["self",e]},r,n,t.QUOTE_STRING_MODE]}}],illegal:/\S/}}function E3(t){const e=t.regex,n={},r={begin:/\$\{/,end:/\}/,contains:["self",{begin:/:-/,contains:[n]}]};Object.assign(n,{className:"variable",variants:[{begin:e.concat(/\$[\w\d#@][\w\d_]*/,"(?![\\w\\d])(?![$])")},r]});const o={className:"subst",begin:/\$\(/,end:/\)/,contains:[t.BACKSLASH_ESCAPE]},a={begin:/<<-?\s*(?=\w+)/,starts:{contains:[t.END_SAME_AS_BEGIN({begin:/(\w+)/,end:/(\w+)/,className:"string"})]}},s={className:"string",begin:/"/,end:/"/,contains:[t.BACKSLASH_ESCAPE,n,o]};o.contains.push(s);const i={match:/\\"/},l={className:"string",begin:/'/,end:/'/},u={match:/\\'/},c={begin:/\$?\(\(/,end:/\)\)/,contains:[{begin:/\d+#[0-9a-f]+/,className:"number"},t.NUMBER_MODE,n]},p=["fish","bash","zsh","sh","csh","ksh","tcsh","dash","scsh"],d=t.SHEBANG({binary:`(${p.join("|")})`,relevance:10}),f={className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[t.inherit(t.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0},b=["if","then","else","elif","fi","for","while","until","in","do","done","case","esac","function","select"],A=["true","false"],y={match:/(\/[a-z._-]+)+/},h=["break","cd","continue","eval","exec","exit","export","getopts","hash","pwd","readonly","return","shift","test","times","trap","umask","unset"],g=["alias","bind","builtin","caller","command","declare","echo","enable","help","let","local","logout","mapfile","printf","read","readarray","source","type","typeset","ulimit","unalias"],E=["autoload","bg","bindkey","bye","cap","chdir","clone","comparguments","compcall","compctl","compdescribe","compfiles","compgroups","compquote","comptags","comptry","compvalues","dirs","disable","disown","echotc","echoti","emulate","fc","fg","float","functions","getcap","getln","history","integer","jobs","kill","limit","log","noglob","popd","print","pushd","pushln","rehash","sched","setcap","setopt","stat","suspend","ttyctl","unfunction","unhash","unlimit","unsetopt","vared","wait","whence","where","which","zcompile","zformat","zftp","zle","zmodload","zparseopts","zprof","zpty","zregexparse","zsocket","zstyle","ztcp"],_=["chcon","chgrp","chown","chmod","cp","dd","df","dir","dircolors","ln","ls","mkdir","mkfifo","mknod","mktemp","mv","realpath","rm","rmdir","shred","sync","touch","truncate","vdir","b2sum","base32","base64","cat","cksum","comm","csplit","cut","expand","fmt","fold","head","join","md5sum","nl","numfmt","od","paste","ptx","pr","sha1sum","sha224sum","sha256sum","sha384sum","sha512sum","shuf","sort","split","sum","tac","tail","tr","tsort","unexpand","uniq","wc","arch","basename","chroot","date","dirname","du","echo","env","expr","factor","groups","hostid","id","link","logname","nice","nohup","nproc","pathchk","pinky","printenv","printf","pwd","readlink","runcon","seq","sleep","stat","stdbuf","stty","tee","test","timeout","tty","uname","unlink","uptime","users","who","whoami","yes"];return{name:"Bash",aliases:["sh"],keywords:{$pattern:/\b[a-z][a-z0-9._-]+\b/,keyword:b,literal:A,built_in:[...h,...g,"set","shopt",...E,..._]},contains:[d,t.SHEBANG(),f,c,t.HASH_COMMENT_MODE,a,y,s,i,l,u,n]}}function b3(t){const e=t.regex,n=t.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="decltype\\(auto\\)",o="[a-zA-Z_]\\w*::",s="("+r+"|"+e.optional(o)+"[a-zA-Z_]\\w*"+e.optional("<[^<>]+>")+")",i={className:"type",variants:[{begin:"\\b[a-z\\d_]*_t\\b"},{match:/\batomic_[a-z]{3,6}\b/}]},u={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[t.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'("+"\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)"+"|.)",end:"'",illegal:"."},t.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},c={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},p={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},t.inherit(u,{className:"string"}),{className:"string",begin:/<.*?>/},n,t.C_BLOCK_COMMENT_MODE]},d={className:"title",begin:e.optional(o)+t.IDENT_RE,relevance:0},f=e.optional(o)+t.IDENT_RE+"\\s*\\(",y={keyword:["asm","auto","break","case","continue","default","do","else","enum","extern","for","fortran","goto","if","inline","register","restrict","return","sizeof","struct","switch","typedef","union","volatile","while","_Alignas","_Alignof","_Atomic","_Generic","_Noreturn","_Static_assert","_Thread_local","alignas","alignof","noreturn","static_assert","thread_local","_Pragma"],type:["float","double","signed","unsigned","int","short","long","char","void","_Bool","_Complex","_Imaginary","_Decimal32","_Decimal64","_Decimal128","const","static","complex","bool","imaginary"],literal:"true false NULL",built_in:"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"},h=[p,i,n,t.C_BLOCK_COMMENT_MODE,c,u],g={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:y,contains:h.concat([{begin:/\(/,end:/\)/,keywords:y,contains:h.concat(["self"]),relevance:0}]),relevance:0},E={begin:"("+s+"[\\*&\\s]+)+"+f,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:y,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:r,keywords:y,relevance:0},{begin:f,returnBegin:!0,contains:[t.inherit(d,{className:"title.function"})],relevance:0},{relevance:0,match:/,/},{className:"params",begin:/\(/,end:/\)/,keywords:y,relevance:0,contains:[n,t.C_BLOCK_COMMENT_MODE,u,c,i,{begin:/\(/,end:/\)/,keywords:y,relevance:0,contains:["self",n,t.C_BLOCK_COMMENT_MODE,u,c,i]}]},i,n,t.C_BLOCK_COMMENT_MODE,p]};return{name:"C",aliases:["h"],keywords:y,disableAutodetect:!0,illegal:"</",contains:[].concat(g,E,h,[p,{begin:t.IDENT_RE+"::",keywords:y},{className:"class",beginKeywords:"enum class struct union",end:/[{;:<>=]/,contains:[{beginKeywords:"final class struct"},t.TITLE_MODE]}]),exports:{preprocessor:p,strings:u,keywords:y}}}function A3(t){const e=t.regex,n=t.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="decltype\\(auto\\)",o="[a-zA-Z_]\\w*::",s="(?!struct)("+r+"|"+e.optional(o)+"[a-zA-Z_]\\w*"+e.optional("<[^<>]+>")+")",i={className:"type",begin:"\\b[a-z\\d_]*_t\\b"},u={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[t.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'("+"\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)"+"|.)",end:"'",illegal:"."},t.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},c={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},p={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},t.inherit(u,{className:"string"}),{className:"string",begin:/<.*?>/},n,t.C_BLOCK_COMMENT_MODE]},d={className:"title",begin:e.optional(o)+t.IDENT_RE,relevance:0},f=e.optional(o)+t.IDENT_RE+"\\s*\\(",b=["alignas","alignof","and","and_eq","asm","atomic_cancel","atomic_commit","atomic_noexcept","auto","bitand","bitor","break","case","catch","class","co_await","co_return","co_yield","compl","concept","const_cast|10","consteval","constexpr","constinit","continue","decltype","default","delete","do","dynamic_cast|10","else","enum","explicit","export","extern","false","final","for","friend","goto","if","import","inline","module","mutable","namespace","new","noexcept","not","not_eq","nullptr","operator","or","or_eq","override","private","protected","public","reflexpr","register","reinterpret_cast|10","requires","return","sizeof","static_assert","static_cast|10","struct","switch","synchronized","template","this","thread_local","throw","transaction_safe","transaction_safe_dynamic","true","try","typedef","typeid","typename","union","using","virtual","volatile","while","xor","xor_eq"],A=["bool","char","char16_t","char32_t","char8_t","double","float","int","long","short","void","wchar_t","unsigned","signed","const","static"],y=["any","auto_ptr","barrier","binary_semaphore","bitset","complex","condition_variable","condition_variable_any","counting_semaphore","deque","false_type","future","imaginary","initializer_list","istringstream","jthread","latch","lock_guard","multimap","multiset","mutex","optional","ostringstream","packaged_task","pair","promise","priority_queue","queue","recursive_mutex","recursive_timed_mutex","scoped_lock","set","shared_future","shared_lock","shared_mutex","shared_timed_mutex","shared_ptr","stack","string_view","stringstream","timed_mutex","thread","true_type","tuple","unique_lock","unique_ptr","unordered_map","unordered_multimap","unordered_multiset","unordered_set","variant","vector","weak_ptr","wstring","wstring_view"],h=["abort","abs","acos","apply","as_const","asin","atan","atan2","calloc","ceil","cerr","cin","clog","cos","cosh","cout","declval","endl","exchange","exit","exp","fabs","floor","fmod","forward","fprintf","fputs","free","frexp","fscanf","future","invoke","isalnum","isalpha","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","labs","launder","ldexp","log","log10","make_pair","make_shared","make_shared_for_overwrite","make_tuple","make_unique","malloc","memchr","memcmp","memcpy","memset","modf","move","pow","printf","putchar","puts","realloc","scanf","sin","sinh","snprintf","sprintf","sqrt","sscanf","std","stderr","stdin","stdout","strcat","strchr","strcmp","strcpy","strcspn","strlen","strncat","strncmp","strncpy","strpbrk","strrchr","strspn","strstr","swap","tan","tanh","terminate","to_underlying","tolower","toupper","vfprintf","visit","vprintf","vsprintf"],_={type:A,keyword:b,literal:["NULL","false","nullopt","nullptr","true"],built_in:["_Pragma"],_type_hints:y},T={className:"function.dispatch",relevance:0,keywords:{_hint:h},begin:e.concat(/\b/,/(?!decltype)/,/(?!if)/,/(?!for)/,/(?!switch)/,/(?!while)/,t.IDENT_RE,e.lookahead(/(<[^<>]+>|)\s*\(/))},v=[T,p,i,n,t.C_BLOCK_COMMENT_MODE,c,u],N={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:_,contains:v.concat([{begin:/\(/,end:/\)/,keywords:_,contains:v.concat(["self"]),relevance:0}]),relevance:0},R={className:"function",begin:"("+s+"[\\*&\\s]+)+"+f,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:_,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:r,keywords:_,relevance:0},{begin:f,returnBegin:!0,contains:[d],relevance:0},{begin:/::/,relevance:0},{begin:/:/,endsWithParent:!0,contains:[u,c]},{relevance:0,match:/,/},{className:"params",begin:/\(/,end:/\)/,keywords:_,relevance:0,contains:[n,t.C_BLOCK_COMMENT_MODE,u,c,i,{begin:/\(/,end:/\)/,keywords:_,relevance:0,contains:["self",n,t.C_BLOCK_COMMENT_MODE,u,c,i]}]},i,n,t.C_BLOCK_COMMENT_MODE,p]};return{name:"C++",aliases:["cc","c++","h++","hpp","hh","hxx","cxx"],keywords:_,illegal:"</",classNameAliases:{"function.dispatch":"built_in"},contains:[].concat(N,R,T,v,[p,{begin:"\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",end:">",keywords:_,contains:["self",i]},{begin:t.IDENT_RE+"::",keywords:_},{match:[/\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,/\s+/,/\w+/],className:{1:"keyword",3:"title.class"}}])}}function _3(t){const e=["bool","byte","char","decimal","delegate","double","dynamic","enum","float","int","long","nint","nuint","object","sbyte","short","string","ulong","uint","ushort"],n=["public","private","protected","static","internal","protected","abstract","async","extern","override","unsafe","virtual","new","sealed","partial"],r=["default","false","null","true"],o=["abstract","as","base","break","case","catch","class","const","continue","do","else","event","explicit","extern","finally","fixed","for","foreach","goto","if","implicit","in","interface","internal","is","lock","namespace","new","operator","out","override","params","private","protected","public","readonly","record","ref","return","scoped","sealed","sizeof","stackalloc","static","struct","switch","this","throw","try","typeof","unchecked","unsafe","using","virtual","void","volatile","while"],a=["add","alias","and","ascending","async","await","by","descending","equals","from","get","global","group","init","into","join","let","nameof","not","notnull","on","or","orderby","partial","remove","select","set","unmanaged","value|0","var","when","where","with","yield"],s={keyword:o.concat(a),built_in:e,literal:r},i=t.inherit(t.TITLE_MODE,{begin:"[a-zA-Z](\\.?\\w)*"}),l={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},u={className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]},c=t.inherit(u,{illegal:/\n/}),p={className:"subst",begin:/\{/,end:/\}/,keywords:s},d=t.inherit(p,{illegal:/\n/}),f={className:"string",begin:/\$"/,end:'"',illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/},t.BACKSLASH_ESCAPE,d]},b={className:"string",begin:/\$@"/,end:'"',contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},p]},A=t.inherit(b,{illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},d]});p.contains=[b,f,u,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,l,t.C_BLOCK_COMMENT_MODE],d.contains=[A,f,c,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,l,t.inherit(t.C_BLOCK_COMMENT_MODE,{illegal:/\n/})];const y={variants:[b,f,u,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE]},h={begin:"<",end:">",contains:[{beginKeywords:"in out"},i]},g=t.IDENT_RE+"(<"+t.IDENT_RE+"(\\s*,\\s*"+t.IDENT_RE+")*>)?(\\[\\])?",E={begin:"@"+t.IDENT_RE,relevance:0};return{name:"C#",aliases:["cs","c#"],keywords:s,illegal:/::/,contains:[t.COMMENT("///","$",{returnBegin:!0,contains:[{className:"doctag",variants:[{begin:"///",relevance:0},{begin:"<!--|-->"},{begin:"</?",end:">"}]}]}),t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,{className:"meta",begin:"#",end:"$",keywords:{keyword:"if else elif endif define undef warning error line region endregion pragma checksum"}},y,l,{beginKeywords:"class interface",relevance:0,end:/[{;=]/,illegal:/[^\s:,]/,contains:[{beginKeywords:"where class"},i,h,t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},{beginKeywords:"namespace",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,contains:[i,t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},{beginKeywords:"record",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,contains:[i,h,t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},{className:"meta",begin:"^\\s*\\[(?=[\\w])",excludeBegin:!0,end:"\\]",excludeEnd:!0,contains:[{className:"string",begin:/"/,end:/"/}]},{beginKeywords:"new return throw await else",relevance:0},{className:"function",begin:"("+g+"\\s+)+"+t.IDENT_RE+"\\s*(<[^=]+>\\s*)?\\(",returnBegin:!0,end:/\s*[{;=]/,excludeEnd:!0,keywords:s,contains:[{beginKeywords:n.join(" "),relevance:0},{begin:t.IDENT_RE+"\\s*(<[^=]+>\\s*)?\\(",returnBegin:!0,contains:[t.TITLE_MODE,h],relevance:0},{match:/\(\)/},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:s,relevance:0,contains:[y,l,t.C_BLOCK_COMMENT_MODE]},t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},E]}}const v3=t=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:t.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:t.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z_][A-Za-z0-9_-]*/}}),y3=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],D3=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],C3=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],S3=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],T3=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","block-size","border","border-block","border-block-color","border-block-end","border-block-end-color","border-block-end-style","border-block-end-width","border-block-start","border-block-start-color","border-block-start-style","border-block-start-width","border-block-style","border-block-width","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-inline","border-inline-color","border-inline-end","border-inline-end-color","border-inline-end-style","border-inline-end-width","border-inline-start","border-inline-start-color","border-inline-start-style","border-inline-start-width","border-inline-style","border-inline-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inline-size","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-block","margin-block-end","margin-block-start","margin-bottom","margin-inline","margin-inline-end","margin-inline-start","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-block-size","max-height","max-inline-size","max-width","min-block-size","min-height","min-inline-size","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-block","padding-block-end","padding-block-start","padding-bottom","padding-inline","padding-inline-end","padding-inline-start","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","scrollbar-color","scrollbar-gutter","scrollbar-width","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse();function N3(t){const e=t.regex,n=v3(t),r={begin:/-(webkit|moz|ms|o)-(?=[a-z])/},o="and or not only",a=/@-?\w[\w]*(-\w+)*/,s="[a-zA-Z-][a-zA-Z0-9_-]*",i=[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE];return{name:"CSS",case_insensitive:!0,illegal:/[=|'\$]/,keywords:{keyframePosition:"from to"},classNameAliases:{keyframePosition:"selector-tag"},contains:[n.BLOCK_COMMENT,r,n.CSS_NUMBER_MODE,{className:"selector-id",begin:/#[A-Za-z0-9_-]+/,relevance:0},{className:"selector-class",begin:"\\."+s,relevance:0},n.ATTRIBUTE_SELECTOR_MODE,{className:"selector-pseudo",variants:[{begin:":("+C3.join("|")+")"},{begin:":(:)?("+S3.join("|")+")"}]},n.CSS_VARIABLE,{className:"attribute",begin:"\\b("+T3.join("|")+")\\b"},{begin:/:/,end:/[;}{]/,contains:[n.BLOCK_COMMENT,n.HEXCOLOR,n.IMPORTANT,n.CSS_NUMBER_MODE,...i,{begin:/(url|data-uri)\(/,end:/\)/,relevance:0,keywords:{built_in:"url data-uri"},contains:[...i,{className:"string",begin:/[^)]/,endsWithParent:!0,excludeEnd:!0}]},n.FUNCTION_DISPATCH]},{begin:e.lookahead(/@/),end:"[{;]",relevance:0,illegal:/:/,contains:[{className:"keyword",begin:a},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:{$pattern:/[a-z-]+/,keyword:o,attribute:D3.join(" ")},contains:[{begin:/[a-z-]+(?=:)/,className:"attribute"},...i,n.CSS_NUMBER_MODE]}]},{className:"selector-tag",begin:"\\b("+y3.join("|")+")\\b"}]}}function w3(t){const e=t.regex;return{name:"Diff",aliases:["patch"],contains:[{className:"meta",relevance:10,match:e.either(/^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,/^\*\*\* +\d+,\d+ +\*\*\*\*$/,/^--- +\d+,\d+ +----$/)},{className:"comment",variants:[{begin:e.either(/Index: /,/^index/,/={3,}/,/^-{3}/,/^\*{3} /,/^\+{3}/,/^diff --git/),end:/$/},{match:/^\*{15}$/}]},{className:"addition",begin:/^\+/,end:/$/},{className:"deletion",begin:/^-/,end:/$/},{className:"addition",begin:/^!/,end:/$/}]}}function x3(t){const a={keyword:["break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var"],type:["bool","byte","complex64","complex128","error","float32","float64","int8","int16","int32","int64","string","uint8","uint16","uint32","uint64","int","uint","uintptr","rune"],literal:["true","false","iota","nil"],built_in:["append","cap","close","complex","copy","imag","len","make","new","panic","print","println","real","recover","delete"]};return{name:"Go",aliases:["golang"],keywords:a,illegal:"</",contains:[t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,{className:"string",variants:[t.QUOTE_STRING_MODE,t.APOS_STRING_MODE,{begin:"`",end:"`"}]},{className:"number",variants:[{begin:t.C_NUMBER_RE+"[i]",relevance:1},t.C_NUMBER_MODE]},{begin:/:=/},{className:"function",beginKeywords:"func",end:"\\s*(\\{|$)",excludeEnd:!0,contains:[t.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:a,illegal:/["']/}]}]}}function R3(t){const e=t.regex,n=/[_A-Za-z][_0-9A-Za-z]*/;return{name:"GraphQL",aliases:["gql"],case_insensitive:!0,disableAutodetect:!1,keywords:{keyword:["query","mutation","subscription","type","input","schema","directive","interface","union","scalar","fragment","enum","on"],literal:["true","false","null"]},contains:[t.HASH_COMMENT_MODE,t.QUOTE_STRING_MODE,t.NUMBER_MODE,{scope:"punctuation",match:/[.]{3}/,relevance:0},{scope:"punctuation",begin:/[\!\(\)\:\=\[\]\{\|\}]{1}/,relevance:0},{scope:"variable",begin:/\$/,end:/\W/,excludeEnd:!0,relevance:0},{scope:"meta",match:/@\w+/,excludeEnd:!0},{scope:"symbol",begin:e.concat(n,e.lookahead(/\s*:/)),relevance:0}],illegal:[/[;<']/,/BEGIN/]}}function L3(t){const e=t.regex,n={className:"number",relevance:0,variants:[{begin:/([+-]+)?[\d]+_[\d_]+/},{begin:t.NUMBER_RE}]},r=t.COMMENT();r.variants=[{begin:/;/,end:/$/},{begin:/#/,end:/$/}];const o={className:"variable",variants:[{begin:/\$[\w\d"][\w\d_]*/},{begin:/\$\{(.*?)\}/}]},a={className:"literal",begin:/\bon|off|true|false|yes|no\b/},s={className:"string",contains:[t.BACKSLASH_ESCAPE],variants:[{begin:"'''",end:"'''",relevance:10},{begin:'"""',end:'"""',relevance:10},{begin:'"',end:'"'},{begin:"'",end:"'"}]},i={begin:/\[/,end:/\]/,contains:[r,a,o,s,n,"self"],relevance:0},l=/[A-Za-z0-9_-]+/,u=/"(\\"|[^"])*"/,c=/'[^']*'/,p=e.either(l,u,c),d=e.concat(p,"(\\s*\\.\\s*",p,")*",e.lookahead(/\s*=\s*[^#\s]/));return{name:"TOML, also INI",aliases:["toml"],case_insensitive:!0,illegal:/\S/,contains:[r,{className:"section",begin:/\[+/,end:/\]+/},{begin:d,className:"attr",starts:{end:/$/,contains:[r,i,a,o,s,n]}}]}}var Hr="[0-9](_*[0-9])*",$s=`\\.(${Hr})`,zs="[0-9a-fA-F](_*[0-9a-fA-F])*",Dm={className:"number",variants:[{begin:`(\\b(${Hr})((${$s})|\\.)?|(${$s}))[eE][+-]?(${Hr})[fFdD]?\\b`},{begin:`\\b(${Hr})((${$s})[fFdD]?\\b|\\.([fFdD]\\b)?)`},{begin:`(${$s})[fFdD]?\\b`},{begin:`\\b(${Hr})[fFdD]\\b`},{begin:`\\b0[xX]((${zs})\\.?|(${zs})?\\.(${zs}))[pP][+-]?(${Hr})[fFdD]?\\b`},{begin:"\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},{begin:`\\b0[xX](${zs})[lL]?\\b`},{begin:"\\b0(_*[0-7])*[lL]?\\b"},{begin:"\\b0[bB][01](_*[01])*[lL]?\\b"}],relevance:0};function Cm(t,e,n){return n===-1?"":t.replace(e,r=>Cm(t,e,n-1))}function O3(t){const e=t.regex,n="[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",r=n+Cm("(?:<"+n+"~~~(?:\\s*,\\s*"+n+"~~~)*>)?",/~~~/g,2),l={keyword:["synchronized","abstract","private","var","static","if","const ","for","while","strictfp","finally","protected","import","native","final","void","enum","else","break","transient","catch","instanceof","volatile","case","assert","package","default","public","try","switch","continue","throws","protected","public","private","module","requires","exports","do","sealed","yield","permits"],literal:["false","true","null"],type:["char","boolean","long","float","int","byte","short","double"],built_in:["super","this"]},u={className:"meta",begin:"@"+n,contains:[{begin:/\(/,end:/\)/,contains:["self"]}]},c={className:"params",begin:/\(/,end:/\)/,keywords:l,relevance:0,contains:[t.C_BLOCK_COMMENT_MODE],endsParent:!0};return{name:"Java",aliases:["jsp"],keywords:l,illegal:/<\/|#/,contains:[t.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),{begin:/import java\.[a-z]+\./,keywords:"import",relevance:2},t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,{begin:/"""/,end:/"""/,className:"string",contains:[t.BACKSLASH_ESCAPE]},t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,{match:[/\b(?:class|interface|enum|extends|implements|new)/,/\s+/,n],className:{1:"keyword",3:"title.class"}},{match:/non-sealed/,scope:"keyword"},{begin:[e.concat(/(?!else)/,n),/\s+/,n,/\s+/,/=(?!=)/],className:{1:"type",3:"variable",5:"operator"}},{begin:[/record/,/\s+/,n],className:{1:"keyword",3:"title.class"},contains:[c,t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},{beginKeywords:"new throw return else",relevance:0},{begin:["(?:"+r+"\\s+)",t.UNDERSCORE_IDENT_RE,/\s*(?=\()/],className:{2:"title.function"},keywords:l,contains:[{className:"params",begin:/\(/,end:/\)/,keywords:l,relevance:0,contains:[u,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,Dm,t.C_BLOCK_COMMENT_MODE]},t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},Dm,u]}}const Sm="[A-Za-z$_][0-9A-Za-z$_]*",k3=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],I3=["true","false","null","undefined","NaN","Infinity"],Tm=["Object","Function","Boolean","Symbol","Math","Date","Number","BigInt","String","RegExp","Array","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array","Set","Map","WeakSet","WeakMap","ArrayBuffer","SharedArrayBuffer","Atomics","DataView","JSON","Promise","Generator","GeneratorFunction","AsyncFunction","Reflect","Proxy","Intl","WebAssembly"],Nm=["Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],wm=["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],M3=["arguments","this","super","console","window","document","localStorage","sessionStorage","module","global"],F3=[].concat(wm,Tm,Nm);function B3(t){const e=t.regex,n=(S,{after:C})=>{const L="</"+S[0].slice(1);return S.input.indexOf(L,C)!==-1},r=Sm,o={begin:"<>",end:"</>"},a=/<[A-Za-z0-9\\._:-]+\s*\/>/,s={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:(S,C)=>{const L=S[0].length+S.index,k=S.input[L];if(k==="<"||k===","){C.ignoreMatch();return}k===">"&&(n(S,{after:L})||C.ignoreMatch());let $;const j=S.input.substring(L);if($=j.match(/^\s*=/)){C.ignoreMatch();return}if(($=j.match(/^\s+extends\s+/))&&$.index===0){C.ignoreMatch();return}}},i={$pattern:Sm,keyword:k3,literal:I3,built_in:F3,"variable.language":M3},l="[0-9](_?[0-9])*",u=`\\.(${l})`,c="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",p={className:"number",variants:[{begin:`(\\b(${c})((${u})|\\.)?|(${u}))[eE][+-]?(${l})\\b`},{begin:`\\b(${c})\\b((${u})\\b|\\.)?|(${u})\\b`},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},d={className:"subst",begin:"\\$\\{",end:"\\}",keywords:i,contains:[]},f={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,d],subLanguage:"xml"}},b={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,d],subLanguage:"css"}},A={begin:"gql`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,d],subLanguage:"graphql"}},y={className:"string",begin:"`",end:"`",contains:[t.BACKSLASH_ESCAPE,d]},g={className:"comment",variants:[t.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{begin:"(?=@[A-Za-z]+)",relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"},{className:"type",begin:"\\{",end:"\\}",excludeEnd:!0,excludeBegin:!0,relevance:0},{className:"variable",begin:r+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),t.C_BLOCK_COMMENT_MODE,t.C_LINE_COMMENT_MODE]},E=[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,f,b,A,y,{match:/\$\d+/},p];d.contains=E.concat({begin:/\{/,end:/\}/,keywords:i,contains:["self"].concat(E)});const _=[].concat(g,d.contains),T=_.concat([{begin:/\(/,end:/\)/,keywords:i,contains:["self"].concat(_)}]),v={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:i,contains:T},N={variants:[{match:[/class/,/\s+/,r,/\s+/,/extends/,/\s+/,e.concat(r,"(",e.concat(/\./,r),")*")],scope:{1:"keyword",3:"title.class",5:"keyword",7:"title.class.inherited"}},{match:[/class/,/\s+/,r],scope:{1:"keyword",3:"title.class"}}]},R={relevance:0,match:e.either(/\bJSON/,/\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,/\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,/\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),className:"title.class",keywords:{_:[...Tm,...Nm]}},H={label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},I={variants:[{match:[/function/,/\s+/,r,/(?=\s*\()/]},{match:[/function/,/\s*(?=\()/]}],className:{1:"keyword",3:"title.function"},label:"func.def",contains:[v],illegal:/%/},W={relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,className:"variable.constant"};function le(S){return e.concat("(?!",S.join("|"),")")}const K={match:e.concat(/\b/,le([...wm,"super","import"]),r,e.lookahead(/\(/)),className:"title.function",relevance:0},O={begin:e.concat(/\./,e.lookahead(e.concat(r,/(?![0-9A-Za-z$_(])/))),end:r,excludeBegin:!0,keywords:"prototype",className:"property",relevance:0},V={match:[/get|set/,/\s+/,r,/(?=\()/],className:{1:"keyword",3:"title.function"},contains:[{begin:/\(\)/},v]},B="(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+t.UNDERSCORE_IDENT_RE+")\\s*=>",x={match:[/const|var|let/,/\s+/,r,/\s*/,/=\s*/,/(async\s*)?/,e.lookahead(B)],keywords:"async",className:{1:"keyword",3:"title.function"},contains:[v]};return{name:"JavaScript",aliases:["js","jsx","mjs","cjs"],keywords:i,exports:{PARAMS_CONTAINS:T,CLASS_REFERENCE:R},illegal:/#(?![$_A-z])/,contains:[t.SHEBANG({label:"shebang",binary:"node",relevance:5}),H,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,f,b,A,y,g,{match:/\$\d+/},p,R,{className:"attr",begin:r+e.lookahead(":"),relevance:0},x,{begin:"("+t.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",relevance:0,contains:[g,t.REGEXP_MODE,{className:"function",begin:B,returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:t.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:i,contains:T}]}]},{begin:/,/,relevance:0},{match:/\s+/,relevance:0},{variants:[{begin:o.begin,end:o.end},{match:a},{begin:s.begin,"on:begin":s.isTrulyOpeningTag,end:s.end}],subLanguage:"xml",contains:[{begin:s.begin,end:s.end,skip:!0,contains:["self"]}]}]},I,{beginKeywords:"while if switch catch for"},{begin:"\\b(?!function)"+t.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,label:"func.def",contains:[v,t.inherit(t.TITLE_MODE,{begin:r,className:"title.function"})]},{match:/\.\.\./,relevance:0},O,{match:"\\$"+r,relevance:0},{match:[/\bconstructor(?=\s*\()/],className:{1:"title.function"},contains:[v]},K,W,N,V,{match:/\$[(.]/}]}}function P3(t){const e={className:"attr",begin:/"(\\.|[^\\"\r\n])*"(?=\s*:)/,relevance:1.01},n={match:/[{}[\],:]/,className:"punctuation",relevance:0},r=["true","false","null"],o={scope:"literal",beginKeywords:r.join(" ")};return{name:"JSON",keywords:{literal:r},contains:[e,n,t.QUOTE_STRING_MODE,o,t.C_NUMBER_MODE,t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE],illegal:"\\S"}}var Vr="[0-9](_*[0-9])*",Gs=`\\.(${Vr})`,Zs="[0-9a-fA-F](_*[0-9a-fA-F])*",U3={className:"number",variants:[{begin:`(\\b(${Vr})((${Gs})|\\.)?|(${Gs}))[eE][+-]?(${Vr})[fFdD]?\\b`},{begin:`\\b(${Vr})((${Gs})[fFdD]?\\b|\\.([fFdD]\\b)?)`},{begin:`(${Gs})[fFdD]?\\b`},{begin:`\\b(${Vr})[fFdD]\\b`},{begin:`\\b0[xX]((${Zs})\\.?|(${Zs})?\\.(${Zs}))[pP][+-]?(${Vr})[fFdD]?\\b`},{begin:"\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},{begin:`\\b0[xX](${Zs})[lL]?\\b`},{begin:"\\b0(_*[0-7])*[lL]?\\b"},{begin:"\\b0[bB][01](_*[01])*[lL]?\\b"}],relevance:0};function q3(t){const e={keyword:"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",built_in:"Byte Short Char Int Long Boolean Float Double Void Unit Nothing",literal:"true false null"},n={className:"keyword",begin:/\b(break|continue|return|this)\b/,starts:{contains:[{className:"symbol",begin:/@\w+/}]}},r={className:"symbol",begin:t.UNDERSCORE_IDENT_RE+"@"},o={className:"subst",begin:/\$\{/,end:/\}/,contains:[t.C_NUMBER_MODE]},a={className:"variable",begin:"\\$"+t.UNDERSCORE_IDENT_RE},s={className:"string",variants:[{begin:'"""',end:'"""(?=[^"])',contains:[a,o]},{begin:"'",end:"'",illegal:/\n/,contains:[t.BACKSLASH_ESCAPE]},{begin:'"',end:'"',illegal:/\n/,contains:[t.BACKSLASH_ESCAPE,a,o]}]};o.contains.push(s);const i={className:"meta",begin:"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*"+t.UNDERSCORE_IDENT_RE+")?"},l={className:"meta",begin:"@"+t.UNDERSCORE_IDENT_RE,contains:[{begin:/\(/,end:/\)/,contains:[t.inherit(s,{className:"string"}),"self"]}]},u=U3,c=t.COMMENT("/\\*","\\*/",{contains:[t.C_BLOCK_COMMENT_MODE]}),p={variants:[{className:"type",begin:t.UNDERSCORE_IDENT_RE},{begin:/\(/,end:/\)/,contains:[]}]},d=p;return d.variants[1].contains=[p],p.variants[1].contains=[d],{name:"Kotlin",aliases:["kt","kts"],keywords:e,contains:[t.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),t.C_LINE_COMMENT_MODE,c,n,r,i,l,{className:"function",beginKeywords:"fun",end:"[(]|$",returnBegin:!0,excludeEnd:!0,keywords:e,relevance:5,contains:[{begin:t.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[t.UNDERSCORE_TITLE_MODE]},{className:"type",begin:/</,end:/>/,keywords:"reified",relevance:0},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:e,relevance:0,contains:[{begin:/:/,end:/[=,\/]/,endsWithParent:!0,contains:[p,t.C_LINE_COMMENT_MODE,c],relevance:0},t.C_LINE_COMMENT_MODE,c,i,l,s,t.C_NUMBER_MODE]},c]},{begin:[/class|interface|trait/,/\s+/,t.UNDERSCORE_IDENT_RE],beginScope:{3:"title.class"},keywords:"class interface trait",end:/[:\{(]|$/,excludeEnd:!0,illegal:"extends implements",contains:[{beginKeywords:"public protected internal private constructor"},t.UNDERSCORE_TITLE_MODE,{className:"type",begin:/</,end:/>/,excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:/[,:]\s*/,end:/[<\(,){\s]|$/,excludeBegin:!0,returnEnd:!0},i,l]},s,{className:"meta",begin:"^#!/usr/bin/env",end:"$",illegal:`
`},u]}}const H3=t=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:t.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:t.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z_][A-Za-z0-9_-]*/}}),V3=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],$3=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],xm=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],Rm=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],z3=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","block-size","border","border-block","border-block-color","border-block-end","border-block-end-color","border-block-end-style","border-block-end-width","border-block-start","border-block-start-color","border-block-start-style","border-block-start-width","border-block-style","border-block-width","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-inline","border-inline-color","border-inline-end","border-inline-end-color","border-inline-end-style","border-inline-end-width","border-inline-start","border-inline-start-color","border-inline-start-style","border-inline-start-width","border-inline-style","border-inline-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inline-size","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-block","margin-block-end","margin-block-start","margin-bottom","margin-inline","margin-inline-end","margin-inline-start","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-block-size","max-height","max-inline-size","max-width","min-block-size","min-height","min-inline-size","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-block","padding-block-end","padding-block-start","padding-bottom","padding-inline","padding-inline-end","padding-inline-start","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","scrollbar-color","scrollbar-gutter","scrollbar-width","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse(),G3=xm.concat(Rm);function Z3(t){const e=H3(t),n=G3,r="and or not only",o="[\\w-]+",a="("+o+"|@\\{"+o+"\\})",s=[],i=[],l=function(E){return{className:"string",begin:"~?"+E+".*?"+E}},u=function(E,_,T){return{className:E,begin:_,relevance:T}},c={$pattern:/[a-z-]+/,keyword:r,attribute:$3.join(" ")},p={begin:"\\(",end:"\\)",contains:i,keywords:c,relevance:0};i.push(t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,l("'"),l('"'),e.CSS_NUMBER_MODE,{begin:"(url|data-uri)\\(",starts:{className:"string",end:"[\\)\\n]",excludeEnd:!0}},e.HEXCOLOR,p,u("variable","@@?"+o,10),u("variable","@\\{"+o+"\\}"),u("built_in","~?`[^`]*?`"),{className:"attribute",begin:o+"\\s*:",end:":",returnBegin:!0,excludeEnd:!0},e.IMPORTANT,{beginKeywords:"and not"},e.FUNCTION_DISPATCH);const d=i.concat({begin:/\{/,end:/\}/,contains:s}),f={beginKeywords:"when",endsWithParent:!0,contains:[{beginKeywords:"and not"}].concat(i)},b={begin:a+"\\s*:",returnBegin:!0,end:/[;}]/,relevance:0,contains:[{begin:/-(webkit|moz|ms|o)-/},e.CSS_VARIABLE,{className:"attribute",begin:"\\b("+z3.join("|")+")\\b",end:/(?=:)/,starts:{endsWithParent:!0,illegal:"[<=$]",relevance:0,contains:i}}]},A={className:"keyword",begin:"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",starts:{end:"[;{}]",keywords:c,returnEnd:!0,contains:i,relevance:0}},y={className:"variable",variants:[{begin:"@"+o+"\\s*:",relevance:15},{begin:"@"+o}],starts:{end:"[;}]",returnEnd:!0,contains:d}},h={variants:[{begin:"[\\.#:&\\[>]",end:"[;{}]"},{begin:a,end:/\{/}],returnBegin:!0,returnEnd:!0,illegal:`[<='$"]`,relevance:0,contains:[t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,f,u("keyword","all\\b"),u("variable","@\\{"+o+"\\}"),{begin:"\\b("+V3.join("|")+")\\b",className:"selector-tag"},e.CSS_NUMBER_MODE,u("selector-tag",a,0),u("selector-id","#"+a),u("selector-class","\\."+a,0),u("selector-tag","&",0),e.ATTRIBUTE_SELECTOR_MODE,{className:"selector-pseudo",begin:":("+xm.join("|")+")"},{className:"selector-pseudo",begin:":(:)?("+Rm.join("|")+")"},{begin:/\(/,end:/\)/,relevance:0,contains:d},{begin:"!important"},e.FUNCTION_DISPATCH]},g={begin:o+`:(:)?(${n.join("|")})`,returnBegin:!0,contains:[h]};return s.push(t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,A,y,g,b,h,f,e.FUNCTION_DISPATCH),{name:"Less",case_insensitive:!0,illegal:`[=>'/<($"]`,contains:s}}function j3(t){const e="\\[=*\\[",n="\\]=*\\]",r={begin:e,end:n,contains:["self"]},o=[t.COMMENT("--(?!"+e+")","$"),t.COMMENT("--"+e,n,{contains:[r],relevance:10})];return{name:"Lua",keywords:{$pattern:t.UNDERSCORE_IDENT_RE,literal:"true false nil",keyword:"and break do else elseif end for goto if in local not or repeat return then until while",built_in:"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"},contains:o.concat([{className:"function",beginKeywords:"function",end:"\\)",contains:[t.inherit(t.TITLE_MODE,{begin:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{className:"params",begin:"\\(",endsWithParent:!0,contains:o}].concat(o)},t.C_NUMBER_MODE,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,{className:"string",begin:e,end:n,contains:[r],relevance:5}])}}function W3(t){const e={className:"variable",variants:[{begin:"\\$\\("+t.UNDERSCORE_IDENT_RE+"\\)",contains:[t.BACKSLASH_ESCAPE]},{begin:/\$[@%<?\^\+\*]/}]},n={className:"string",begin:/"/,end:/"/,contains:[t.BACKSLASH_ESCAPE,e]},r={className:"variable",begin:/\$\([\w-]+\s/,end:/\)/,keywords:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},contains:[e]},o={begin:"^"+t.UNDERSCORE_IDENT_RE+"\\s*(?=[:+?]?=)"},a={className:"meta",begin:/^\.PHONY:/,end:/$/,keywords:{$pattern:/[\.\w]+/,keyword:".PHONY"}},s={className:"section",begin:/^[^\s]+:/,end:/$/,contains:[e]};return{name:"Makefile",aliases:["mk","mak","make"],keywords:{$pattern:/[\w-]+/,keyword:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"},contains:[t.HASH_COMMENT_MODE,e,n,r,o,a,s]}}function K3(t){const e=t.regex,n={begin:/<\/?[A-Za-z_]/,end:">",subLanguage:"xml",relevance:0},r={begin:"^[-\\*]{3,}",end:"$"},o={className:"code",variants:[{begin:"(`{3,})[^`](.|\\n)*?\\1`*[ ]*"},{begin:"(~{3,})[^~](.|\\n)*?\\1~*[ ]*"},{begin:"```",end:"```+[ ]*$"},{begin:"~~~",end:"~~~+[ ]*$"},{begin:"`.+?`"},{begin:"(?=^( {4}|\\t))",contains:[{begin:"^( {4}|\\t)",end:"(\\n)$"}],relevance:0}]},a={className:"bullet",begin:"^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",end:"\\s+",excludeEnd:!0},s={begin:/^\[[^\n]+\]:/,returnBegin:!0,contains:[{className:"symbol",begin:/\[/,end:/\]/,excludeBegin:!0,excludeEnd:!0},{className:"link",begin:/:\s*/,end:/$/,excludeBegin:!0}]},i=/[A-Za-z][A-Za-z0-9+.-]*/,l={variants:[{begin:/\[.+?\]\[.*?\]/,relevance:0},{begin:/\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,relevance:2},{begin:e.concat(/\[.+?\]\(/,i,/:\/\/.*?\)/),relevance:2},{begin:/\[.+?\]\([./?&#].*?\)/,relevance:1},{begin:/\[.*?\]\(.*?\)/,relevance:0}],returnBegin:!0,contains:[{match:/\[(?=\])/},{className:"string",relevance:0,begin:"\\[",end:"\\]",excludeBegin:!0,returnEnd:!0},{className:"link",relevance:0,begin:"\\]\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0},{className:"symbol",relevance:0,begin:"\\]\\[",end:"\\]",excludeBegin:!0,excludeEnd:!0}]},u={className:"strong",contains:[],variants:[{begin:/_{2}(?!\s)/,end:/_{2}/},{begin:/\*{2}(?!\s)/,end:/\*{2}/}]},c={className:"emphasis",contains:[],variants:[{begin:/\*(?![*\s])/,end:/\*/},{begin:/_(?![_\s])/,end:/_/,relevance:0}]},p=t.inherit(u,{contains:[]}),d=t.inherit(c,{contains:[]});u.contains.push(d),c.contains.push(p);let f=[n,l];return[u,c,p,d].forEach(y=>{y.contains=y.contains.concat(f)}),f=f.concat(u,c),{name:"Markdown",aliases:["md","mkdown","mkd"],contains:[{className:"section",variants:[{begin:"^#{1,6}",end:"$",contains:f},{begin:"(?=^.+?\\n[=-]{2,}$)",contains:[{begin:"^[=-]*$"},{begin:"^",end:"\\n",contains:f}]}]},n,a,u,c,{className:"quote",begin:"^>\\s+",contains:f,end:"$"},o,r,l,s]}}function Y3(t){const e=t.regex,n={className:"variable",variants:[{begin:/\$\d+/},{begin:/\$\{\w+\}/},{begin:e.concat(/[$@]/,t.UNDERSCORE_IDENT_RE)}]},o={endsWithParent:!0,keywords:{$pattern:/[a-z_]{2,}|\/dev\/poll/,literal:["on","off","yes","no","true","false","none","blocked","debug","info","notice","warn","error","crit","select","break","last","permanent","redirect","kqueue","rtsig","epoll","poll","/dev/poll"]},relevance:0,illegal:"=>",contains:[t.HASH_COMMENT_MODE,{className:"string",contains:[t.BACKSLASH_ESCAPE,n],variants:[{begin:/"/,end:/"/},{begin:/'/,end:/'/}]},{begin:"([a-z]+):/",end:"\\s",endsWithParent:!0,excludeEnd:!0,contains:[n]},{className:"regexp",contains:[t.BACKSLASH_ESCAPE,n],variants:[{begin:"\\s\\^",end:"\\s|\\{|;",returnEnd:!0},{begin:"~\\*?\\s+",end:"\\s|\\{|;",returnEnd:!0},{begin:"\\*(\\.[a-z\\-]+)+"},{begin:"([a-z\\-]+\\.)+\\*"}]},{className:"number",begin:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{className:"number",begin:"\\b\\d+[kKmMgGdshdwy]?\\b",relevance:0},n]};return{name:"Nginx config",aliases:["nginxconf"],contains:[t.HASH_COMMENT_MODE,{beginKeywords:"upstream location",end:/;|\{/,contains:o.contains,keywords:{section:"upstream location"}},{className:"section",begin:e.concat(t.UNDERSCORE_IDENT_RE+e.lookahead(/\s+\{/)),relevance:0},{begin:e.lookahead(t.UNDERSCORE_IDENT_RE+"\\s"),end:";|\\{",contains:[{className:"attribute",begin:t.UNDERSCORE_IDENT_RE,starts:o}],relevance:0}],illegal:"[^\\s\\}\\{]"}}function X3(t){const e={className:"built_in",begin:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},n=/[a-zA-Z@][a-zA-Z0-9_]*/,i={"variable.language":["this","super"],$pattern:n,keyword:["while","export","sizeof","typedef","const","struct","for","union","volatile","static","mutable","if","do","return","goto","enum","else","break","extern","asm","case","default","register","explicit","typename","switch","continue","inline","readonly","assign","readwrite","self","@synchronized","id","typeof","nonatomic","IBOutlet","IBAction","strong","weak","copy","in","out","inout","bycopy","byref","oneway","__strong","__weak","__block","__autoreleasing","@private","@protected","@public","@try","@property","@end","@throw","@catch","@finally","@autoreleasepool","@synthesize","@dynamic","@selector","@optional","@required","@encode","@package","@import","@defs","@compatibility_alias","__bridge","__bridge_transfer","__bridge_retained","__bridge_retain","__covariant","__contravariant","__kindof","_Nonnull","_Nullable","_Null_unspecified","__FUNCTION__","__PRETTY_FUNCTION__","__attribute__","getter","setter","retain","unsafe_unretained","nonnull","nullable","null_unspecified","null_resettable","class","instancetype","NS_DESIGNATED_INITIALIZER","NS_UNAVAILABLE","NS_REQUIRES_SUPER","NS_RETURNS_INNER_POINTER","NS_INLINE","NS_AVAILABLE","NS_DEPRECATED","NS_ENUM","NS_OPTIONS","NS_SWIFT_UNAVAILABLE","NS_ASSUME_NONNULL_BEGIN","NS_ASSUME_NONNULL_END","NS_REFINED_FOR_SWIFT","NS_SWIFT_NAME","NS_SWIFT_NOTHROW","NS_DURING","NS_HANDLER","NS_ENDHANDLER","NS_VALUERETURN","NS_VOIDRETURN"],literal:["false","true","FALSE","TRUE","nil","YES","NO","NULL"],built_in:["dispatch_once_t","dispatch_queue_t","dispatch_sync","dispatch_async","dispatch_once"],type:["int","float","char","unsigned","signed","short","long","double","wchar_t","unichar","void","bool","BOOL","id|0","_Bool"]},l={$pattern:n,keyword:["@interface","@class","@protocol","@implementation"]};return{name:"Objective-C",aliases:["mm","objc","obj-c","obj-c++","objective-c++"],keywords:i,illegal:"</",contains:[e,t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,t.C_NUMBER_MODE,t.QUOTE_STRING_MODE,t.APOS_STRING_MODE,{className:"string",variants:[{begin:'@"',end:'"',illegal:"\\n",contains:[t.BACKSLASH_ESCAPE]}]},{className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},t.inherit(t.QUOTE_STRING_MODE,{className:"string"}),{className:"string",begin:/<.*?>/,end:/$/,illegal:"\\n"},t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE]},{className:"class",begin:"("+l.keyword.join("|")+")\\b",end:/(\{|$)/,excludeEnd:!0,keywords:l,contains:[t.UNDERSCORE_TITLE_MODE]},{begin:"\\."+t.UNDERSCORE_IDENT_RE,relevance:0}]}}function Q3(t){const e=t.regex,n=["abs","accept","alarm","and","atan2","bind","binmode","bless","break","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","continue","cos","crypt","dbmclose","dbmopen","defined","delete","die","do","dump","each","else","elsif","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","eval","exec","exists","exit","exp","fcntl","fileno","flock","for","foreach","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","goto","grep","gt","hex","if","index","int","ioctl","join","keys","kill","last","lc","lcfirst","length","link","listen","local","localtime","log","lstat","lt","ma","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","ne","next","no","not","oct","open","opendir","or","ord","our","pack","package","pipe","pop","pos","print","printf","prototype","push","q|0","qq","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","require","reset","return","reverse","rewinddir","rindex","rmdir","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sin","sleep","socket","socketpair","sort","splice","split","sprintf","sqrt","srand","stat","state","study","sub","substr","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unless","unlink","unpack","unshift","untie","until","use","utime","values","vec","wait","waitpid","wantarray","warn","when","while","write","x|0","xor","y|0"],r=/[dualxmsipngr]{0,12}/,o={$pattern:/[\w.]+/,keyword:n.join(" ")},a={className:"subst",begin:"[$@]\\{",end:"\\}",keywords:o},s={begin:/->\{/,end:/\}/},i={variants:[{begin:/\$\d/},{begin:e.concat(/[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,"(?![A-Za-z])(?![@$%])")},{begin:/[$%@][^\s\w{]/,relevance:0}]},l=[t.BACKSLASH_ESCAPE,a,i],u=[/!/,/\//,/\|/,/\?/,/'/,/"/,/#/],c=(f,b,A="\\1")=>{const y=A==="\\1"?A:e.concat(A,b);return e.concat(e.concat("(?:",f,")"),b,/(?:\\.|[^\\\/])*?/,y,/(?:\\.|[^\\\/])*?/,A,r)},p=(f,b,A)=>e.concat(e.concat("(?:",f,")"),b,/(?:\\.|[^\\\/])*?/,A,r),d=[i,t.HASH_COMMENT_MODE,t.COMMENT(/^=\w/,/=cut/,{endsWithParent:!0}),s,{className:"string",contains:l,variants:[{begin:"q[qwxr]?\\s*\\(",end:"\\)",relevance:5},{begin:"q[qwxr]?\\s*\\[",end:"\\]",relevance:5},{begin:"q[qwxr]?\\s*\\{",end:"\\}",relevance:5},{begin:"q[qwxr]?\\s*\\|",end:"\\|",relevance:5},{begin:"q[qwxr]?\\s*<",end:">",relevance:5},{begin:"qw\\s+q",end:"q",relevance:5},{begin:"'",end:"'",contains:[t.BACKSLASH_ESCAPE]},{begin:'"',end:'"'},{begin:"`",end:"`",contains:[t.BACKSLASH_ESCAPE]},{begin:/\{\w+\}/,relevance:0},{begin:"-?\\w+\\s*=>",relevance:0}]},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\/\\/|"+t.RE_STARTERS_RE+"|\\b(split|return|print|reverse|grep)\\b)\\s*",keywords:"split return print reverse grep",relevance:0,contains:[t.HASH_COMMENT_MODE,{className:"regexp",variants:[{begin:c("s|tr|y",e.either(...u,{capture:!0}))},{begin:c("s|tr|y","\\(","\\)")},{begin:c("s|tr|y","\\[","\\]")},{begin:c("s|tr|y","\\{","\\}")}],relevance:2},{className:"regexp",variants:[{begin:/(m|qr)\/\//,relevance:0},{begin:p("(?:m|qr)?",/\//,/\//)},{begin:p("m|qr",e.either(...u,{capture:!0}),/\1/)},{begin:p("m|qr",/\(/,/\)/)},{begin:p("m|qr",/\[/,/\]/)},{begin:p("m|qr",/\{/,/\}/)}]}]},{className:"function",beginKeywords:"sub",end:"(\\s*\\(.*?\\))?[;{]",excludeEnd:!0,relevance:5,contains:[t.TITLE_MODE]},{begin:"-\\w\\b",relevance:0},{begin:"^__DATA__$",end:"^__END__$",subLanguage:"mojolicious",contains:[{begin:"^@@.*",end:"$",className:"comment"}]}];return a.contains=d,s.contains=d,{name:"Perl",aliases:["pl","pm"],keywords:o,contains:d}}function J3(t){const e=t.COMMENT("--","$"),n="[a-zA-Z_][a-zA-Z_0-9$]*",r="\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$",o="<<\\s*"+n+"\\s*>>",a="ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY ",s="SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ",i="ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ",l="BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ",u=l.trim().split(" ").map(function(A){return A.split("|")[0]}).join("|"),c="CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ",p="FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ",d="SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED ",b="ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ".trim().split(" ").map(function(A){return A.split("|")[0]}).join("|");return{name:"PostgreSQL",aliases:["postgres","postgresql"],supersetOf:"sql",case_insensitive:!0,keywords:{keyword:a+i+s,built_in:c+p+d},illegal:/:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,contains:[{className:"keyword",variants:[{begin:/\bTEXT\s*SEARCH\b/},{begin:/\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/},{begin:/\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/},{begin:/\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/},{begin:/\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/},{begin:/\bNULLS\s+(FIRST|LAST)\b/},{begin:/\bEVENT\s+TRIGGER\b/},{begin:/\b(MAPPING|OR)\s+REPLACE\b/},{begin:/\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/},{begin:/\b(SHARE|EXCLUSIVE)\s+MODE\b/},{begin:/\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/},{begin:/\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/},{begin:/\bPRESERVE\s+ROWS\b/},{begin:/\bDISCARD\s+PLANS\b/},{begin:/\bREFERENCING\s+(OLD|NEW)\b/},{begin:/\bSKIP\s+LOCKED\b/},{begin:/\bGROUPING\s+SETS\b/},{begin:/\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/},{begin:/\b(WITH|WITHOUT)\s+HOLD\b/},{begin:/\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/},{begin:/\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/},{begin:/\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/},{begin:/\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/},{begin:/\bIS\s+(NOT\s+)?UNKNOWN\b/},{begin:/\bSECURITY\s+LABEL\b/},{begin:/\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/},{begin:/\bWITH\s+(NO\s+)?DATA\b/},{begin:/\b(FOREIGN|SET)\s+DATA\b/},{begin:/\bSET\s+(CATALOG|CONSTRAINTS)\b/},{begin:/\b(WITH|FOR)\s+ORDINALITY\b/},{begin:/\bIS\s+(NOT\s+)?DOCUMENT\b/},{begin:/\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/},{begin:/\b(STRIP|PRESERVE)\s+WHITESPACE\b/},{begin:/\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/},{begin:/\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/},{begin:/\bAT\s+TIME\s+ZONE\b/},{begin:/\bGRANTED\s+BY\b/},{begin:/\bRETURN\s+(QUERY|NEXT)\b/},{begin:/\b(ATTACH|DETACH)\s+PARTITION\b/},{begin:/\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/},{begin:/\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/},{begin:/\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/}]},{begin:/\b(FORMAT|FAMILY|VERSION)\s*\(/},{begin:/\bINCLUDE\s*\(/,keywords:"INCLUDE"},{begin:/\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/},{begin:/\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/},{begin:/\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,relevance:10},{begin:/\bEXTRACT\s*\(/,end:/\bFROM\b/,returnEnd:!0,keywords:{type:"CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"}},{begin:/\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,keywords:{keyword:"NAME"}},{begin:/\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,keywords:{keyword:"DOCUMENT CONTENT"}},{beginKeywords:"CACHE INCREMENT MAXVALUE MINVALUE",end:t.C_NUMBER_RE,returnEnd:!0,keywords:"BY CACHE INCREMENT MAXVALUE MINVALUE"},{className:"type",begin:/\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/},{className:"type",begin:/\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/},{begin:/\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,keywords:{keyword:"RETURNS",type:"LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"}},{begin:"\\b("+b+")\\s*\\("},{begin:"\\.("+u+")\\b"},{begin:"\\b("+u+")\\s+PATH\\b",keywords:{keyword:"PATH",type:l.replace("PATH ","")}},{className:"type",begin:"\\b("+u+")\\b"},{className:"string",begin:"'",end:"'",contains:[{begin:"''"}]},{className:"string",begin:"(e|E|u&|U&)'",end:"'",contains:[{begin:"\\\\."}],relevance:10},t.END_SAME_AS_BEGIN({begin:r,end:r,contains:[{subLanguage:["pgsql","perl","python","tcl","r","lua","java","php","ruby","bash","scheme","xml","json"],endsWithParent:!0}]}),{begin:'"',end:'"',contains:[{begin:'""'}]},t.C_NUMBER_MODE,t.C_BLOCK_COMMENT_MODE,e,{className:"meta",variants:[{begin:"%(ROW)?TYPE",relevance:10},{begin:"\\$\\d+"},{begin:"^#\\w",end:"$"}]},{className:"symbol",begin:o,relevance:10}]}}function e8(t){const e=t.regex,n=/(?![A-Za-z0-9])(?![$])/,r=e.concat(/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,n),o=e.concat(/(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,n),a={scope:"variable",match:"\\$+"+r},s={scope:"meta",variants:[{begin:/<\?php/,relevance:10},{begin:/<\?=/},{begin:/<\?/,relevance:.1},{begin:/\?>/}]},i={scope:"subst",variants:[{begin:/\$\w+/},{begin:/\{\$/,end:/\}/}]},l=t.inherit(t.APOS_STRING_MODE,{illegal:null}),u=t.inherit(t.QUOTE_STRING_MODE,{illegal:null,contains:t.QUOTE_STRING_MODE.contains.concat(i)}),c={begin:/<<<[ \t]*(?:(\w+)|"(\w+)")\n/,end:/[ \t]*(\w+)\b/,contains:t.QUOTE_STRING_MODE.contains.concat(i),"on:begin":(K,O)=>{O.data._beginMatch=K[1]||K[2]},"on:end":(K,O)=>{O.data._beginMatch!==K[1]&&O.ignoreMatch()}},p=t.END_SAME_AS_BEGIN({begin:/<<<[ \t]*'(\w+)'\n/,end:/[ \t]*(\w+)\b/}),d=`[ 	
]`,f={scope:"string",variants:[u,l,c,p]},b={scope:"number",variants:[{begin:"\\b0[bB][01]+(?:_[01]+)*\\b"},{begin:"\\b0[oO][0-7]+(?:_[0-7]+)*\\b"},{begin:"\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b"},{begin:"(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?"}],relevance:0},A=["false","null","true"],y=["__CLASS__","__DIR__","__FILE__","__FUNCTION__","__COMPILER_HALT_OFFSET__","__LINE__","__METHOD__","__NAMESPACE__","__TRAIT__","die","echo","exit","include","include_once","print","require","require_once","array","abstract","and","as","binary","bool","boolean","break","callable","case","catch","class","clone","const","continue","declare","default","do","double","else","elseif","empty","enddeclare","endfor","endforeach","endif","endswitch","endwhile","enum","eval","extends","final","finally","float","for","foreach","from","global","goto","if","implements","instanceof","insteadof","int","integer","interface","isset","iterable","list","match|0","mixed","new","never","object","or","private","protected","public","readonly","real","return","string","switch","throw","trait","try","unset","use","var","void","while","xor","yield"],h=["Error|0","AppendIterator","ArgumentCountError","ArithmeticError","ArrayIterator","ArrayObject","AssertionError","BadFunctionCallException","BadMethodCallException","CachingIterator","CallbackFilterIterator","CompileError","Countable","DirectoryIterator","DivisionByZeroError","DomainException","EmptyIterator","ErrorException","Exception","FilesystemIterator","FilterIterator","GlobIterator","InfiniteIterator","InvalidArgumentException","IteratorIterator","LengthException","LimitIterator","LogicException","MultipleIterator","NoRewindIterator","OutOfBoundsException","OutOfRangeException","OuterIterator","OverflowException","ParentIterator","ParseError","RangeException","RecursiveArrayIterator","RecursiveCachingIterator","RecursiveCallbackFilterIterator","RecursiveDirectoryIterator","RecursiveFilterIterator","RecursiveIterator","RecursiveIteratorIterator","RecursiveRegexIterator","RecursiveTreeIterator","RegexIterator","RuntimeException","SeekableIterator","SplDoublyLinkedList","SplFileInfo","SplFileObject","SplFixedArray","SplHeap","SplMaxHeap","SplMinHeap","SplObjectStorage","SplObserver","SplPriorityQueue","SplQueue","SplStack","SplSubject","SplTempFileObject","TypeError","UnderflowException","UnexpectedValueException","UnhandledMatchError","ArrayAccess","BackedEnum","Closure","Fiber","Generator","Iterator","IteratorAggregate","Serializable","Stringable","Throwable","Traversable","UnitEnum","WeakReference","WeakMap","Directory","__PHP_Incomplete_Class","parent","php_user_filter","self","static","stdClass"],E={keyword:y,literal:(K=>{const O=[];return K.forEach(V=>{O.push(V),V.toLowerCase()===V?O.push(V.toUpperCase()):O.push(V.toLowerCase())}),O})(A),built_in:h},_=K=>K.map(O=>O.replace(/\|\d+$/,"")),T={variants:[{match:[/new/,e.concat(d,"+"),e.concat("(?!",_(h).join("\\b|"),"\\b)"),o],scope:{1:"keyword",4:"title.class"}}]},v=e.concat(r,"\\b(?!\\()"),N={variants:[{match:[e.concat(/::/,e.lookahead(/(?!class\b)/)),v],scope:{2:"variable.constant"}},{match:[/::/,/class/],scope:{2:"variable.language"}},{match:[o,e.concat(/::/,e.lookahead(/(?!class\b)/)),v],scope:{1:"title.class",3:"variable.constant"}},{match:[o,e.concat("::",e.lookahead(/(?!class\b)/))],scope:{1:"title.class"}},{match:[o,/::/,/class/],scope:{1:"title.class",3:"variable.language"}}]},R={scope:"attr",match:e.concat(r,e.lookahead(":"),e.lookahead(/(?!::)/))},H={relevance:0,begin:/\(/,end:/\)/,keywords:E,contains:[R,a,N,t.C_BLOCK_COMMENT_MODE,f,b,T]},I={relevance:0,match:[/\b/,e.concat("(?!fn\\b|function\\b|",_(y).join("\\b|"),"|",_(h).join("\\b|"),"\\b)"),r,e.concat(d,"*"),e.lookahead(/(?=\()/)],scope:{3:"title.function.invoke"},contains:[H]};H.contains.push(I);const W=[R,N,t.C_BLOCK_COMMENT_MODE,f,b,T],le={begin:e.concat(/#\[\s*/,o),beginScope:"meta",end:/]/,endScope:"meta",keywords:{literal:A,keyword:["new","array"]},contains:[{begin:/\[/,end:/]/,keywords:{literal:A,keyword:["new","array"]},contains:["self",...W]},...W,{scope:"meta",match:o}]};return{case_insensitive:!1,keywords:E,contains:[le,t.HASH_COMMENT_MODE,t.COMMENT("//","$"),t.COMMENT("/\\*","\\*/",{contains:[{scope:"doctag",match:"@[A-Za-z]+"}]}),{match:/__halt_compiler\(\);/,keywords:"__halt_compiler",starts:{scope:"comment",end:t.MATCH_NOTHING_RE,contains:[{match:/\?>/,scope:"meta",endsParent:!0}]}},s,{scope:"variable.language",match:/\$this\b/},a,I,N,{match:[/const/,/\s/,r],scope:{1:"keyword",3:"variable.constant"}},T,{scope:"function",relevance:0,beginKeywords:"fn function",end:/[;{]/,excludeEnd:!0,illegal:"[$%\\[]",contains:[{beginKeywords:"use"},t.UNDERSCORE_TITLE_MODE,{begin:"=>",endsParent:!0},{scope:"params",begin:"\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0,keywords:E,contains:["self",a,N,t.C_BLOCK_COMMENT_MODE,f,b]}]},{scope:"class",variants:[{beginKeywords:"enum",illegal:/[($"]/},{beginKeywords:"class interface trait",illegal:/[:($"]/}],relevance:0,end:/\{/,excludeEnd:!0,contains:[{beginKeywords:"extends implements"},t.UNDERSCORE_TITLE_MODE]},{beginKeywords:"namespace",relevance:0,end:";",illegal:/[.']/,contains:[t.inherit(t.UNDERSCORE_TITLE_MODE,{scope:"title.class"})]},{beginKeywords:"use",relevance:0,end:";",contains:[{match:/\b(as|const|function)\b/,scope:"keyword"},t.UNDERSCORE_TITLE_MODE]},f,b]}}function t8(t){return{name:"PHP template",subLanguage:"xml",contains:[{begin:/<\?(php|=)?/,end:/\?>/,subLanguage:"php",contains:[{begin:"/\\*",end:"\\*/",skip:!0},{begin:'b"',end:'"',skip:!0},{begin:"b'",end:"'",skip:!0},t.inherit(t.APOS_STRING_MODE,{illegal:null,className:null,contains:null,skip:!0}),t.inherit(t.QUOTE_STRING_MODE,{illegal:null,className:null,contains:null,skip:!0})]}]}}function n8(t){return{name:"Plain text",aliases:["text","txt"],disableAutodetect:!0}}function r8(t){const e=t.regex,n=new RegExp("[\\p{XID_Start}_]\\p{XID_Continue}*","u"),r=["and","as","assert","async","await","break","case","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","match","nonlocal|10","not","or","pass","raise","return","try","while","with","yield"],i={$pattern:/[A-Za-z]\w+|__\w+__/,keyword:r,built_in:["__import__","abs","all","any","ascii","bin","bool","breakpoint","bytearray","bytes","callable","chr","classmethod","compile","complex","delattr","dict","dir","divmod","enumerate","eval","exec","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","isinstance","issubclass","iter","len","list","locals","map","max","memoryview","min","next","object","oct","open","ord","pow","print","property","range","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","vars","zip"],literal:["__debug__","Ellipsis","False","None","NotImplemented","True"],type:["Any","Callable","Coroutine","Dict","List","Literal","Generic","Optional","Sequence","Set","Tuple","Type","Union"]},l={className:"meta",begin:/^(>>>|\.\.\.) /},u={className:"subst",begin:/\{/,end:/\}/,keywords:i,illegal:/#/},c={begin:/\{\{/,relevance:0},p={className:"string",contains:[t.BACKSLASH_ESCAPE],variants:[{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,end:/'''/,contains:[t.BACKSLASH_ESCAPE,l],relevance:10},{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,end:/"""/,contains:[t.BACKSLASH_ESCAPE,l],relevance:10},{begin:/([fF][rR]|[rR][fF]|[fF])'''/,end:/'''/,contains:[t.BACKSLASH_ESCAPE,l,c,u]},{begin:/([fF][rR]|[rR][fF]|[fF])"""/,end:/"""/,contains:[t.BACKSLASH_ESCAPE,l,c,u]},{begin:/([uU]|[rR])'/,end:/'/,relevance:10},{begin:/([uU]|[rR])"/,end:/"/,relevance:10},{begin:/([bB]|[bB][rR]|[rR][bB])'/,end:/'/},{begin:/([bB]|[bB][rR]|[rR][bB])"/,end:/"/},{begin:/([fF][rR]|[rR][fF]|[fF])'/,end:/'/,contains:[t.BACKSLASH_ESCAPE,c,u]},{begin:/([fF][rR]|[rR][fF]|[fF])"/,end:/"/,contains:[t.BACKSLASH_ESCAPE,c,u]},t.APOS_STRING_MODE,t.QUOTE_STRING_MODE]},d="[0-9](_?[0-9])*",f=`(\\b(${d}))?\\.(${d})|\\b(${d})\\.`,b=`\\b|${r.join("|")}`,A={className:"number",relevance:0,variants:[{begin:`(\\b(${d})|(${f}))[eE][+-]?(${d})[jJ]?(?=${b})`},{begin:`(${f})[jJ]?`},{begin:`\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${b})`},{begin:`\\b0[bB](_?[01])+[lL]?(?=${b})`},{begin:`\\b0[oO](_?[0-7])+[lL]?(?=${b})`},{begin:`\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${b})`},{begin:`\\b(${d})[jJ](?=${b})`}]},y={className:"comment",begin:e.lookahead(/# type:/),end:/$/,keywords:i,contains:[{begin:/# type:/},{begin:/#/,end:/\b\B/,endsWithParent:!0}]},h={className:"params",variants:[{className:"",begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:i,contains:["self",l,A,p,t.HASH_COMMENT_MODE]}]};return u.contains=[p,A,l],{name:"Python",aliases:["py","gyp","ipython"],unicodeRegex:!0,keywords:i,illegal:/(<\/|\?)|=>/,contains:[l,A,{begin:/\bself\b/},{beginKeywords:"if",relevance:0},p,y,t.HASH_COMMENT_MODE,{match:[/\bdef/,/\s+/,n],scope:{1:"keyword",3:"title.function"},contains:[h]},{variants:[{match:[/\bclass/,/\s+/,n,/\s*/,/\(\s*/,n,/\s*\)/]},{match:[/\bclass/,/\s+/,n]}],scope:{1:"keyword",3:"title.class",6:"title.class.inherited"}},{className:"meta",begin:/^[\t ]*@/,end:/(?=#)|$/,contains:[A,h,p]}]}}function o8(t){return{aliases:["pycon"],contains:[{className:"meta.prompt",starts:{end:/ |$/,starts:{end:"$",subLanguage:"python"}},variants:[{begin:/^>>>(?=[ ]|$)/},{begin:/^\.\.\.(?=[ ]|$)/}]}]}}function a8(t){const e=t.regex,n=/(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/,r=e.either(/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,/0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,/(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/),o=/[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/,a=e.either(/[()]/,/[{}]/,/\[\[/,/[[\]]/,/\\/,/,/);return{name:"R",keywords:{$pattern:n,keyword:"function if in break next repeat else for while",literal:"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",built_in:"LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"},contains:[t.COMMENT(/#'/,/$/,{contains:[{scope:"doctag",match:/@examples/,starts:{end:e.lookahead(e.either(/\n^#'\s*(?=@[a-zA-Z]+)/,/\n^(?!#')/)),endsParent:!0}},{scope:"doctag",begin:"@param",end:/$/,contains:[{scope:"variable",variants:[{match:n},{match:/`(?:\\.|[^`\\])+`/}],endsParent:!0}]},{scope:"doctag",match:/@[a-zA-Z]+/},{scope:"keyword",match:/\\[a-zA-Z]+/}]}),t.HASH_COMMENT_MODE,{scope:"string",contains:[t.BACKSLASH_ESCAPE],variants:[t.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\(/,end:/\)(-*)"/}),t.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\{/,end:/\}(-*)"/}),t.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\[/,end:/\](-*)"/}),t.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\(/,end:/\)(-*)'/}),t.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\{/,end:/\}(-*)'/}),t.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\[/,end:/\](-*)'/}),{begin:'"',end:'"',relevance:0},{begin:"'",end:"'",relevance:0}]},{relevance:0,variants:[{scope:{1:"operator",2:"number"},match:[o,r]},{scope:{1:"operator",2:"number"},match:[/%[^%]*%/,r]},{scope:{1:"punctuation",2:"number"},match:[a,r]},{scope:{2:"number"},match:[/[^a-zA-Z0-9._]|^/,r]}]},{scope:{3:"operator"},match:[n,/\s+/,/<-/,/\s+/]},{scope:"operator",relevance:0,variants:[{match:o},{match:/%[^%]*%/}]},{scope:"punctuation",relevance:0,match:a},{begin:"`",end:"`",contains:[{begin:/\\./}]}]}}function s8(t){const e=t.regex,n="([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)",r=e.either(/\b([A-Z]+[a-z0-9]+)+/,/\b([A-Z]+[a-z0-9]+)+[A-Z]+/),o=e.concat(r,/(::\w+)*/),s={"variable.constant":["__FILE__","__LINE__","__ENCODING__"],"variable.language":["self","super"],keyword:["alias","and","begin","BEGIN","break","case","class","defined","do","else","elsif","end","END","ensure","for","if","in","module","next","not","or","redo","require","rescue","retry","return","then","undef","unless","until","when","while","yield",...["include","extend","prepend","public","private","protected","raise","throw"]],built_in:["proc","lambda","attr_accessor","attr_reader","attr_writer","define_method","private_constant","module_function"],literal:["true","false","nil"]},i={className:"doctag",begin:"@[A-Za-z]+"},l={begin:"#<",end:">"},u=[t.COMMENT("#","$",{contains:[i]}),t.COMMENT("^=begin","^=end",{contains:[i],relevance:10}),t.COMMENT("^__END__",t.MATCH_NOTHING_RE)],c={className:"subst",begin:/#\{/,end:/\}/,keywords:s},p={className:"string",contains:[t.BACKSLASH_ESCAPE,c],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/`/,end:/`/},{begin:/%[qQwWx]?\(/,end:/\)/},{begin:/%[qQwWx]?\[/,end:/\]/},{begin:/%[qQwWx]?\{/,end:/\}/},{begin:/%[qQwWx]?</,end:/>/},{begin:/%[qQwWx]?\//,end:/\//},{begin:/%[qQwWx]?%/,end:/%/},{begin:/%[qQwWx]?-/,end:/-/},{begin:/%[qQwWx]?\|/,end:/\|/},{begin:/\B\?(\\\d{1,3})/},{begin:/\B\?(\\x[A-Fa-f0-9]{1,2})/},{begin:/\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/},{begin:/\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/},{begin:/\B\?\\(c|C-)[\x20-\x7e]/},{begin:/\B\?\\?\S/},{begin:e.concat(/<<[-~]?'?/,e.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)),contains:[t.END_SAME_AS_BEGIN({begin:/(\w+)/,end:/(\w+)/,contains:[t.BACKSLASH_ESCAPE,c]})]}]},d="[1-9](_?[0-9])*|0",f="[0-9](_?[0-9])*",b={className:"number",relevance:0,variants:[{begin:`\\b(${d})(\\.(${f}))?([eE][+-]?(${f})|r)?i?\\b`},{begin:"\\b0[dD][0-9](_?[0-9])*r?i?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*r?i?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*r?i?\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b"},{begin:"\\b0(_?[0-7])+r?i?\\b"}]},A={variants:[{match:/\(\)/},{className:"params",begin:/\(/,end:/(?=\))/,excludeBegin:!0,endsParent:!0,keywords:s}]},v=[p,{variants:[{match:[/class\s+/,o,/\s+<\s+/,o]},{match:[/\b(class|module)\s+/,o]}],scope:{2:"title.class",4:"title.class.inherited"},keywords:s},{match:[/(include|extend)\s+/,o],scope:{2:"title.class"},keywords:s},{relevance:0,match:[o,/\.new[. (]/],scope:{1:"title.class"}},{relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,className:"variable.constant"},{relevance:0,match:r,scope:"title.class"},{match:[/def/,/\s+/,n],scope:{1:"keyword",3:"title.function"},contains:[A]},{begin:t.IDENT_RE+"::"},{className:"symbol",begin:t.UNDERSCORE_IDENT_RE+"(!|\\?)?:",relevance:0},{className:"symbol",begin:":(?!\\s)",contains:[p,{begin:n}],relevance:0},b,{className:"variable",begin:"(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"},{className:"params",begin:/\|/,end:/\|/,excludeBegin:!0,excludeEnd:!0,relevance:0,keywords:s},{begin:"("+t.RE_STARTERS_RE+"|unless)\\s*",keywords:"unless",contains:[{className:"regexp",contains:[t.BACKSLASH_ESCAPE,c],illegal:/\n/,variants:[{begin:"/",end:"/[a-z]*"},{begin:/%r\{/,end:/\}[a-z]*/},{begin:"%r\\(",end:"\\)[a-z]*"},{begin:"%r!",end:"![a-z]*"},{begin:"%r\\[",end:"\\][a-z]*"}]}].concat(l,u),relevance:0}].concat(l,u);c.contains=v,A.contains=v;const I=[{begin:/^\s*=>/,starts:{end:"$",contains:v}},{className:"meta.prompt",begin:"^("+"[>?]>"+"|"+"[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]"+"|"+"(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>"+")(?=[ ])",starts:{end:"$",keywords:s,contains:v}}];return u.unshift(l),{name:"Ruby",aliases:["rb","gemspec","podspec","thor","irb"],keywords:s,illegal:/\/\*/,contains:[t.SHEBANG({binary:"ruby"})].concat(I).concat(u).concat(v)}}function i8(t){const e=t.regex,n={className:"title.function.invoke",relevance:0,begin:e.concat(/\b/,/(?!let|for|while|if|else|match\b)/,t.IDENT_RE,e.lookahead(/\s*\(/))},r="([ui](8|16|32|64|128|size)|f(32|64))?",o=["abstract","as","async","await","become","box","break","const","continue","crate","do","dyn","else","enum","extern","false","final","fn","for","if","impl","in","let","loop","macro","match","mod","move","mut","override","priv","pub","ref","return","self","Self","static","struct","super","trait","true","try","type","typeof","unsafe","unsized","use","virtual","where","while","yield"],a=["true","false","Some","None","Ok","Err"],s=["drop ","Copy","Send","Sized","Sync","Drop","Fn","FnMut","FnOnce","ToOwned","Clone","Debug","PartialEq","PartialOrd","Eq","Ord","AsRef","AsMut","Into","From","Default","Iterator","Extend","IntoIterator","DoubleEndedIterator","ExactSizeIterator","SliceConcatExt","ToString","assert!","assert_eq!","bitflags!","bytes!","cfg!","col!","concat!","concat_idents!","debug_assert!","debug_assert_eq!","env!","eprintln!","panic!","file!","format!","format_args!","include_bytes!","include_str!","line!","local_data_key!","module_path!","option_env!","print!","println!","select!","stringify!","try!","unimplemented!","unreachable!","vec!","write!","writeln!","macro_rules!","assert_ne!","debug_assert_ne!"],i=["i8","i16","i32","i64","i128","isize","u8","u16","u32","u64","u128","usize","f32","f64","str","char","bool","Box","Option","Result","String","Vec"];return{name:"Rust",aliases:["rs"],keywords:{$pattern:t.IDENT_RE+"!?",type:i,keyword:o,literal:a,built_in:s},illegal:"</",contains:[t.C_LINE_COMMENT_MODE,t.COMMENT("/\\*","\\*/",{contains:["self"]}),t.inherit(t.QUOTE_STRING_MODE,{begin:/b?"/,illegal:null}),{className:"string",variants:[{begin:/b?r(#*)"(.|\n)*?"\1(?!#)/},{begin:/b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/}]},{className:"symbol",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:"number",variants:[{begin:"\\b0b([01_]+)"+r},{begin:"\\b0o([0-7_]+)"+r},{begin:"\\b0x([A-Fa-f0-9_]+)"+r},{begin:"\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)"+r}],relevance:0},{begin:[/fn/,/\s+/,t.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"title.function"}},{className:"meta",begin:"#!?\\[",end:"\\]",contains:[{className:"string",begin:/"/,end:/"/}]},{begin:[/let/,/\s+/,/(?:mut\s+)?/,t.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"keyword",4:"variable"}},{begin:[/for/,/\s+/,t.UNDERSCORE_IDENT_RE,/\s+/,/in/],className:{1:"keyword",3:"variable",5:"keyword"}},{begin:[/type/,/\s+/,t.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"title.class"}},{begin:[/(?:trait|enum|struct|union|impl|for)/,/\s+/,t.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"title.class"}},{begin:t.IDENT_RE+"::",keywords:{keyword:"Self",built_in:s,type:i}},{className:"punctuation",begin:"->"},n]}}const l8=t=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:t.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:t.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z_][A-Za-z0-9_-]*/}}),u8=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],c8=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],d8=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],p8=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],f8=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","block-size","border","border-block","border-block-color","border-block-end","border-block-end-color","border-block-end-style","border-block-end-width","border-block-start","border-block-start-color","border-block-start-style","border-block-start-width","border-block-style","border-block-width","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-inline","border-inline-color","border-inline-end","border-inline-end-color","border-inline-end-style","border-inline-end-width","border-inline-start","border-inline-start-color","border-inline-start-style","border-inline-start-width","border-inline-style","border-inline-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inline-size","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-block","margin-block-end","margin-block-start","margin-bottom","margin-inline","margin-inline-end","margin-inline-start","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-block-size","max-height","max-inline-size","max-width","min-block-size","min-height","min-inline-size","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-block","padding-block-end","padding-block-start","padding-bottom","padding-inline","padding-inline-end","padding-inline-start","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","scrollbar-color","scrollbar-gutter","scrollbar-width","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse();function m8(t){const e=l8(t),n=p8,r=d8,o="@[a-z-]+",a="and or not only",i={className:"variable",begin:"(\\$"+"[a-zA-Z-][a-zA-Z0-9_-]*"+")\\b",relevance:0};return{name:"SCSS",case_insensitive:!0,illegal:"[=/|']",contains:[t.C_LINE_COMMENT_MODE,t.C_BLOCK_COMMENT_MODE,e.CSS_NUMBER_MODE,{className:"selector-id",begin:"#[A-Za-z0-9_-]+",relevance:0},{className:"selector-class",begin:"\\.[A-Za-z0-9_-]+",relevance:0},e.ATTRIBUTE_SELECTOR_MODE,{className:"selector-tag",begin:"\\b("+u8.join("|")+")\\b",relevance:0},{className:"selector-pseudo",begin:":("+r.join("|")+")"},{className:"selector-pseudo",begin:":(:)?("+n.join("|")+")"},i,{begin:/\(/,end:/\)/,contains:[e.CSS_NUMBER_MODE]},e.CSS_VARIABLE,{className:"attribute",begin:"\\b("+f8.join("|")+")\\b"},{begin:"\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b"},{begin:/:/,end:/[;}{]/,relevance:0,contains:[e.BLOCK_COMMENT,i,e.HEXCOLOR,e.CSS_NUMBER_MODE,t.QUOTE_STRING_MODE,t.APOS_STRING_MODE,e.IMPORTANT,e.FUNCTION_DISPATCH]},{begin:"@(page|font-face)",keywords:{$pattern:o,keyword:"@page @font-face"}},{begin:"@",end:"[{;]",returnBegin:!0,keywords:{$pattern:/[a-z-]+/,keyword:a,attribute:c8.join(" ")},contains:[{begin:o,className:"keyword"},{begin:/[a-z-]+(?=:)/,className:"attribute"},i,t.QUOTE_STRING_MODE,t.APOS_STRING_MODE,e.HEXCOLOR,e.CSS_NUMBER_MODE]},e.FUNCTION_DISPATCH]}}function g8(t){return{name:"Shell Session",aliases:["console","shellsession"],contains:[{className:"meta.prompt",begin:/^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,starts:{end:/[^\\](?=\s*$)/,subLanguage:"bash"}}]}}function h8(t){const e=t.regex,n=t.COMMENT("--","$"),r={className:"string",variants:[{begin:/'/,end:/'/,contains:[{begin:/''/}]}]},o={begin:/"/,end:/"/,contains:[{begin:/""/}]},a=["true","false","unknown"],s=["double precision","large object","with timezone","without timezone"],i=["bigint","binary","blob","boolean","char","character","clob","date","dec","decfloat","decimal","float","int","integer","interval","nchar","nclob","national","numeric","real","row","smallint","time","timestamp","varchar","varying","varbinary"],l=["add","asc","collation","desc","final","first","last","view"],u=["abs","acos","all","allocate","alter","and","any","are","array","array_agg","array_max_cardinality","as","asensitive","asin","asymmetric","at","atan","atomic","authorization","avg","begin","begin_frame","begin_partition","between","bigint","binary","blob","boolean","both","by","call","called","cardinality","cascaded","case","cast","ceil","ceiling","char","char_length","character","character_length","check","classifier","clob","close","coalesce","collate","collect","column","commit","condition","connect","constraint","contains","convert","copy","corr","corresponding","cos","cosh","count","covar_pop","covar_samp","create","cross","cube","cume_dist","current","current_catalog","current_date","current_default_transform_group","current_path","current_role","current_row","current_schema","current_time","current_timestamp","current_path","current_role","current_transform_group_for_type","current_user","cursor","cycle","date","day","deallocate","dec","decimal","decfloat","declare","default","define","delete","dense_rank","deref","describe","deterministic","disconnect","distinct","double","drop","dynamic","each","element","else","empty","end","end_frame","end_partition","end-exec","equals","escape","every","except","exec","execute","exists","exp","external","extract","false","fetch","filter","first_value","float","floor","for","foreign","frame_row","free","from","full","function","fusion","get","global","grant","group","grouping","groups","having","hold","hour","identity","in","indicator","initial","inner","inout","insensitive","insert","int","integer","intersect","intersection","interval","into","is","join","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","language","large","last_value","lateral","lead","leading","left","like","like_regex","listagg","ln","local","localtime","localtimestamp","log","log10","lower","match","match_number","match_recognize","matches","max","member","merge","method","min","minute","mod","modifies","module","month","multiset","national","natural","nchar","nclob","new","no","none","normalize","not","nth_value","ntile","null","nullif","numeric","octet_length","occurrences_regex","of","offset","old","omit","on","one","only","open","or","order","out","outer","over","overlaps","overlay","parameter","partition","pattern","per","percent","percent_rank","percentile_cont","percentile_disc","period","portion","position","position_regex","power","precedes","precision","prepare","primary","procedure","ptf","range","rank","reads","real","recursive","ref","references","referencing","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","release","result","return","returns","revoke","right","rollback","rollup","row","row_number","rows","running","savepoint","scope","scroll","search","second","seek","select","sensitive","session_user","set","show","similar","sin","sinh","skip","smallint","some","specific","specifictype","sql","sqlexception","sqlstate","sqlwarning","sqrt","start","static","stddev_pop","stddev_samp","submultiset","subset","substring","substring_regex","succeeds","sum","symmetric","system","system_time","system_user","table","tablesample","tan","tanh","then","time","timestamp","timezone_hour","timezone_minute","to","trailing","translate","translate_regex","translation","treat","trigger","trim","trim_array","true","truncate","uescape","union","unique","unknown","unnest","update","upper","user","using","value","values","value_of","var_pop","var_samp","varbinary","varchar","varying","versioning","when","whenever","where","width_bucket","window","with","within","without","year"],c=["abs","acos","array_agg","asin","atan","avg","cast","ceil","ceiling","coalesce","corr","cos","cosh","count","covar_pop","covar_samp","cume_dist","dense_rank","deref","element","exp","extract","first_value","floor","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","last_value","lead","listagg","ln","log","log10","lower","max","min","mod","nth_value","ntile","nullif","percent_rank","percentile_cont","percentile_disc","position","position_regex","power","rank","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","row_number","sin","sinh","sqrt","stddev_pop","stddev_samp","substring","substring_regex","sum","tan","tanh","translate","translate_regex","treat","trim","trim_array","unnest","upper","value_of","var_pop","var_samp","width_bucket"],p=["current_catalog","current_date","current_default_transform_group","current_path","current_role","current_schema","current_transform_group_for_type","current_user","session_user","system_time","system_user","current_time","localtime","current_timestamp","localtimestamp"],d=["create table","insert into","primary key","foreign key","not null","alter table","add constraint","grouping sets","on overflow","character set","respect nulls","ignore nulls","nulls first","nulls last","depth first","breadth first"],f=c,b=[...u,...l].filter(E=>!c.includes(E)),A={className:"variable",begin:/@[a-z0-9][a-z0-9_]*/},y={className:"operator",begin:/[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,relevance:0},h={begin:e.concat(/\b/,e.either(...f),/\s*\(/),relevance:0,keywords:{built_in:f}};function g(E,{exceptions:_,when:T}={}){const v=T;return _=_||[],E.map(N=>N.match(/\|\d+$/)||_.includes(N)?N:v(N)?`${N}|0`:N)}return{name:"SQL",case_insensitive:!0,illegal:/[{}]|<\//,keywords:{$pattern:/\b[\w\.]+/,keyword:g(b,{when:E=>E.length<3}),literal:a,type:i,built_in:p},contains:[{begin:e.either(...d),relevance:0,keywords:{$pattern:/[\w\.]+/,keyword:b.concat(d),literal:a,type:i}},{className:"type",begin:e.either(...s)},h,A,r,o,t.C_NUMBER_MODE,t.C_BLOCK_COMMENT_MODE,n,y]}}function Lm(t){return t?typeof t=="string"?t:t.source:null}function js(t){return fe("(?=",t,")")}function fe(...t){return t.map(n=>Lm(n)).join("")}function E8(t){const e=t[t.length-1];return typeof e=="object"&&e.constructor===Object?(t.splice(t.length-1,1),e):{}}function it(...t){return"("+(E8(t).capture?"":"?:")+t.map(r=>Lm(r)).join("|")+")"}const rc=t=>fe(/\b/,t,/\w$/.test(t)?/\b/:/\B/),b8=["Protocol","Type"].map(rc),Om=["init","self"].map(rc),A8=["Any","Self"],oc=["actor","any","associatedtype","async","await",/as\?/,/as!/,"as","borrowing","break","case","catch","class","consume","consuming","continue","convenience","copy","default","defer","deinit","didSet","distributed","do","dynamic","each","else","enum","extension","fallthrough",/fileprivate\(set\)/,"fileprivate","final","for","func","get","guard","if","import","indirect","infix",/init\?/,/init!/,"inout",/internal\(set\)/,"internal","in","is","isolated","nonisolated","lazy","let","macro","mutating","nonmutating",/open\(set\)/,"open","operator","optional","override","postfix","precedencegroup","prefix",/private\(set\)/,"private","protocol",/public\(set\)/,"public","repeat","required","rethrows","return","set","some","static","struct","subscript","super","switch","throws","throw",/try\?/,/try!/,"try","typealias",/unowned\(safe\)/,/unowned\(unsafe\)/,"unowned","var","weak","where","while","willSet"],km=["false","nil","true"],_8=["assignment","associativity","higherThan","left","lowerThan","none","right"],v8=["#colorLiteral","#column","#dsohandle","#else","#elseif","#endif","#error","#file","#fileID","#fileLiteral","#filePath","#function","#if","#imageLiteral","#keyPath","#line","#selector","#sourceLocation","#warning"],Im=["abs","all","any","assert","assertionFailure","debugPrint","dump","fatalError","getVaList","isKnownUniquelyReferenced","max","min","numericCast","pointwiseMax","pointwiseMin","precondition","preconditionFailure","print","readLine","repeatElement","sequence","stride","swap","swift_unboxFromSwiftValueWithType","transcode","type","unsafeBitCast","unsafeDowncast","withExtendedLifetime","withUnsafeMutablePointer","withUnsafePointer","withVaList","withoutActuallyEscaping","zip"],Mm=it(/[/=\-+!*%<>&|^~?]/,/[\u00A1-\u00A7]/,/[\u00A9\u00AB]/,/[\u00AC\u00AE]/,/[\u00B0\u00B1]/,/[\u00B6\u00BB\u00BF\u00D7\u00F7]/,/[\u2016-\u2017]/,/[\u2020-\u2027]/,/[\u2030-\u203E]/,/[\u2041-\u2053]/,/[\u2055-\u205E]/,/[\u2190-\u23FF]/,/[\u2500-\u2775]/,/[\u2794-\u2BFF]/,/[\u2E00-\u2E7F]/,/[\u3001-\u3003]/,/[\u3008-\u3020]/,/[\u3030]/),Fm=it(Mm,/[\u0300-\u036F]/,/[\u1DC0-\u1DFF]/,/[\u20D0-\u20FF]/,/[\uFE00-\uFE0F]/,/[\uFE20-\uFE2F]/),ac=fe(Mm,Fm,"*"),Bm=it(/[a-zA-Z_]/,/[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,/[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,/[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,/[\u1E00-\u1FFF]/,/[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,/[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,/[\u2C00-\u2DFF\u2E80-\u2FFF]/,/[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,/[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,/[\uFE47-\uFEFE\uFF00-\uFFFD]/),Ws=it(Bm,/\d/,/[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/),cn=fe(Bm,Ws,"*"),sc=fe(/[A-Z]/,Ws,"*"),y8=["attached","autoclosure",fe(/convention\(/,it("swift","block","c"),/\)/),"discardableResult","dynamicCallable","dynamicMemberLookup","escaping","freestanding","frozen","GKInspectable","IBAction","IBDesignable","IBInspectable","IBOutlet","IBSegueAction","inlinable","main","nonobjc","NSApplicationMain","NSCopying","NSManaged",fe(/objc\(/,cn,/\)/),"objc","objcMembers","propertyWrapper","requires_stored_property_inits","resultBuilder","Sendable","testable","UIApplicationMain","unchecked","unknown","usableFromInline","warn_unqualified_access"],D8=["iOS","iOSApplicationExtension","macOS","macOSApplicationExtension","macCatalyst","macCatalystApplicationExtension","watchOS","watchOSApplicationExtension","tvOS","tvOSApplicationExtension","swift"];function C8(t){const e={match:/\s+/,relevance:0},n=t.COMMENT("/\\*","\\*/",{contains:["self"]}),r=[t.C_LINE_COMMENT_MODE,n],o={match:[/\./,it(...b8,...Om)],className:{2:"keyword"}},a={match:fe(/\./,it(...oc)),relevance:0},s=oc.filter(ne=>typeof ne=="string").concat(["_|0"]),i=oc.filter(ne=>typeof ne!="string").concat(A8).map(rc),l={variants:[{className:"keyword",match:it(...i,...Om)}]},u={$pattern:it(/\b\w+/,/#\w+/),keyword:s.concat(v8),literal:km},c=[o,a,l],p={match:fe(/\./,it(...Im)),relevance:0},d={className:"built_in",match:fe(/\b/,it(...Im),/(?=\()/)},f=[p,d],b={match:/->/,relevance:0},A={className:"operator",relevance:0,variants:[{match:ac},{match:`\\.(\\.|${Fm})+`}]},y=[b,A],h="([0-9]_*)+",g="([0-9a-fA-F]_*)+",E={className:"number",relevance:0,variants:[{match:`\\b(${h})(\\.(${h}))?([eE][+-]?(${h}))?\\b`},{match:`\\b0x(${g})(\\.(${g}))?([pP][+-]?(${h}))?\\b`},{match:/\b0o([0-7]_*)+\b/},{match:/\b0b([01]_*)+\b/}]},_=(ne="")=>({className:"subst",variants:[{match:fe(/\\/,ne,/[0\\tnr"']/)},{match:fe(/\\/,ne,/u\{[0-9a-fA-F]{1,8}\}/)}]}),T=(ne="")=>({className:"subst",match:fe(/\\/,ne,/[\t ]*(?:[\r\n]|\r\n)/)}),v=(ne="")=>({className:"subst",label:"interpol",begin:fe(/\\/,ne,/\(/),end:/\)/}),N=(ne="")=>({begin:fe(ne,/"""/),end:fe(/"""/,ne),contains:[_(ne),T(ne),v(ne)]}),R=(ne="")=>({begin:fe(ne,/"/),end:fe(/"/,ne),contains:[_(ne),v(ne)]}),H={className:"string",variants:[N(),N("#"),N("##"),N("###"),R(),R("#"),R("##"),R("###")]},I=[t.BACKSLASH_ESCAPE,{begin:/\[/,end:/\]/,relevance:0,contains:[t.BACKSLASH_ESCAPE]}],W={begin:/\/[^\s](?=[^/\n]*\/)/,end:/\//,contains:I},le=ne=>{const Oe=fe(ne,/\//),Be=fe(/\//,ne);return{begin:Oe,end:Be,contains:[...I,{scope:"comment",begin:`#(?!.*${Be})`,end:/$/}]}},K={scope:"regexp",variants:[le("###"),le("##"),le("#"),W]},O={match:fe(/`/,cn,/`/)},V={className:"variable",match:/\$\d+/},B={className:"variable",match:`\\$${Ws}+`},x=[O,V,B],S={match:/(@|#(un)?)available/,scope:"keyword",starts:{contains:[{begin:/\(/,end:/\)/,keywords:D8,contains:[...y,E,H]}]}},C={scope:"keyword",match:fe(/@/,it(...y8))},L={scope:"meta",match:fe(/@/,cn)},k=[S,C,L],$={match:js(/\b[A-Z]/),relevance:0,contains:[{className:"type",match:fe(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/,Ws,"+")},{className:"type",match:sc,relevance:0},{match:/[?!]+/,relevance:0},{match:/\.\.\./,relevance:0},{match:fe(/\s+&\s+/,js(sc)),relevance:0}]},j={begin:/</,end:/>/,keywords:u,contains:[...r,...c,...k,b,$]};$.contains.push(j);const ge={match:fe(cn,/\s*:/),keywords:"_|0",relevance:0},pe={begin:/\(/,end:/\)/,relevance:0,keywords:u,contains:["self",ge,...r,K,...c,...f,...y,E,H,...x,...k,$]},ue={begin:/</,end:/>/,keywords:"repeat each",contains:[...r,$]},ce={begin:it(js(fe(cn,/\s*:/)),js(fe(cn,/\s+/,cn,/\s*:/))),end:/:/,relevance:0,contains:[{className:"keyword",match:/\b_\b/},{className:"params",match:cn}]},bt={begin:/\(/,end:/\)/,keywords:u,contains:[ce,...r,...c,...y,E,H,...k,$,pe],endsParent:!0,illegal:/["']/},Ut={match:[/(func|macro)/,/\s+/,it(O.match,cn,ac)],className:{1:"keyword",3:"title.function"},contains:[ue,bt,e],illegal:[/\[/,/%/]},At={match:[/\b(?:subscript|init[?!]?)/,/\s*(?=[<(])/],className:{1:"keyword"},contains:[ue,bt,e],illegal:/\[|%/},je={match:[/operator/,/\s+/,ac],className:{1:"keyword",3:"title"}},xt={begin:[/precedencegroup/,/\s+/,sc],className:{1:"keyword",3:"title"},contains:[$],keywords:[..._8,...km],end:/}/};for(const ne of H.variants){const Oe=ne.contains.find(Te=>Te.label==="interpol");Oe.keywords=u;const Be=[...c,...f,...y,E,H,...x];Oe.contains=[...Be,{begin:/\(/,end:/\)/,contains:["self",...Be]}]}return{name:"Swift",keywords:u,contains:[...r,Ut,At,{beginKeywords:"struct protocol class extension enum actor",end:"\\{",excludeEnd:!0,keywords:u,contains:[t.inherit(t.TITLE_MODE,{className:"title.class",begin:/[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/}),...c]},je,xt,{beginKeywords:"import",end:/$/,contains:[...r],relevance:0},K,...c,...f,...y,E,H,...x,...k,$,pe]}}const Ks="[A-Za-z$_][0-9A-Za-z$_]*",Pm=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],Um=["true","false","null","undefined","NaN","Infinity"],qm=["Object","Function","Boolean","Symbol","Math","Date","Number","BigInt","String","RegExp","Array","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array","Set","Map","WeakSet","WeakMap","ArrayBuffer","SharedArrayBuffer","Atomics","DataView","JSON","Promise","Generator","GeneratorFunction","AsyncFunction","Reflect","Proxy","Intl","WebAssembly"],Hm=["Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],Vm=["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],$m=["arguments","this","super","console","window","document","localStorage","sessionStorage","module","global"],zm=[].concat(Vm,qm,Hm);function S8(t){const e=t.regex,n=(S,{after:C})=>{const L="</"+S[0].slice(1);return S.input.indexOf(L,C)!==-1},r=Ks,o={begin:"<>",end:"</>"},a=/<[A-Za-z0-9\\._:-]+\s*\/>/,s={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:(S,C)=>{const L=S[0].length+S.index,k=S.input[L];if(k==="<"||k===","){C.ignoreMatch();return}k===">"&&(n(S,{after:L})||C.ignoreMatch());let $;const j=S.input.substring(L);if($=j.match(/^\s*=/)){C.ignoreMatch();return}if(($=j.match(/^\s+extends\s+/))&&$.index===0){C.ignoreMatch();return}}},i={$pattern:Ks,keyword:Pm,literal:Um,built_in:zm,"variable.language":$m},l="[0-9](_?[0-9])*",u=`\\.(${l})`,c="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",p={className:"number",variants:[{begin:`(\\b(${c})((${u})|\\.)?|(${u}))[eE][+-]?(${l})\\b`},{begin:`\\b(${c})\\b((${u})\\b|\\.)?|(${u})\\b`},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},d={className:"subst",begin:"\\$\\{",end:"\\}",keywords:i,contains:[]},f={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,d],subLanguage:"xml"}},b={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,d],subLanguage:"css"}},A={begin:"gql`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,d],subLanguage:"graphql"}},y={className:"string",begin:"`",end:"`",contains:[t.BACKSLASH_ESCAPE,d]},g={className:"comment",variants:[t.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{begin:"(?=@[A-Za-z]+)",relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"},{className:"type",begin:"\\{",end:"\\}",excludeEnd:!0,excludeBegin:!0,relevance:0},{className:"variable",begin:r+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),t.C_BLOCK_COMMENT_MODE,t.C_LINE_COMMENT_MODE]},E=[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,f,b,A,y,{match:/\$\d+/},p];d.contains=E.concat({begin:/\{/,end:/\}/,keywords:i,contains:["self"].concat(E)});const _=[].concat(g,d.contains),T=_.concat([{begin:/\(/,end:/\)/,keywords:i,contains:["self"].concat(_)}]),v={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:i,contains:T},N={variants:[{match:[/class/,/\s+/,r,/\s+/,/extends/,/\s+/,e.concat(r,"(",e.concat(/\./,r),")*")],scope:{1:"keyword",3:"title.class",5:"keyword",7:"title.class.inherited"}},{match:[/class/,/\s+/,r],scope:{1:"keyword",3:"title.class"}}]},R={relevance:0,match:e.either(/\bJSON/,/\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,/\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,/\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),className:"title.class",keywords:{_:[...qm,...Hm]}},H={label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},I={variants:[{match:[/function/,/\s+/,r,/(?=\s*\()/]},{match:[/function/,/\s*(?=\()/]}],className:{1:"keyword",3:"title.function"},label:"func.def",contains:[v],illegal:/%/},W={relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,className:"variable.constant"};function le(S){return e.concat("(?!",S.join("|"),")")}const K={match:e.concat(/\b/,le([...Vm,"super","import"]),r,e.lookahead(/\(/)),className:"title.function",relevance:0},O={begin:e.concat(/\./,e.lookahead(e.concat(r,/(?![0-9A-Za-z$_(])/))),end:r,excludeBegin:!0,keywords:"prototype",className:"property",relevance:0},V={match:[/get|set/,/\s+/,r,/(?=\()/],className:{1:"keyword",3:"title.function"},contains:[{begin:/\(\)/},v]},B="(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+t.UNDERSCORE_IDENT_RE+")\\s*=>",x={match:[/const|var|let/,/\s+/,r,/\s*/,/=\s*/,/(async\s*)?/,e.lookahead(B)],keywords:"async",className:{1:"keyword",3:"title.function"},contains:[v]};return{name:"JavaScript",aliases:["js","jsx","mjs","cjs"],keywords:i,exports:{PARAMS_CONTAINS:T,CLASS_REFERENCE:R},illegal:/#(?![$_A-z])/,contains:[t.SHEBANG({label:"shebang",binary:"node",relevance:5}),H,t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,f,b,A,y,g,{match:/\$\d+/},p,R,{className:"attr",begin:r+e.lookahead(":"),relevance:0},x,{begin:"("+t.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",relevance:0,contains:[g,t.REGEXP_MODE,{className:"function",begin:B,returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:t.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:i,contains:T}]}]},{begin:/,/,relevance:0},{match:/\s+/,relevance:0},{variants:[{begin:o.begin,end:o.end},{match:a},{begin:s.begin,"on:begin":s.isTrulyOpeningTag,end:s.end}],subLanguage:"xml",contains:[{begin:s.begin,end:s.end,skip:!0,contains:["self"]}]}]},I,{beginKeywords:"while if switch catch for"},{begin:"\\b(?!function)"+t.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,label:"func.def",contains:[v,t.inherit(t.TITLE_MODE,{begin:r,className:"title.function"})]},{match:/\.\.\./,relevance:0},O,{match:"\\$"+r,relevance:0},{match:[/\bconstructor(?=\s*\()/],className:{1:"title.function"},contains:[v]},K,W,N,V,{match:/\$[(.]/}]}}function T8(t){const e=S8(t),n=Ks,r=["any","void","number","boolean","string","object","never","symbol","bigint","unknown"],o={beginKeywords:"namespace",end:/\{/,excludeEnd:!0,contains:[e.exports.CLASS_REFERENCE]},a={beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:{keyword:"interface extends",built_in:r},contains:[e.exports.CLASS_REFERENCE]},s={className:"meta",relevance:10,begin:/^\s*['"]use strict['"]/},i=["type","namespace","interface","public","private","protected","implements","declare","abstract","readonly","enum","override"],l={$pattern:Ks,keyword:Pm.concat(i),literal:Um,built_in:zm.concat(r),"variable.language":$m},u={className:"meta",begin:"@"+n},c=(d,f,b)=>{const A=d.contains.findIndex(y=>y.label===f);if(A===-1)throw new Error("can not find mode to replace");d.contains.splice(A,1,b)};Object.assign(e.keywords,l),e.exports.PARAMS_CONTAINS.push(u),e.contains=e.contains.concat([u,o,a]),c(e,"shebang",t.SHEBANG()),c(e,"use_strict",s);const p=e.contains.find(d=>d.label==="func.def");return p.relevance=0,Object.assign(e,{name:"TypeScript",aliases:["ts","tsx","mts","cts"]}),e}function N8(t){const e=t.regex,n={className:"string",begin:/"(""|[^/n])"C\b/},r={className:"string",begin:/"/,end:/"/,illegal:/\n/,contains:[{begin:/""/}]},o=/\d{1,2}\/\d{1,2}\/\d{4}/,a=/\d{4}-\d{1,2}-\d{1,2}/,s=/(\d|1[012])(:\d+){0,2} *(AM|PM)/,i=/\d{1,2}(:\d{1,2}){1,2}/,l={className:"literal",variants:[{begin:e.concat(/# */,e.either(a,o),/ *#/)},{begin:e.concat(/# */,i,/ *#/)},{begin:e.concat(/# */,s,/ *#/)},{begin:e.concat(/# */,e.either(a,o),/ +/,e.either(s,i),/ *#/)}]},u={className:"number",relevance:0,variants:[{begin:/\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/},{begin:/\b\d[\d_]*((U?[SIL])|[%&])?/},{begin:/&H[\dA-F_]+((U?[SIL])|[%&])?/},{begin:/&O[0-7_]+((U?[SIL])|[%&])?/},{begin:/&B[01_]+((U?[SIL])|[%&])?/}]},c={className:"label",begin:/^\w+:/},p=t.COMMENT(/'''/,/$/,{contains:[{className:"doctag",begin:/<\/?/,end:/>/}]}),d=t.COMMENT(null,/$/,{variants:[{begin:/'/},{begin:/([\t ]|^)REM(?=\s)/}]});return{name:"Visual Basic .NET",aliases:["vb"],case_insensitive:!0,classNameAliases:{label:"symbol"},keywords:{keyword:"addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",built_in:"addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort",type:"boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort",literal:"true false nothing"},illegal:"//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",contains:[n,r,l,u,c,p,d,{className:"meta",begin:/[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,end:/$/,keywords:{keyword:"const disable else elseif enable end externalsource if region then"},contains:[d]}]}}function w8(t){t.regex;const e=t.COMMENT(/\(;/,/;\)/);e.contains.push("self");const n=t.COMMENT(/;;/,/$/),r=["anyfunc","block","br","br_if","br_table","call","call_indirect","data","drop","elem","else","end","export","func","global.get","global.set","local.get","local.set","local.tee","get_global","get_local","global","if","import","local","loop","memory","memory.grow","memory.size","module","mut","nop","offset","param","result","return","select","set_global","set_local","start","table","tee_local","then","type","unreachable"],o={begin:[/(?:func|call|call_indirect)/,/\s+/,/\$[^\s)]+/],className:{1:"keyword",3:"title.function"}},a={className:"variable",begin:/\$[\w_]+/},s={match:/(\((?!;)|\))+/,className:"punctuation",relevance:0},i={className:"number",relevance:0,match:/[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/},l={match:/(i32|i64|f32|f64)(?!\.)/,className:"type"},u={className:"keyword",match:/\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/};return{name:"WebAssembly",keywords:{$pattern:/[\w.]+/,keyword:r},contains:[n,e,{match:[/(?:offset|align)/,/\s*/,/=/],className:{1:"keyword",3:"operator"}},a,s,o,t.QUOTE_STRING_MODE,l,u,i]}}function x8(t){const e=t.regex,n=e.concat(/[\p{L}_]/u,e.optional(/[\p{L}0-9_.-]*:/u),/[\p{L}0-9_.-]*/u),r=/[\p{L}0-9._:-]+/u,o={className:"symbol",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},a={begin:/\s/,contains:[{className:"keyword",begin:/#?[a-z_][a-z1-9_-]+/,illegal:/\n/}]},s=t.inherit(a,{begin:/\(/,end:/\)/}),i=t.inherit(t.APOS_STRING_MODE,{className:"string"}),l=t.inherit(t.QUOTE_STRING_MODE,{className:"string"}),u={endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",begin:r,relevance:0},{begin:/=\s*/,relevance:0,contains:[{className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/,contains:[o]},{begin:/'/,end:/'/,contains:[o]},{begin:/[^\s"'=<>`]+/}]}]}]};return{name:"HTML, XML",aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist","wsf","svg"],case_insensitive:!0,unicodeRegex:!0,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,relevance:10,contains:[a,l,i,s,{begin:/\[/,end:/\]/,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,contains:[a,s,l,i]}]}]},t.COMMENT(/<!--/,/-->/,{relevance:10}),{begin:/<!\[CDATA\[/,end:/\]\]>/,relevance:10},o,{className:"meta",end:/\?>/,variants:[{begin:/<\?xml/,relevance:10,contains:[l]},{begin:/<\?[a-z][a-z0-9]+/}]},{className:"tag",begin:/<style(?=\s|>)/,end:/>/,keywords:{name:"style"},contains:[u],starts:{end:/<\/style>/,returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",begin:/<script(?=\s|>)/,end:/>/,keywords:{name:"script"},contains:[u],starts:{end:/<\/script>/,returnEnd:!0,subLanguage:["javascript","handlebars","xml"]}},{className:"tag",begin:/<>|<\/>/},{className:"tag",begin:e.concat(/</,e.lookahead(e.concat(n,e.either(/\/>/,/>/,/\s/)))),end:/\/?>/,contains:[{className:"name",begin:n,relevance:0,starts:u}]},{className:"tag",begin:e.concat(/<\//,e.lookahead(e.concat(n,/>/))),contains:[{className:"name",begin:n,relevance:0},{begin:/>/,relevance:0,endsParent:!0}]}]}}function R8(t){const e="true false yes no null",n="[\\w#;/?:@&=+$,.~*'()[\\]]+",r={className:"attr",variants:[{begin:"\\w[\\w :\\/.-]*:(?=[ 	]|$)"},{begin:'"\\w[\\w :\\/.-]*":(?=[ 	]|$)'},{begin:"'\\w[\\w :\\/.-]*':(?=[ 	]|$)"}]},o={className:"template-variable",variants:[{begin:/\{\{/,end:/\}\}/},{begin:/%\{/,end:/\}/}]},a={className:"string",relevance:0,variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/\S+/}],contains:[t.BACKSLASH_ESCAPE,o]},s=t.inherit(a,{variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/[^\s,{}[\]]+/}]}),p={className:"number",begin:"\\b"+"[0-9]{4}(-[0-9][0-9]){0,2}"+"([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?"+"(\\.[0-9]*)?"+"([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?"+"\\b"},d={end:",",endsWithParent:!0,excludeEnd:!0,keywords:e,relevance:0},f={begin:/\{/,end:/\}/,contains:[d],illegal:"\\n",relevance:0},b={begin:"\\[",end:"\\]",contains:[d],illegal:"\\n",relevance:0},A=[r,{className:"meta",begin:"^---\\s*$",relevance:10},{className:"string",begin:"[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"},{begin:"<%[%=-]?",end:"[%-]?%>",subLanguage:"ruby",excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:"!\\w+!"+n},{className:"type",begin:"!<"+n+">"},{className:"type",begin:"!"+n},{className:"type",begin:"!!"+n},{className:"meta",begin:"&"+t.UNDERSCORE_IDENT_RE+"$"},{className:"meta",begin:"\\*"+t.UNDERSCORE_IDENT_RE+"$"},{className:"bullet",begin:"-(?=[ ]|$)",relevance:0},t.HASH_COMMENT_MODE,{beginKeywords:e,keywords:{literal:e}},p,{className:"number",begin:t.C_NUMBER_RE+"\\b",relevance:0},f,b,a],y=[...A];return y.pop(),y.push(s),d.contains=y,{name:"YAML",case_insensitive:!0,aliases:["yml"],contains:A}}J.registerLanguage("apache",h3),J.registerLanguage("bash",E3),J.registerLanguage("c",b3),J.registerLanguage("cpp",A3),J.registerLanguage("csharp",_3),J.registerLanguage("css",N3),J.registerLanguage("diff",w3),J.registerLanguage("go",x3),J.registerLanguage("graphql",R3),J.registerLanguage("ini",L3),J.registerLanguage("java",O3),J.registerLanguage("javascript",B3),J.registerLanguage("json",P3),J.registerLanguage("kotlin",q3),J.registerLanguage("less",Z3),J.registerLanguage("lua",j3),J.registerLanguage("makefile",W3),J.registerLanguage("markdown",K3),J.registerLanguage("nginx",Y3),J.registerLanguage("objectivec",X3),J.registerLanguage("perl",Q3),J.registerLanguage("pgsql",J3),J.registerLanguage("php",e8),J.registerLanguage("php-template",t8),J.registerLanguage("plaintext",n8),J.registerLanguage("python",r8),J.registerLanguage("python-repl",o8),J.registerLanguage("r",a8),J.registerLanguage("ruby",s8),J.registerLanguage("rust",i8),J.registerLanguage("scss",m8),J.registerLanguage("shell",g8),J.registerLanguage("sql",h8),J.registerLanguage("swift",C8),J.registerLanguage("typescript",T8),J.registerLanguage("vbnet",N8),J.registerLanguage("wasm",w8),J.registerLanguage("xml",x8),J.registerLanguage("yaml",R8);const Gm=J,Zm=DD({html:!1,typographer:!0,highlight:function(t,e){const n=Kn();if(e&&Gm.getLanguage(e))try{return`<div class="allm-w-full allm-rounded-lg allm-bg-[#1e1e1e] allm-font-mono allm-text-sm allm-text-[#d4d4d4] allm-mb-4 allm-relative">
            <div class="allm-absolute allm-top-0 allm-left-0 allm-right-0 allm-flex allm-items-center allm-justify-between allm-px-4 allm-py-1 allm-text-xs allm-font-sans allm-bg-[#2d2d2d] allm-rounded-t-lg">
              <span class="allm-text-xs allm-text-[#858585] allm-font-medium">${e}</span>
              <button data-code-snippet data-code="code-${n}" class="allm-border-none allm-min-w-[52px] allm-h-[22px] allm-flex allm-items-center allm-justify-center allm-gap-x-1 allm-bg-[#ffffff14] allm-text-[#858585] hover:allm-text-white hover:allm-bg-[#ffffff20] allm-px-1.5 allm-rounded allm-transition-colors allm-cursor-pointer">
                <svg class="allm-h-3 allm-w-3" fill="none" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24"><path d="M8 17.929H6c-1.105 0-2-.912-2-2.036V5.036C4 3.912 4.895 3 6 3h8c1.105 0 2 .912 2 2.036v1.866m-6 .17h8c1.105 0 2 .91 2 2.035v10.857C20 21.088 19.105 22 18 22h-8c-1.105 0-2-.911-2-2.036V9.107c0-1.124.895-2.036 2-2.036z"/></svg>
                <span class="allm-text-xs">Copy</span>
              </button>
            </div>
            <div class="allm-overflow-x-auto allm-max-w-full">
              <pre class="allm-px-4 -allm-mt-10 allm-whitespace-pre-wrap allm-break-words"><code class="allm-max-w-full allm-inline-block">`+Gm.highlight(t,{language:e,ignoreIllegals:!0}).value+"</code></pre></div></div>"}catch{}return`<div class="allm-w-full allm-rounded-lg allm-bg-[#1e1e1e] allm-font-mono allm-text-sm allm-text-[#d4d4d4] allm-mb-4 allm-relative">
        <div class="allm-absolute allm-top-0 allm-left-0 allm-right-0 allm-flex allm-items-center allm-justify-between allm-px-4 allm-py-1 allm-text-xs allm-font-sans allm-bg-[#2d2d2d] allm-rounded-t-lg">
          <span class="allm-text-xs allm-text-[#858585] allm-font-medium">plaintext</span>
          <button data-code-snippet data-code="code-${n}" class="allm-border-none allm-min-w-[52px] allm-h-[22px] allm-flex allm-items-center allm-justify-center allm-gap-x-1 allm-bg-[#ffffff14] allm-text-[#858585] hover:allm-text-white hover:allm-bg-[#ffffff20] allm-px-1.5 allm-rounded allm-transition-colors allm-cursor-pointer">
            <svg class="allm-h-3 allm-w-3" fill="none" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24"><path d="M8 17.929H6c-1.105 0-2-.912-2-2.036V5.036C4 3.912 4.895 3 6 3h8c1.105 0 2 .912 2 2.036v1.866m-6 .17h8c1.105 0 2 .91 2 2.035v10.857C20 21.088 19.105 22 18 22h-8c-1.105 0-2-.911-2-2.036V9.107c0-1.124.895-2.036 2-2.036z"/></svg>
            <span class="allm-text-xs">Copy</span>
          </button>
        </div>
        <div class="allm-overflow-x-auto allm-max-w-full">
          <pre class="allm-px-4 -allm-mt-10 allm-whitespace-pre-wrap allm-break-words"><code class="allm-max-w-full allm-inline-block">`+I_.encode(t)+"</code></pre></div></div>"}}).disable("list");Zm.renderer.rules.link_open=(t,e)=>`<a href="${t[e].attrs.find(o=>o[0]==="href")[1]}" target="_blank" rel="noopener noreferrer">`;function jm(t=""){return Zm.render(t)}/*! @license DOMPurify 3.0.8 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.8/LICENSE */const{entries:Wm,setPrototypeOf:Km,isFrozen:L8,getPrototypeOf:O8,getOwnPropertyDescriptor:ic}=Object;let{freeze:tt,seal:Pt,create:Ym}=Object,{apply:lc,construct:uc}=typeof Reflect<"u"&&Reflect;tt||(tt=function(e){return e}),Pt||(Pt=function(e){return e}),lc||(lc=function(e,n,r){return e.apply(n,r)}),uc||(uc=function(e,n){return new e(...n)});const Ys=wt(Array.prototype.forEach),Xm=wt(Array.prototype.pop),jo=wt(Array.prototype.push),Xs=wt(String.prototype.toLowerCase),cc=wt(String.prototype.toString),k8=wt(String.prototype.match),Wo=wt(String.prototype.replace),I8=wt(String.prototype.indexOf),M8=wt(String.prototype.trim),Et=wt(RegExp.prototype.test),Ko=F8(TypeError);function wt(t){return function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return lc(t,e,r)}}function F8(t){return function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return uc(t,n)}}function ee(t,e){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:Xs;Km&&Km(t,null);let r=e.length;for(;r--;){let o=e[r];if(typeof o=="string"){const a=n(o);a!==o&&(L8(e)||(e[r]=a),o=a)}t[o]=!0}return t}function B8(t){for(let e=0;e<t.length;e++)ic(t,e)===void 0&&(t[e]=null);return t}function tr(t){const e=Ym(null);for(const[n,r]of Wm(t))ic(t,n)!==void 0&&(Array.isArray(r)?e[n]=B8(r):r&&typeof r=="object"&&r.constructor===Object?e[n]=tr(r):e[n]=r);return e}function Qs(t,e){for(;t!==null;){const r=ic(t,e);if(r){if(r.get)return wt(r.get);if(typeof r.value=="function")return wt(r.value)}t=O8(t)}function n(r){return console.warn("fallback value for",r),null}return n}const Qm=tt(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),dc=tt(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),pc=tt(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),P8=tt(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),fc=tt(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),U8=tt(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),Jm=tt(["#text"]),eg=tt(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),mc=tt(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),tg=tt(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),Js=tt(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),q8=Pt(/\{\{[\w\W]*|[\w\W]*\}\}/gm),H8=Pt(/<%[\w\W]*|[\w\W]*%>/gm),V8=Pt(/\${[\w\W]*}/gm),$8=Pt(/^data-[\-\w.\u00B7-\uFFFF]/),z8=Pt(/^aria-[\-\w]+$/),ng=Pt(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),G8=Pt(/^(?:\w+script|data):/i),Z8=Pt(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),rg=Pt(/^html$/i);var og=Object.freeze({__proto__:null,MUSTACHE_EXPR:q8,ERB_EXPR:H8,TMPLIT_EXPR:V8,DATA_ATTR:$8,ARIA_ATTR:z8,IS_ALLOWED_URI:ng,IS_SCRIPT_OR_DATA:G8,ATTR_WHITESPACE:Z8,DOCTYPE_NAME:rg});const j8=function(){return typeof window>"u"?null:window},W8=function(e,n){if(typeof e!="object"||typeof e.createPolicy!="function")return null;let r=null;const o="data-tt-policy-suffix";n&&n.hasAttribute(o)&&(r=n.getAttribute(o));const a="dompurify"+(r?"#"+r:"");try{return e.createPolicy(a,{createHTML(s){return s},createScriptURL(s){return s}})}catch{return console.warn("TrustedTypes policy "+a+" could not be created."),null}};function ag(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:j8();const e=Z=>ag(Z);if(e.version="3.0.8",e.removed=[],!t||!t.document||t.document.nodeType!==9)return e.isSupported=!1,e;let{document:n}=t;const r=n,o=r.currentScript,{DocumentFragment:a,HTMLTemplateElement:s,Node:i,Element:l,NodeFilter:u,NamedNodeMap:c=t.NamedNodeMap||t.MozNamedAttrMap,HTMLFormElement:p,DOMParser:d,trustedTypes:f}=t,b=l.prototype,A=Qs(b,"cloneNode"),y=Qs(b,"nextSibling"),h=Qs(b,"childNodes"),g=Qs(b,"parentNode");if(typeof s=="function"){const Z=n.createElement("template");Z.content&&Z.content.ownerDocument&&(n=Z.content.ownerDocument)}let E,_="";const{implementation:T,createNodeIterator:v,createDocumentFragment:N,getElementsByTagName:R}=n,{importNode:H}=r;let I={};e.isSupported=typeof Wm=="function"&&typeof g=="function"&&T&&T.createHTMLDocument!==void 0;const{MUSTACHE_EXPR:W,ERB_EXPR:le,TMPLIT_EXPR:K,DATA_ATTR:O,ARIA_ATTR:V,IS_SCRIPT_OR_DATA:B,ATTR_WHITESPACE:x}=og;let{IS_ALLOWED_URI:S}=og,C=null;const L=ee({},[...Qm,...dc,...pc,...fc,...Jm]);let k=null;const $=ee({},[...eg,...mc,...tg,...Js]);let j=Object.seal(Ym(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),ge=null,pe=null,ue=!0,ce=!0,bt=!1,Ut=!0,At=!1,je=!1,xt=!1,ne=!1,Oe=!1,Be=!1,Te=!1,si=!0,Gr=!1;const X="user-content-";let Zr=!0,Ce=!1,se={},qt=null;const Qt=ee({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]);let jr=null;const Wr=ee({},["audio","video","img","source","image","track"]);let P=null;const z=ee({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),Q="http://www.w3.org/1998/Math/MathML",re="http://www.w3.org/2000/svg",he="http://www.w3.org/1999/xhtml";let We=he,na=!1,ra=null;const tT=ee({},[Q,re,he],cc);let oa=null;const nT=["application/xhtml+xml","text/html"],rT="text/html";let Pe=null,Kr=null;const oT=n.createElement("form"),Gg=function(D){return D instanceof RegExp||D instanceof Function},Dc=function(){let D=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(!(Kr&&Kr===D)){if((!D||typeof D!="object")&&(D={}),D=tr(D),oa=nT.indexOf(D.PARSER_MEDIA_TYPE)===-1?rT:D.PARSER_MEDIA_TYPE,Pe=oa==="application/xhtml+xml"?cc:Xs,C="ALLOWED_TAGS"in D?ee({},D.ALLOWED_TAGS,Pe):L,k="ALLOWED_ATTR"in D?ee({},D.ALLOWED_ATTR,Pe):$,ra="ALLOWED_NAMESPACES"in D?ee({},D.ALLOWED_NAMESPACES,cc):tT,P="ADD_URI_SAFE_ATTR"in D?ee(tr(z),D.ADD_URI_SAFE_ATTR,Pe):z,jr="ADD_DATA_URI_TAGS"in D?ee(tr(Wr),D.ADD_DATA_URI_TAGS,Pe):Wr,qt="FORBID_CONTENTS"in D?ee({},D.FORBID_CONTENTS,Pe):Qt,ge="FORBID_TAGS"in D?ee({},D.FORBID_TAGS,Pe):{},pe="FORBID_ATTR"in D?ee({},D.FORBID_ATTR,Pe):{},se="USE_PROFILES"in D?D.USE_PROFILES:!1,ue=D.ALLOW_ARIA_ATTR!==!1,ce=D.ALLOW_DATA_ATTR!==!1,bt=D.ALLOW_UNKNOWN_PROTOCOLS||!1,Ut=D.ALLOW_SELF_CLOSE_IN_ATTR!==!1,At=D.SAFE_FOR_TEMPLATES||!1,je=D.WHOLE_DOCUMENT||!1,Oe=D.RETURN_DOM||!1,Be=D.RETURN_DOM_FRAGMENT||!1,Te=D.RETURN_TRUSTED_TYPE||!1,ne=D.FORCE_BODY||!1,si=D.SANITIZE_DOM!==!1,Gr=D.SANITIZE_NAMED_PROPS||!1,Zr=D.KEEP_CONTENT!==!1,Ce=D.IN_PLACE||!1,S=D.ALLOWED_URI_REGEXP||ng,We=D.NAMESPACE||he,j=D.CUSTOM_ELEMENT_HANDLING||{},D.CUSTOM_ELEMENT_HANDLING&&Gg(D.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(j.tagNameCheck=D.CUSTOM_ELEMENT_HANDLING.tagNameCheck),D.CUSTOM_ELEMENT_HANDLING&&Gg(D.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(j.attributeNameCheck=D.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),D.CUSTOM_ELEMENT_HANDLING&&typeof D.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements=="boolean"&&(j.allowCustomizedBuiltInElements=D.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),At&&(ce=!1),Be&&(Oe=!0),se&&(C=ee({},Jm),k=[],se.html===!0&&(ee(C,Qm),ee(k,eg)),se.svg===!0&&(ee(C,dc),ee(k,mc),ee(k,Js)),se.svgFilters===!0&&(ee(C,pc),ee(k,mc),ee(k,Js)),se.mathMl===!0&&(ee(C,fc),ee(k,tg),ee(k,Js))),D.ADD_TAGS&&(C===L&&(C=tr(C)),ee(C,D.ADD_TAGS,Pe)),D.ADD_ATTR&&(k===$&&(k=tr(k)),ee(k,D.ADD_ATTR,Pe)),D.ADD_URI_SAFE_ATTR&&ee(P,D.ADD_URI_SAFE_ATTR,Pe),D.FORBID_CONTENTS&&(qt===Qt&&(qt=tr(qt)),ee(qt,D.FORBID_CONTENTS,Pe)),Zr&&(C["#text"]=!0),je&&ee(C,["html","head","body"]),C.table&&(ee(C,["tbody"]),delete ge.tbody),D.TRUSTED_TYPES_POLICY){if(typeof D.TRUSTED_TYPES_POLICY.createHTML!="function")throw Ko('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if(typeof D.TRUSTED_TYPES_POLICY.createScriptURL!="function")throw Ko('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');E=D.TRUSTED_TYPES_POLICY,_=E.createHTML("")}else E===void 0&&(E=W8(f,o)),E!==null&&typeof _=="string"&&(_=E.createHTML(""));tt&&tt(D),Kr=D}},Zg=ee({},["mi","mo","mn","ms","mtext"]),jg=ee({},["foreignobject","desc","title","annotation-xml"]),aT=ee({},["title","style","font","a","script"]),Wg=ee({},[...dc,...pc,...P8]),Kg=ee({},[...fc,...U8]),sT=function(D){let F=g(D);(!F||!F.tagName)&&(F={namespaceURI:We,tagName:"template"});const G=Xs(D.tagName),Ee=Xs(F.tagName);return ra[D.namespaceURI]?D.namespaceURI===re?F.namespaceURI===he?G==="svg":F.namespaceURI===Q?G==="svg"&&(Ee==="annotation-xml"||Zg[Ee]):!!Wg[G]:D.namespaceURI===Q?F.namespaceURI===he?G==="math":F.namespaceURI===re?G==="math"&&jg[Ee]:!!Kg[G]:D.namespaceURI===he?F.namespaceURI===re&&!jg[Ee]||F.namespaceURI===Q&&!Zg[Ee]?!1:!Kg[G]&&(aT[G]||!Wg[G]):!!(oa==="application/xhtml+xml"&&ra[D.namespaceURI]):!1},rr=function(D){jo(e.removed,{element:D});try{D.parentNode.removeChild(D)}catch{D.remove()}},Cc=function(D,F){try{jo(e.removed,{attribute:F.getAttributeNode(D),from:F})}catch{jo(e.removed,{attribute:null,from:F})}if(F.removeAttribute(D),D==="is"&&!k[D])if(Oe||Be)try{rr(F)}catch{}else try{F.setAttribute(D,"")}catch{}},Yg=function(D){let F=null,G=null;if(ne)D="<remove></remove>"+D;else{const Ye=k8(D,/^[\r\n\t ]+/);G=Ye&&Ye[0]}oa==="application/xhtml+xml"&&We===he&&(D='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+D+"</body></html>");const Ee=E?E.createHTML(D):D;if(We===he)try{F=new d().parseFromString(Ee,oa)}catch{}if(!F||!F.documentElement){F=T.createDocument(We,"template",null);try{F.documentElement.innerHTML=na?_:Ee}catch{}}const Ke=F.body||F.documentElement;return D&&G&&Ke.insertBefore(n.createTextNode(G),Ke.childNodes[0]||null),We===he?R.call(F,je?"html":"body")[0]:je?F.documentElement:Ke},Xg=function(D){return v.call(D.ownerDocument||D,D,u.SHOW_ELEMENT|u.SHOW_COMMENT|u.SHOW_TEXT,null)},iT=function(D){return D instanceof p&&(typeof D.nodeName!="string"||typeof D.textContent!="string"||typeof D.removeChild!="function"||!(D.attributes instanceof c)||typeof D.removeAttribute!="function"||typeof D.setAttribute!="function"||typeof D.namespaceURI!="string"||typeof D.insertBefore!="function"||typeof D.hasChildNodes!="function")},Qg=function(D){return typeof i=="function"&&D instanceof i},dn=function(D,F,G){I[D]&&Ys(I[D],Ee=>{Ee.call(e,F,G,Kr)})},Jg=function(D){let F=null;if(dn("beforeSanitizeElements",D,null),iT(D))return rr(D),!0;const G=Pe(D.nodeName);if(dn("uponSanitizeElement",D,{tagName:G,allowedTags:C}),D.hasChildNodes()&&!Qg(D.firstElementChild)&&Et(/<[/\w]/g,D.innerHTML)&&Et(/<[/\w]/g,D.textContent))return rr(D),!0;if(!C[G]||ge[G]){if(!ge[G]&&t1(G)&&(j.tagNameCheck instanceof RegExp&&Et(j.tagNameCheck,G)||j.tagNameCheck instanceof Function&&j.tagNameCheck(G)))return!1;if(Zr&&!qt[G]){const Ee=g(D)||D.parentNode,Ke=h(D)||D.childNodes;if(Ke&&Ee){const Ye=Ke.length;for(let lt=Ye-1;lt>=0;--lt)Ee.insertBefore(A(Ke[lt],!0),y(D))}}return rr(D),!0}return D instanceof l&&!sT(D)||(G==="noscript"||G==="noembed"||G==="noframes")&&Et(/<\/no(script|embed|frames)/i,D.innerHTML)?(rr(D),!0):(At&&D.nodeType===3&&(F=D.textContent,Ys([W,le,K],Ee=>{F=Wo(F,Ee," ")}),D.textContent!==F&&(jo(e.removed,{element:D.cloneNode()}),D.textContent=F)),dn("afterSanitizeElements",D,null),!1)},e1=function(D,F,G){if(si&&(F==="id"||F==="name")&&(G in n||G in oT))return!1;if(!(ce&&!pe[F]&&Et(O,F))){if(!(ue&&Et(V,F))){if(!k[F]||pe[F]){if(!(t1(D)&&(j.tagNameCheck instanceof RegExp&&Et(j.tagNameCheck,D)||j.tagNameCheck instanceof Function&&j.tagNameCheck(D))&&(j.attributeNameCheck instanceof RegExp&&Et(j.attributeNameCheck,F)||j.attributeNameCheck instanceof Function&&j.attributeNameCheck(F))||F==="is"&&j.allowCustomizedBuiltInElements&&(j.tagNameCheck instanceof RegExp&&Et(j.tagNameCheck,G)||j.tagNameCheck instanceof Function&&j.tagNameCheck(G))))return!1}else if(!P[F]){if(!Et(S,Wo(G,x,""))){if(!((F==="src"||F==="xlink:href"||F==="href")&&D!=="script"&&I8(G,"data:")===0&&jr[D])){if(!(bt&&!Et(B,Wo(G,x,"")))){if(G)return!1}}}}}}return!0},t1=function(D){return D.indexOf("-")>0},n1=function(D){dn("beforeSanitizeAttributes",D,null);const{attributes:F}=D;if(!F)return;const G={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:k};let Ee=F.length;for(;Ee--;){const Ke=F[Ee],{name:Ye,namespaceURI:lt,value:or}=Ke,aa=Pe(Ye);let ut=Ye==="value"?or:M8(or);if(G.attrName=aa,G.attrValue=ut,G.keepAttr=!0,G.forceKeepAttr=void 0,dn("uponSanitizeAttribute",D,G),ut=G.attrValue,G.forceKeepAttr||(Cc(Ye,D),!G.keepAttr))continue;if(!Ut&&Et(/\/>/i,ut)){Cc(Ye,D);continue}At&&Ys([W,le,K],o1=>{ut=Wo(ut,o1," ")});const r1=Pe(D.nodeName);if(e1(r1,aa,ut)){if(Gr&&(aa==="id"||aa==="name")&&(Cc(Ye,D),ut=X+ut),E&&typeof f=="object"&&typeof f.getAttributeType=="function"&&!lt)switch(f.getAttributeType(r1,aa)){case"TrustedHTML":{ut=E.createHTML(ut);break}case"TrustedScriptURL":{ut=E.createScriptURL(ut);break}}try{lt?D.setAttributeNS(lt,Ye,ut):D.setAttribute(Ye,ut),Xm(e.removed)}catch{}}}dn("afterSanitizeAttributes",D,null)},lT=function Z(D){let F=null;const G=Xg(D);for(dn("beforeSanitizeShadowDOM",D,null);F=G.nextNode();)dn("uponSanitizeShadowNode",F,null),!Jg(F)&&(F.content instanceof a&&Z(F.content),n1(F));dn("afterSanitizeShadowDOM",D,null)};return e.sanitize=function(Z){let D=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},F=null,G=null,Ee=null,Ke=null;if(na=!Z,na&&(Z="<!-->"),typeof Z!="string"&&!Qg(Z))if(typeof Z.toString=="function"){if(Z=Z.toString(),typeof Z!="string")throw Ko("dirty is not a string, aborting")}else throw Ko("toString is not a function");if(!e.isSupported)return Z;if(xt||Dc(D),e.removed=[],typeof Z=="string"&&(Ce=!1),Ce){if(Z.nodeName){const or=Pe(Z.nodeName);if(!C[or]||ge[or])throw Ko("root node is forbidden and cannot be sanitized in-place")}}else if(Z instanceof i)F=Yg("<!---->"),G=F.ownerDocument.importNode(Z,!0),G.nodeType===1&&G.nodeName==="BODY"||G.nodeName==="HTML"?F=G:F.appendChild(G);else{if(!Oe&&!At&&!je&&Z.indexOf("<")===-1)return E&&Te?E.createHTML(Z):Z;if(F=Yg(Z),!F)return Oe?null:Te?_:""}F&&ne&&rr(F.firstChild);const Ye=Xg(Ce?Z:F);for(;Ee=Ye.nextNode();)Jg(Ee)||(Ee.content instanceof a&&lT(Ee.content),n1(Ee));if(Ce)return Z;if(Oe){if(Be)for(Ke=N.call(F.ownerDocument);F.firstChild;)Ke.appendChild(F.firstChild);else Ke=F;return(k.shadowroot||k.shadowrootmode)&&(Ke=H.call(r,Ke,!0)),Ke}let lt=je?F.outerHTML:F.innerHTML;return je&&C["!doctype"]&&F.ownerDocument&&F.ownerDocument.doctype&&F.ownerDocument.doctype.name&&Et(rg,F.ownerDocument.doctype.name)&&(lt="<!DOCTYPE "+F.ownerDocument.doctype.name+`>
`+lt),At&&Ys([W,le,K],or=>{lt=Wo(lt,or," ")}),E&&Te?E.createHTML(lt):lt},e.setConfig=function(){let Z=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};Dc(Z),xt=!0},e.clearConfig=function(){Kr=null,xt=!1},e.isValidAttribute=function(Z,D,F){Kr||Dc({});const G=Pe(Z),Ee=Pe(D);return e1(G,Ee,F)},e.addHook=function(Z,D){typeof D=="function"&&(I[Z]=I[Z]||[],jo(I[Z],D))},e.removeHook=function(Z){if(I[Z])return Xm(I[Z])},e.removeHooks=function(Z){I[Z]&&(I[Z]=[])},e.removeAllHooks=function(){I={}},e}var K8=ag();const sg=K8(window);sg.setConfig({ADD_ATTR:["target","rel"]});function ig(t){if(!t)return"";try{return new Date(t*1e3).toLocaleTimeString([],{hour:"numeric",minute:"2-digit",hour12:!0})}catch{return""}}const Y8=({thought:t})=>{const[e,n]=U.useState(!1);return!t||!ae.settings.showThoughts?null:w.jsxs("div",{className:"allm-mb-2",children:[w.jsxs("div",{onClick:()=>n(!e),className:"allm-cursor-pointer allm-flex allm-items-center allm-gap-x-1.5 allm-text-gray-400 hover:allm-text-gray-500",children:[w.jsx(vu,{size:14,weight:"bold",className:`allm-transition-transform ${e?"allm-rotate-180":""}`}),w.jsx("span",{className:"allm-text-xs allm-font-medium",children:"View thoughts"})]}),e&&w.jsx("div",{className:"allm-mt-2 allm-mb-3 allm-pl-0 allm-border-l-2 allm-border-gray-200",children:w.jsx("div",{className:"allm-text-xs allm-text-gray-600 allm-font-mono allm-whitespace-pre-wrap",children:t.trim()})})]})},X8=U.forwardRef(({uuid:t=Kn(),message:e,role:n,sources:r=[],error:o=!1,errorMsg:a=null,sentAt:s},i)=>{const l=ae.settings.textSize?`allm-text-[${ae.settings.textSize}px]`:"allm-text-sm";o&&console.error(`ANYTHING_LLM_CHAT_WIDGET_ERROR: ${o}`);const c=((e==null?void 0:e.match(/<think>([\s\S]*?)<\/think>/g))||[]).map(d=>d.replace(/<think>|<\/think>/g,"").trim()),p=e==null?void 0:e.replace(/<think>[\s\S]*?<\/think>/g,"").trim();return w.jsxs("div",{className:"allm-py-[5px]",children:[n==="assistant"&&w.jsx("div",{className:"allm-text-[10px] allm-text-gray-400 allm-ml-[54px] allm-mr-6 allm-mb-2 allm-text-left allm-font-sans",children:ae.settings.assistantName||"Anything LLM Chat Assistant"}),w.jsxs("div",{ref:i,className:`allm-flex allm-items-start allm-w-full allm-h-fit ${n==="user"?"allm-justify-end":"allm-justify-start"}`,children:[n==="assistant"&&w.jsx("img",{src:ae.settings.assistantIcon||qo,alt:"Anything LLM Icon",className:"allm-w-9 allm-h-9 allm-flex-shrink-0 allm-ml-2",id:"anything-llm-icon"}),w.jsx("div",{style:{wordBreak:"break-word",backgroundColor:n==="user"?ae.USER_STYLES.msgBg:ae.ASSISTANT_STYLES.msgBg},className:`allm-py-[11px] allm-px-4 allm-flex allm-flex-col allm-font-sans ${o?"allm-bg-red-200 allm-rounded-lg allm-mr-[37px] allm-ml-[9px]":n==="user"?`${ae.USER_STYLES.base} allm-anything-llm-user-message`:`${ae.ASSISTANT_STYLES.base} allm-anything-llm-assistant-message`} allm-shadow-[0_4px_14px_rgba(0,0,0,0.25)]`,children:w.jsx("div",{className:"allm-flex allm-flex-col",children:o?w.jsxs("div",{className:"allm-p-2 allm-rounded-lg allm-bg-red-50 allm-text-red-500",children:[w.jsxs("span",{className:"allm-inline-block",children:[w.jsx(yu,{className:"allm-h-4 allm-w-4 allm-mb-1 allm-inline-block"})," ","Could not respond to message."]}),w.jsx("p",{className:"allm-text-xs allm-font-mono allm-mt-2 allm-border-l-2 allm-border-red-500 allm-pl-2 allm-bg-red-300 allm-p-2 allm-rounded-sm",children:a||"Server error"})]}):w.jsxs(w.Fragment,{children:[n==="assistant"&&c.length>0&&w.jsx(Y8,{thought:c.join(`

`)}),w.jsx("span",{className:`allm-whitespace-pre-line allm-flex allm-flex-col allm-gap-y-1 ${l} allm-leading-[20px]`,dangerouslySetInnerHTML:{__html:sg.sanitize(jm(p||e))}})]})})})]},t),s&&w.jsx("div",{className:`allm-font-sans allm-text-[10px] allm-text-gray-400 allm-ml-[54px] allm-mr-6 allm-mt-2 ${n==="user"?"allm-text-right":"allm-text-left"}`,children:ig(s)})]})}),Q8=U.memo(X8),J8=({hasThought:t})=>t?w.jsxs("div",{className:"allm-flex allm-items-center allm-gap-x-2 allm-text-gray-500",children:[w.jsx(Ds,{size:16,className:"allm-animate-spin"}),w.jsx("span",{className:"allm-text-sm",children:"Thinking..."})]}):w.jsx("div",{className:"allm-mx-4 allm-my-1 allm-dot-falling"}),lg=({thought:t})=>{const[e,n]=U.useState(!1);if(!t||!ae.settings.showThoughts)return null;const r=t.replace(/<\/?think>/g,"").trim();return w.jsxs("div",{className:"allm-mb-2",children:[w.jsxs("div",{onClick:()=>n(!e),className:"allm-cursor-pointer allm-flex allm-items-center allm-gap-x-1.5 allm-text-gray-400 hover:allm-text-gray-500",children:[w.jsx(vu,{size:14,weight:"bold",className:`allm-transition-transform ${e?"allm-rotate-180":""}`}),w.jsx("span",{className:"allm-text-xs allm-font-medium",children:"View thoughts"})]}),e&&w.jsx("div",{className:"allm-mt-2 allm-mb-3 allm-pl-0 allm-border-l-2 allm-border-gray-200",children:w.jsx("div",{className:"allm-text-xs allm-text-gray-600 allm-font-mono allm-whitespace-pre-wrap",children:r})})]})},eC=U.forwardRef(({uuid:t,reply:e,pending:n,error:r,sources:o=[],sentAt:a},s)=>{var f;if(!e&&o.length===0&&!n&&!r)return null;r&&console.error(`ANYTHING_LLM_CHAT_WIDGET_ERROR: ${r}`);const l=((e==null?void 0:e.match(/<think>([\s\S]*?)<\/think>/g))||[]).map(b=>b.replace(/<\/?think>/g,"").trim()),u=(e==null?void 0:e.includes("<think>"))&&!(e!=null&&e.includes("</think>")),c=u?(f=e==null?void 0:e.split("<think>").pop())==null?void 0:f.replace(/<\/?think>/g,"").trim():null;c||l[l.length-1];const p=u||n,d=e==null?void 0:e.replace(/<think>[\s\S]*?<\/think>/g,"").replace(/<think>.*$/g,"").replace(/<\/?think>/g,"").trim();return p?w.jsxs("div",{className:"allm-py-[5px]",children:[w.jsx("div",{className:"allm-text-[10px] allm-text-gray-400 allm-ml-[54px] allm-mr-6 allm-mb-2 allm-text-left allm-font-sans",children:ae.settings.assistantName||"Anything LLM Chat Assistant"}),w.jsxs("div",{className:"allm-flex allm-items-start allm-w-full allm-h-fit allm-justify-start",children:[w.jsx("img",{src:ae.settings.assistantIcon||qo,alt:"Anything LLM Icon",className:"allm-w-9 allm-h-9 allm-flex-shrink-0 allm-ml-2"}),w.jsxs("div",{style:{wordBreak:"break-word",backgroundColor:ae.ASSISTANT_STYLES.msgBg},className:`allm-py-[11px] allm-px-4 allm-flex allm-flex-col ${ae.ASSISTANT_STYLES.base} allm-shadow-[0_4px_14px_rgba(0,0,0,0.25)]`,children:[u&&c&&w.jsx(lg,{thought:c}),w.jsx(J8,{hasThought:u})]})]})]}):r?w.jsxs("div",{className:"allm-py-[5px]",children:[w.jsx("div",{className:"allm-text-[10px] allm-text-gray-400 allm-ml-[54px] allm-mr-6 allm-mb-2 allm-text-left allm-font-sans",children:ae.settings.assistantName||"Anything LLM Chat Assistant"}),w.jsxs("div",{className:"allm-flex allm-items-start allm-w-full allm-h-fit allm-justify-start",children:[w.jsx("img",{src:ae.settings.assistantIcon||qo,alt:"Anything LLM Icon",className:"allm-w-9 allm-h-9 allm-flex-shrink-0 allm-ml-2"}),w.jsx("div",{className:"allm-py-[11px] allm-px-4 allm-rounded-lg allm-flex allm-flex-col allm-bg-red-200 allm-shadow-[0_4px_14px_rgba(0,0,0,0.25)] allm-mr-[37px] allm-ml-[9px]",children:w.jsx("div",{className:"allm-flex allm-gap-x-5",children:w.jsxs("span",{className:"allm-inline-block allm-p-2 allm-rounded-lg allm-bg-red-50 allm-text-red-500",children:[w.jsx(yu,{className:"allm-h-4 allm-w-4 allm-mb-1 allm-inline-block"})," ","Could not respond to message.",w.jsx("span",{className:"allm-text-xs",children:"Server error"})]})})})]})]}):w.jsxs("div",{className:"allm-py-[5px]",children:[w.jsx("div",{className:"allm-text-[10px] allm-text-gray-400 allm-ml-[54px] allm-mr-6 allm-mb-2 allm-text-left allm-font-sans",children:ae.settings.assistantName||"Anything LLM Chat Assistant"}),w.jsxs("div",{ref:s,className:"allm-flex allm-items-start allm-w-full allm-h-fit allm-justify-start",children:[w.jsx("img",{src:ae.settings.assistantIcon||qo,alt:"Anything LLM Icon",className:"allm-w-9 allm-h-9 allm-flex-shrink-0 allm-ml-2"}),w.jsxs("div",{style:{wordBreak:"break-word",backgroundColor:ae.ASSISTANT_STYLES.msgBg},className:`allm-py-[11px] allm-px-4 allm-flex allm-flex-col ${ae.ASSISTANT_STYLES.base} allm-shadow-[0_4px_14px_rgba(0,0,0,0.25)]`,children:[l.length>0&&w.jsx(lg,{thought:l.join(`

`)}),w.jsx("div",{className:"allm-flex allm-gap-x-5",children:w.jsx("span",{className:"allm-font-sans allm-reply allm-whitespace-pre-line allm-font-normal allm-text-sm allm-md:text-sm allm-flex allm-flex-col allm-gap-y-1",dangerouslySetInnerHTML:{__html:jm(d||"")}})})]})]},t),a&&w.jsx("div",{className:"allm-text-[10px] allm-text-gray-400 allm-ml-[54px] allm-mr-6 allm-mt-2 allm-text-left allm-font-sans",children:ig(a)})]})}),tC=U.memo(eC);var nC="Expected a function",ug=NaN,rC="[object Symbol]",oC=/^\s+|\s+$/g,aC=/^[-+]0x[0-9a-f]+$/i,sC=/^0b[01]+$/i,iC=/^0o[0-7]+$/i,lC=parseInt,uC=typeof xe=="object"&&xe&&xe.Object===Object&&xe,cC=typeof self=="object"&&self&&self.Object===Object&&self,dC=uC||cC||Function("return this")(),pC=Object.prototype,fC=pC.toString,mC=Math.max,gC=Math.min,gc=function(){return dC.Date.now()};function hC(t,e,n){var r,o,a,s,i,l,u=0,c=!1,p=!1,d=!0;if(typeof t!="function")throw new TypeError(nC);e=cg(e)||0,hc(n)&&(c=!!n.leading,p="maxWait"in n,a=p?mC(cg(n.maxWait)||0,e):a,d="trailing"in n?!!n.trailing:d);function f(v){var N=r,R=o;return r=o=void 0,u=v,s=t.apply(R,N),s}function b(v){return u=v,i=setTimeout(h,e),c?f(v):s}function A(v){var N=v-l,R=v-u,H=e-N;return p?gC(H,a-R):H}function y(v){var N=v-l,R=v-u;return l===void 0||N>=e||N<0||p&&R>=a}function h(){var v=gc();if(y(v))return g(v);i=setTimeout(h,A(v))}function g(v){return i=void 0,d&&r?f(v):(r=o=void 0,s)}function E(){i!==void 0&&clearTimeout(i),u=0,r=l=o=i=void 0}function _(){return i===void 0?s:g(gc())}function T(){var v=gc(),N=y(v);if(r=arguments,o=this,l=v,N){if(i===void 0)return b(l);if(p)return i=setTimeout(h,e),f(l)}return i===void 0&&(i=setTimeout(h,e)),s}return T.cancel=E,T.flush=_,T}function hc(t){var e=typeof t;return!!t&&(e=="object"||e=="function")}function EC(t){return!!t&&typeof t=="object"}function bC(t){return typeof t=="symbol"||EC(t)&&fC.call(t)==rC}function cg(t){if(typeof t=="number")return t;if(bC(t))return ug;if(hc(t)){var e=typeof t.valueOf=="function"?t.valueOf():t;t=hc(e)?e+"":e}if(typeof t!="string")return t===0?t:+t;t=t.replace(oC,"");var n=sC.test(t);return n||iC.test(t)?lC(t.slice(2),n?2:8):aC.test(t)?ug:+t}var AC=hC;const _C=Ht(AC);function vC({settings:t={},history:e=[]}){const n=U.useRef(null),[r,o]=U.useState(!0),a=U.useRef(null);U.useEffect(()=>{l()},[e]);const i=_C(()=>{if(!a.current)return;const c=a.current.scrollHeight-a.current.scrollTop-a.current.clientHeight<=40;o(c)},100);U.useEffect(()=>{function u(){if(!a.current)return null;const c=a.current;if(!c)return null;c.addEventListener("scroll",i)}u()},[]);const l=()=>{a.current&&a.current.scrollTo({top:a.current.scrollHeight,behavior:"smooth"})};return e.length===0?w.jsx("div",{className:"allm-h-full allm-overflow-y-auto allm-px-2 allm-py-4 allm-flex allm-flex-col allm-justify-start allm-no-scroll",children:w.jsxs("div",{className:"allm-flex allm-h-full allm-flex-col allm-items-center allm-justify-center",children:[w.jsx("p",{className:"allm-text-slate-400 allm-text-sm allm-font-sans allm-py-4 allm-text-center",children:(t==null?void 0:t.greeting)??"Send a chat to get started."}),w.jsx(DC,{settings:t})]})}):w.jsxs("div",{className:"allm-h-full allm-overflow-y-auto allm-px-2 allm-pt-4 allm-pb-8 allm-flex allm-flex-col allm-justify-start allm-no-scroll",id:"chat-history",ref:a,children:[w.jsx("div",{className:"allm-flex allm-flex-col allm-gap-y-4",children:e.map((u,c)=>{const p=c===e.length-1;return c===e.length-1&&u.role==="assistant"&&u.animate?w.jsx(tC,{ref:p?n:null,uuid:u.uuid,reply:u.content,pending:u.pending,sources:u.sources,error:u.error,closed:u.closed},u.uuid):w.jsx(Q8,{ref:p?n:null,message:u.content,sentAt:u.sentAt||Date.now()/1e3,role:u.role,sources:u.sources,chatId:u.chatId,feedbackScore:u.feedbackScore,error:u.error,errorMsg:u.errorMsg},c)})}),!r&&w.jsx("div",{className:"allm-fixed allm-bottom-[10rem] allm-right-[50px] allm-z-50 allm-cursor-pointer allm-animate-pulse",children:w.jsx("div",{className:"allm-flex allm-flex-col allm-items-center",children:w.jsx("div",{className:"allm-rounded-full allm-border allm-border-white/10 allm-bg-black/20 hover:allm-bg-black/50 allm-w-8 allm-h-8 allm-flex allm-items-center allm-justify-center",children:w.jsx(lf,{weight:"bold",className:"allm-text-white/50 allm-w-4 allm-h-4",onClick:l,id:"scroll-to-bottom-button","aria-label":"Scroll to bottom"})})})})]})}function yC(){return w.jsx("div",{className:"allm-h-full allm-w-full allm-relative",children:w.jsx("div",{className:"allm-h-full allm-max-h-[82vh] allm-pb-[100px] allm-pt-[5px] allm-bg-gray-100 allm-rounded-lg allm-px-2 allm-h-full allm-mt-2 allm-gap-y-2 allm-overflow-y-scroll allm-flex allm-flex-col allm-justify-start allm-no-scroll",children:w.jsx("div",{className:"allm-flex allm-h-full allm-flex-col allm-items-center allm-justify-center",children:w.jsx(Ds,{size:14,className:"allm-text-slate-400 allm-animate-spin"})})})})}function DC({settings:t}){var e;return(e=t==null?void 0:t.defaultMessages)!=null&&e.length?w.jsx("div",{className:"allm-flex allm-flex-col allm-gap-y-2 allm-w-[75%]",children:t.defaultMessages.map((n,r)=>w.jsx("button",{style:{opacity:0,wordBreak:"break-word",backgroundColor:ae.USER_STYLES.msgBg,fontSize:t.textSize},type:"button",onClick:()=>{window.dispatchEvent(new CustomEvent(Ac,{detail:{command:n}}))},className:"msg-suggestion allm-border-none hover:allm-shadow-[0_4px_14px_rgba(0,0,0,0.5)] allm-cursor-pointer allm-px-2 allm-py-2 allm-rounded-lg allm-text-white allm-w-full allm-shadow-[0_4px_14px_rgba(0,0,0,0.25)]",children:n},r))}):null}function CC(){if(console&&console.warn){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];nr(e[0])&&(e[0]=`react-i18next:: ${e[0]}`),console.warn(...e)}}const dg={};function Ec(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];nr(e[0])&&dg[e[0]]||(nr(e[0])&&(dg[e[0]]=new Date),CC(...e))}const pg=(t,e)=>()=>{if(t.isInitialized)e();else{const n=()=>{setTimeout(()=>{t.off("initialized",n)},0),e()};t.on("initialized",n)}},fg=(t,e,n)=>{t.loadNamespaces(e,pg(t,n))},mg=(t,e,n,r)=>{nr(n)&&(n=[n]),n.forEach(o=>{t.options.ns.indexOf(o)<0&&t.options.ns.push(o)}),t.loadLanguages(e,pg(t,r))},SC=function(t,e){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};const r=e.languages[0],o=e.options?e.options.fallbackLng:!1,a=e.languages[e.languages.length-1];if(r.toLowerCase()==="cimode")return!0;const s=(i,l)=>{const u=e.services.backendConnector.state[`${i}|${l}`];return u===-1||u===2};return n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&e.services.backendConnector.backend&&e.isLanguageChangingTo&&!s(e.isLanguageChangingTo,t)?!1:!!(e.hasResourceBundle(r,t)||!e.services.backendConnector.backend||e.options.resources&&!e.options.partialBundledLanguages||s(r,t)&&(!o||s(a,t)))},TC=function(t,e){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return!e.languages||!e.languages.length?(Ec("i18n.languages were undefined or empty",e.languages),!0):e.options.ignoreJSONStructure!==void 0?e.hasLoadedNamespace(t,{lng:n.lng,precheck:(o,a)=>{if(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&o.services.backendConnector.backend&&o.isLanguageChangingTo&&!a(o.isLanguageChangingTo,t))return!1}}):SC(t,e,n)},nr=t=>typeof t=="string",NC=t=>typeof t=="object"&&t!==null,wC=/&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g,xC={"&amp;":"&","&#38;":"&","&lt;":"<","&#60;":"<","&gt;":">","&#62;":">","&apos;":"'","&#39;":"'","&quot;":'"',"&#34;":'"',"&nbsp;":" ","&#160;":" ","&copy;":"©","&#169;":"©","&reg;":"®","&#174;":"®","&hellip;":"…","&#8230;":"…","&#x2F;":"/","&#47;":"/"},RC=t=>xC[t];let bc={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0,unescape:t=>t.replace(wC,RC)};const LC=function(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};bc={...bc,...t}},OC=()=>bc;let gg;const kC=t=>{gg=t},IC=()=>gg,MC={type:"3rdParty",init(t){LC(t.options.react),kC(t)}},hg=U.createContext();class FC{constructor(){a1(this,"getUsedNamespaces",()=>Object.keys(this.usedNamespaces));this.usedNamespaces={}}addUsedNamespaces(e){e.forEach(n=>{this.usedNamespaces[n]||(this.usedNamespaces[n]=!0)})}}const BC=(t,e)=>{const n=U.useRef();return U.useEffect(()=>{n.current=e?n.current:t},[t,e]),n.current},Eg=(t,e,n,r)=>t.getFixedT(e,n,r),PC=(t,e,n,r)=>U.useCallback(Eg(t,e,n,r),[t,e,n,r]),bg=function(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const{i18n:n}=e,{i18n:r,defaultNS:o}=U.useContext(hg)||{},a=n||r||IC();if(a&&!a.reportNamespaces&&(a.reportNamespaces=new FC),!a){Ec("You will need to pass in an i18next instance by using initReactI18next");const _=(v,N)=>nr(N)?N:NC(N)&&nr(N.defaultValue)?N.defaultValue:Array.isArray(v)?v[v.length-1]:v,T=[_,{},!1];return T.t=_,T.i18n={},T.ready=!1,T}a.options.react&&a.options.react.wait!==void 0&&Ec("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");const s={...OC(),...a.options.react,...e},{useSuspense:i,keyPrefix:l}=s;let u=t||o||a.options&&a.options.defaultNS;u=nr(u)?[u]:u||["translation"],a.reportNamespaces.addUsedNamespaces&&a.reportNamespaces.addUsedNamespaces(u);const c=(a.isInitialized||a.initializedStoreOnce)&&u.every(_=>TC(_,a,s)),p=PC(a,e.lng||null,s.nsMode==="fallback"?u:u[0],l),d=()=>p,f=()=>Eg(a,e.lng||null,s.nsMode==="fallback"?u:u[0],l),[b,A]=U.useState(d);let y=u.join();e.lng&&(y=`${e.lng}${y}`);const h=BC(y),g=U.useRef(!0);U.useEffect(()=>{const{bindI18n:_,bindI18nStore:T}=s;g.current=!0,!c&&!i&&(e.lng?mg(a,e.lng,u,()=>{g.current&&A(f)}):fg(a,u,()=>{g.current&&A(f)})),c&&h&&h!==y&&g.current&&A(f);const v=()=>{g.current&&A(f)};return _&&a&&a.on(_,v),T&&a&&a.store.on(T,v),()=>{g.current=!1,_&&a&&_.split(" ").forEach(N=>a.off(N,v)),T&&a&&T.split(" ").forEach(N=>a.store.off(N,v))}},[a,y]),U.useEffect(()=>{g.current&&c&&A(d)},[a,l,c]);const E=[b,a,c];if(E.t=b,E.i18n=a,E.ready=c,c||!c&&!i)return E;throw new Promise(_=>{e.lng?mg(a,e.lng,u,()=>_()):fg(a,u,()=>_())})};function UC(t){let{i18n:e,defaultNS:n,children:r}=t;const o=U.useMemo(()=>({i18n:e,defaultNS:n}),[e,n]);return U.createElement(hg.Provider,{value:o},r)}function qC({settings:t,message:e,submit:n,onChange:r,inputDisabled:o,buttonDisabled:a}){const{t:s}=bg(),i=U.useRef(null),l=U.useRef(null),[u,c]=U.useState(!1);U.useEffect(()=>{!o&&l.current&&l.current.focus(),d()},[o]);const p=A=>{c(!1),n(A)},d=()=>{l.current&&(l.current.style.height="auto")},f=A=>{A.keyCode==13&&(A.shiftKey||n(A))},b=A=>{const y=A.target;y.style.height="auto",y.style.height=A.target.value.length!==0?y.scrollHeight+"px":"auto"};return w.jsx("div",{className:"allm-w-full allm-sticky allm-bottom-0 allm-z-10 allm-flex allm-justify-center allm-items-center allm-bg-white",children:w.jsx("form",{onSubmit:p,className:"allm-flex allm-flex-col allm-gap-y-1 allm-rounded-t-lg allm-w-full allm-items-center allm-justify-center",children:w.jsx("div",{className:"allm-flex allm-items-center allm-w-full",children:w.jsx("div",{className:"allm-bg-white allm-flex allm-flex-col allm-px-4 allm-overflow-hidden allm-w-full",children:w.jsxs("div",{style:{border:"1.5px solid #22262833"},className:"allm-flex allm-items-center allm-w-full allm-rounded-2xl",children:[w.jsx("textarea",{ref:l,onKeyUp:b,onKeyDown:f,onChange:r,required:!0,disabled:o,onFocus:()=>c(!0),onBlur:A=>{c(!1),b(A)},value:e,className:"allm-font-sans allm-border-none allm-cursor-text allm-max-h-[100px] allm-text-[14px] allm-mx-2 allm-py-2 allm-w-full allm-text-black allm-bg-transparent placeholder:allm-text-slate-800/60 allm-resize-none active:allm-outline-none focus:allm-outline-none allm-flex-grow",placeholder:t.sendMessageText||s("chat.send-message"),id:"message-input"}),w.jsxs("button",{ref:i,type:"submit",disabled:a,className:"allm-bg-transparent allm-border-none allm-inline-flex allm-justify-center allm-rounded-2xl allm-cursor-pointer allm-text-black group",id:"send-message-button","aria-label":"Send message",children:[a?w.jsx(Ds,{className:"allm-w-4 allm-h-4 allm-animate-spin"}):w.jsx(Vf,{size:24,className:"allm-my-3 allm-text-[#22262899]/60 group-hover:allm-text-[#22262899]/90",weight:"fill"}),w.jsx("span",{className:"allm-sr-only",children:"Send message"})]})]})})})})})}function HC(t,e,n,r,o){const{uuid:a,textResponse:s,type:i,sources:l=[],error:u,close:c,errorMsg:p=null}=t,d=o[o.length-1],f=d==null?void 0:d.sentAt;if(i==="abort")e(!1),n([...r,{uuid:a,content:s,role:"assistant",sources:l,closed:!0,error:u,errorMsg:p,animate:!1,pending:!1,sentAt:f}]),o.push({uuid:a,content:s,role:"assistant",sources:l,closed:!0,error:u,errorMsg:p,animate:!1,pending:!1,sentAt:f});else if(i==="textResponse")e(!1),n([...r,{uuid:a,content:s,role:"assistant",sources:l,closed:c,error:u,errorMsg:p,animate:!c,pending:!1,sentAt:f}]),o.push({uuid:a,content:s,role:"assistant",sources:l,closed:c,error:u,errorMsg:p,animate:!c,pending:!1,sentAt:f});else if(i==="textResponseChunk"){const b=o.findIndex(A=>A.uuid===a);if(b!==-1){const A={...o[b]},y={...A,content:A.content+s,sources:l,error:u,errorMsg:p,closed:c,animate:!c,pending:!1,sentAt:f};o[b]=y}else o.push({uuid:a,sources:l,error:u,errorMsg:p,content:s,role:"assistant",closed:c,animate:!c,pending:!1,sentAt:f});n([...o])}}const Ac="anythingllm-embed-send-prompt";function VC({sessionId:t,settings:e,knownHistory:n=[]}){const[r,o]=U.useState(""),[a,s]=U.useState(!1),[i,l]=U.useState(n);U.useEffect(()=>{n.length!==i.length&&l([...n])},[n]);const u=f=>{o(f.target.value)},c=async f=>{if(f.preventDefault(),!r||r==="")return!1;const b=[...i,{content:r,role:"user",sentAt:Math.floor(Date.now()/1e3)},{content:"",role:"assistant",pending:!0,userMessage:r,animate:!0,sentAt:Math.floor(Date.now()/1e3)}];l(b),o(""),s(!0)},p=(f,b=[],A=[])=>{if(!f||f==="")return!1;let y;b.length>0?y=[...b,{content:"",role:"assistant",pending:!0,userMessage:f,attachments:A,animate:!0}]:y=[...i,{content:f,role:"user",attachments:A},{content:"",role:"assistant",pending:!0,userMessage:f,animate:!0}],l(y),s(!0)};U.useEffect(()=>{async function f(){const b=i.length>0?i[i.length-1]:null,A=i.length>0?i.slice(0,-1):[];var y=[...A];if(!b||!(b!=null&&b.userMessage))return s(!1),!1;await Cs.streamChat(t,e,b.userMessage,h=>HC(h,s,l,A,y))}a===!0&&f()},[a,i]);const d=f=>{f.detail.command&&p(f.detail.command,[],[])};return U.useEffect(()=>(window.addEventListener(Ac,d),()=>{window.removeEventListener(Ac,d)}),[]),w.jsxs("div",{className:"allm-h-full allm-w-full allm-flex allm-flex-col",children:[w.jsx("div",{className:"allm-flex-1 allm-min-h-0 allm-mb-8",children:w.jsx(vC,{settings:e,history:i})}),w.jsx("div",{className:"allm-flex-shrink-0 allm-mt-auto",children:w.jsx(qC,{settings:e,message:r,submit:c,onChange:u,inputDisabled:a,buttonDisabled:a})})]})}function Ag({settings:t}){return t.noSponsor?null:w.jsx("div",{className:"allm-flex allm-w-full allm-items-center allm-justify-center",children:w.jsx("a",{style:{color:"#0119D9"},href:t.sponsorLink??"#",target:"_blank",rel:"noreferrer",className:"allm-text-xs allm-font-sans hover:allm-opacity-80 hover:allm-underline",children:t.sponsorText})})}function $C({setChatHistory:t,settings:e,sessionId:n,closeChat:r}){const{t:o}=bg(),a=async()=>{await Cs.resetEmbedChatSession(e,n),t([])};return w.jsxs("div",{className:"allm-w-full allm-flex allm-justify-center allm-gap-x-1 p-0",children:[w.jsx("button",{style:{color:"#7A7D7E"},className:"allm-h-fit allm-px-0 hover:allm-cursor-pointer allm-border-none allm-text-sm allm-bg-transparent hover:allm-opacity-80 hover:allm-underline",onClick:()=>a(),children:e.resetChatText||o("chat.reset-chat")}),e.noHeader&&w.jsxs(w.Fragment,{children:[w.jsx("p",{className:"allm-m-0 allm-h-fit allm-text-sm allm-text-[#7A7D7E]",children:"|"}),w.jsx("button",{type:"button",style:{color:"#7A7D7E"},className:"allm-h-fit allm-px-0 hover:allm-cursor-pointer allm-border-none allm-text-sm allm-bg-transparent hover:allm-opacity-80 hover:allm-underline",onClick:r,children:"Close Chat"})]})]})}function zC({closeChat:t,settings:e,sessionId:n}){const{chatHistory:r,setChatHistory:o,loading:a}=k_(e,n);return a?w.jsxs("div",{className:"allm-flex allm-flex-col allm-h-full",children:[w.jsx(e2,{sessionId:n,settings:e,iconUrl:e.brandImageUrl,closeChat:t,setChatHistory:o}),w.jsx(yC,{}),w.jsxs("div",{className:"allm-pt-4 allm-pb-2 allm-h-fit allm-gap-y-1",children:[w.jsx(O_,{}),w.jsx(Ag,{settings:e})]})]}):(ZC(),w.jsxs("div",{className:"allm-flex allm-flex-col allm-h-full",children:[!e.noHeader&&w.jsx(e2,{sessionId:n,settings:e,iconUrl:e.brandImageUrl,closeChat:t,setChatHistory:o}),w.jsx("div",{className:"allm-flex-grow allm-overflow-y-auto",children:w.jsx(VC,{sessionId:n,settings:e,knownHistory:r})}),w.jsxs("div",{className:"allm-mt-4 allm-pb-4 allm-h-fit allm-gap-y-2 allm-z-10",children:[w.jsx(Ag,{settings:e}),w.jsx($C,{setChatHistory:o,settings:e,sessionId:n,closeChat:t})]})]}))}function GC(t){var o,a,s;const e=document.querySelector(`[data-code="${t}"]`);if(!e)return!1;const n=(s=(a=(o=e.parentElement)==null?void 0:o.parentElement)==null?void 0:a.querySelector("pre:first-of-type"))==null?void 0:s.innerText;if(!n)return!1;window.navigator.clipboard.writeText(n),e.classList.add("allm-text-green-500");const r=e.innerHTML;e.innerText="Copied!",e.setAttribute("disabled",!0),setTimeout(()=>{e.classList.remove("allm-text-green-500"),e.innerHTML=r,e.removeAttribute("disabled")},2500)}function ZC(){document==null||document.addEventListener("click",function(t){var r;const e=t.target.closest("[data-code-snippet]"),n=(r=e==null?void 0:e.dataset)==null?void 0:r.code;if(!n)return!1;GC(n)})}const Y=t=>typeof t=="string",Yo=()=>{let t,e;const n=new Promise((r,o)=>{t=r,e=o});return n.resolve=t,n.reject=e,n},_g=t=>t==null?"":""+t,jC=(t,e,n)=>{t.forEach(r=>{e[r]&&(n[r]=e[r])})},WC=/###/g,vg=t=>t&&t.indexOf("###")>-1?t.replace(WC,"."):t,yg=t=>!t||Y(t),Xo=(t,e,n)=>{const r=Y(e)?e.split("."):e;let o=0;for(;o<r.length-1;){if(yg(t))return{};const a=vg(r[o]);!t[a]&&n&&(t[a]=new n),Object.prototype.hasOwnProperty.call(t,a)?t=t[a]:t={},++o}return yg(t)?{}:{obj:t,k:vg(r[o])}},Dg=(t,e,n)=>{const{obj:r,k:o}=Xo(t,e,Object);if(r!==void 0||e.length===1){r[o]=n;return}let a=e[e.length-1],s=e.slice(0,e.length-1),i=Xo(t,s,Object);for(;i.obj===void 0&&s.length;)a=`${s[s.length-1]}.${a}`,s=s.slice(0,s.length-1),i=Xo(t,s,Object),i&&i.obj&&typeof i.obj[`${i.k}.${a}`]<"u"&&(i.obj=void 0);i.obj[`${i.k}.${a}`]=n},KC=(t,e,n,r)=>{const{obj:o,k:a}=Xo(t,e,Object);o[a]=o[a]||[],o[a].push(n)},ei=(t,e)=>{const{obj:n,k:r}=Xo(t,e);if(n)return n[r]},YC=(t,e,n)=>{const r=ei(t,n);return r!==void 0?r:ei(e,n)},Cg=(t,e,n)=>{for(const r in e)r!=="__proto__"&&r!=="constructor"&&(r in t?Y(t[r])||t[r]instanceof String||Y(e[r])||e[r]instanceof String?n&&(t[r]=e[r]):Cg(t[r],e[r],n):t[r]=e[r]);return t},$r=t=>t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&");var XC={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};const QC=t=>Y(t)?t.replace(/[&<>"'\/]/g,e=>XC[e]):t;class JC{constructor(e){this.capacity=e,this.regExpMap=new Map,this.regExpQueue=[]}getRegExp(e){const n=this.regExpMap.get(e);if(n!==void 0)return n;const r=new RegExp(e);return this.regExpQueue.length===this.capacity&&this.regExpMap.delete(this.regExpQueue.shift()),this.regExpMap.set(e,r),this.regExpQueue.push(e),r}}const eS=[" ",",","?","!",";"],tS=new JC(20),nS=(t,e,n)=>{e=e||"",n=n||"";const r=eS.filter(s=>e.indexOf(s)<0&&n.indexOf(s)<0);if(r.length===0)return!0;const o=tS.getRegExp(`(${r.map(s=>s==="?"?"\\?":s).join("|")})`);let a=!o.test(t);if(!a){const s=t.indexOf(n);s>0&&!o.test(t.substring(0,s))&&(a=!0)}return a},_c=function(t,e){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:".";if(!t)return;if(t[e])return t[e];const r=e.split(n);let o=t;for(let a=0;a<r.length;){if(!o||typeof o!="object")return;let s,i="";for(let l=a;l<r.length;++l)if(l!==a&&(i+=n),i+=r[l],s=o[i],s!==void 0){if(["string","number","boolean"].indexOf(typeof s)>-1&&l<r.length-1)continue;a+=l-a+1;break}o=s}return o},ti=t=>t&&t.replace("_","-"),rS={type:"logger",log(t){this.output("log",t)},warn(t){this.output("warn",t)},error(t){this.output("error",t)},output(t,e){console&&console[t]&&console[t].apply(console,e)}};class ni{constructor(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};this.init(e,n)}init(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};this.prefix=n.prefix||"i18next:",this.logger=e||rS,this.options=n,this.debug=n.debug}log(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return this.forward(n,"log","",!0)}warn(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return this.forward(n,"warn","",!0)}error(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return this.forward(n,"error","")}deprecate(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return this.forward(n,"warn","WARNING DEPRECATED: ",!0)}forward(e,n,r,o){return o&&!this.debug?null:(Y(e[0])&&(e[0]=`${r}${this.prefix} ${e[0]}`),this.logger[n](e))}create(e){return new ni(this.logger,{prefix:`${this.prefix}:${e}:`,...this.options})}clone(e){return e=e||this.options,e.prefix=e.prefix||this.prefix,new ni(this.logger,e)}}var Xt=new ni;class ri{constructor(){this.observers={}}on(e,n){return e.split(" ").forEach(r=>{this.observers[r]||(this.observers[r]=new Map);const o=this.observers[r].get(n)||0;this.observers[r].set(n,o+1)}),this}off(e,n){if(this.observers[e]){if(!n){delete this.observers[e];return}this.observers[e].delete(n)}}emit(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];this.observers[e]&&Array.from(this.observers[e].entries()).forEach(s=>{let[i,l]=s;for(let u=0;u<l;u++)i(...r)}),this.observers["*"]&&Array.from(this.observers["*"].entries()).forEach(s=>{let[i,l]=s;for(let u=0;u<l;u++)i.apply(i,[e,...r])})}}class Sg extends ri{constructor(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{ns:["translation"],defaultNS:"translation"};super(),this.data=e||{},this.options=n,this.options.keySeparator===void 0&&(this.options.keySeparator="."),this.options.ignoreJSONStructure===void 0&&(this.options.ignoreJSONStructure=!0)}addNamespaces(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}removeNamespaces(e){const n=this.options.ns.indexOf(e);n>-1&&this.options.ns.splice(n,1)}getResource(e,n,r){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};const a=o.keySeparator!==void 0?o.keySeparator:this.options.keySeparator,s=o.ignoreJSONStructure!==void 0?o.ignoreJSONStructure:this.options.ignoreJSONStructure;let i;e.indexOf(".")>-1?i=e.split("."):(i=[e,n],r&&(Array.isArray(r)?i.push(...r):Y(r)&&a?i.push(...r.split(a)):i.push(r)));const l=ei(this.data,i);return!l&&!n&&!r&&e.indexOf(".")>-1&&(e=i[0],n=i[1],r=i.slice(2).join(".")),l||!s||!Y(r)?l:_c(this.data&&this.data[e]&&this.data[e][n],r,a)}addResource(e,n,r,o){let a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:{silent:!1};const s=a.keySeparator!==void 0?a.keySeparator:this.options.keySeparator;let i=[e,n];r&&(i=i.concat(s?r.split(s):r)),e.indexOf(".")>-1&&(i=e.split("."),o=n,n=i[1]),this.addNamespaces(n),Dg(this.data,i,o),a.silent||this.emit("added",e,n,r,o)}addResources(e,n,r){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{silent:!1};for(const a in r)(Y(r[a])||Array.isArray(r[a]))&&this.addResource(e,n,a,r[a],{silent:!0});o.silent||this.emit("added",e,n,r)}addResourceBundle(e,n,r,o,a){let s=arguments.length>5&&arguments[5]!==void 0?arguments[5]:{silent:!1,skipCopy:!1},i=[e,n];e.indexOf(".")>-1&&(i=e.split("."),o=r,r=n,n=i[1]),this.addNamespaces(n);let l=ei(this.data,i)||{};s.skipCopy||(r=JSON.parse(JSON.stringify(r))),o?Cg(l,r,a):l={...l,...r},Dg(this.data,i,l),s.silent||this.emit("added",e,n,r)}removeResourceBundle(e,n){this.hasResourceBundle(e,n)&&delete this.data[e][n],this.removeNamespaces(n),this.emit("removed",e,n)}hasResourceBundle(e,n){return this.getResource(e,n)!==void 0}getResourceBundle(e,n){return n||(n=this.options.defaultNS),this.options.compatibilityAPI==="v1"?{...this.getResource(e,n)}:this.getResource(e,n)}getDataByLanguage(e){return this.data[e]}hasLanguageSomeTranslations(e){const n=this.getDataByLanguage(e);return!!(n&&Object.keys(n)||[]).find(o=>n[o]&&Object.keys(n[o]).length>0)}toJSON(){return this.data}}var Tg={processors:{},addPostProcessor(t){this.processors[t.name]=t},handle(t,e,n,r,o){return t.forEach(a=>{this.processors[a]&&(e=this.processors[a].process(e,n,r,o))}),e}};const Ng={};class oi extends ri{constructor(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};super(),jC(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,this),this.options=n,this.options.keySeparator===void 0&&(this.options.keySeparator="."),this.logger=Xt.create("translator")}changeLanguage(e){e&&(this.language=e)}exists(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{interpolation:{}};if(e==null)return!1;const r=this.resolve(e,n);return r&&r.res!==void 0}extractFromKey(e,n){let r=n.nsSeparator!==void 0?n.nsSeparator:this.options.nsSeparator;r===void 0&&(r=":");const o=n.keySeparator!==void 0?n.keySeparator:this.options.keySeparator;let a=n.ns||this.options.defaultNS||[];const s=r&&e.indexOf(r)>-1,i=!this.options.userDefinedKeySeparator&&!n.keySeparator&&!this.options.userDefinedNsSeparator&&!n.nsSeparator&&!nS(e,r,o);if(s&&!i){const l=e.match(this.interpolator.nestingRegexp);if(l&&l.length>0)return{key:e,namespaces:Y(a)?[a]:a};const u=e.split(r);(r!==o||r===o&&this.options.ns.indexOf(u[0])>-1)&&(a=u.shift()),e=u.join(o)}return{key:e,namespaces:Y(a)?[a]:a}}translate(e,n,r){if(typeof n!="object"&&this.options.overloadTranslationOptionHandler&&(n=this.options.overloadTranslationOptionHandler(arguments)),typeof n=="object"&&(n={...n}),n||(n={}),e==null)return"";Array.isArray(e)||(e=[String(e)]);const o=n.returnDetails!==void 0?n.returnDetails:this.options.returnDetails,a=n.keySeparator!==void 0?n.keySeparator:this.options.keySeparator,{key:s,namespaces:i}=this.extractFromKey(e[e.length-1],n),l=i[i.length-1],u=n.lng||this.language,c=n.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(u&&u.toLowerCase()==="cimode"){if(c){const _=n.nsSeparator||this.options.nsSeparator;return o?{res:`${l}${_}${s}`,usedKey:s,exactUsedKey:s,usedLng:u,usedNS:l,usedParams:this.getUsedParamsDetails(n)}:`${l}${_}${s}`}return o?{res:s,usedKey:s,exactUsedKey:s,usedLng:u,usedNS:l,usedParams:this.getUsedParamsDetails(n)}:s}const p=this.resolve(e,n);let d=p&&p.res;const f=p&&p.usedKey||s,b=p&&p.exactUsedKey||s,A=Object.prototype.toString.apply(d),y=["[object Number]","[object Function]","[object RegExp]"],h=n.joinArrays!==void 0?n.joinArrays:this.options.joinArrays,g=!this.i18nFormat||this.i18nFormat.handleAsObject,E=!Y(d)&&typeof d!="boolean"&&typeof d!="number";if(g&&d&&E&&y.indexOf(A)<0&&!(Y(h)&&Array.isArray(d))){if(!n.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");const _=this.options.returnedObjectHandler?this.options.returnedObjectHandler(f,d,{...n,ns:i}):`key '${s} (${this.language})' returned an object instead of string.`;return o?(p.res=_,p.usedParams=this.getUsedParamsDetails(n),p):_}if(a){const _=Array.isArray(d),T=_?[]:{},v=_?b:f;for(const N in d)if(Object.prototype.hasOwnProperty.call(d,N)){const R=`${v}${a}${N}`;T[N]=this.translate(R,{...n,joinArrays:!1,ns:i}),T[N]===R&&(T[N]=d[N])}d=T}}else if(g&&Y(h)&&Array.isArray(d))d=d.join(h),d&&(d=this.extendTranslation(d,e,n,r));else{let _=!1,T=!1;const v=n.count!==void 0&&!Y(n.count),N=oi.hasDefaultValue(n),R=v?this.pluralResolver.getSuffix(u,n.count,n):"",H=n.ordinal&&v?this.pluralResolver.getSuffix(u,n.count,{ordinal:!1}):"",I=v&&!n.ordinal&&n.count===0&&this.pluralResolver.shouldUseIntlApi(),W=I&&n[`defaultValue${this.options.pluralSeparator}zero`]||n[`defaultValue${R}`]||n[`defaultValue${H}`]||n.defaultValue;!this.isValidLookup(d)&&N&&(_=!0,d=W),this.isValidLookup(d)||(T=!0,d=s);const K=(n.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&T?void 0:d,O=N&&W!==d&&this.options.updateMissing;if(T||_||O){if(this.logger.log(O?"updateKey":"missingKey",u,l,s,O?W:d),a){const S=this.resolve(s,{...n,keySeparator:!1});S&&S.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}let V=[];const B=this.languageUtils.getFallbackCodes(this.options.fallbackLng,n.lng||this.language);if(this.options.saveMissingTo==="fallback"&&B&&B[0])for(let S=0;S<B.length;S++)V.push(B[S]);else this.options.saveMissingTo==="all"?V=this.languageUtils.toResolveHierarchy(n.lng||this.language):V.push(n.lng||this.language);const x=(S,C,L)=>{const k=N&&L!==d?L:K;this.options.missingKeyHandler?this.options.missingKeyHandler(S,l,C,k,O,n):this.backendConnector&&this.backendConnector.saveMissing&&this.backendConnector.saveMissing(S,l,C,k,O,n),this.emit("missingKey",S,l,C,d)};this.options.saveMissing&&(this.options.saveMissingPlurals&&v?V.forEach(S=>{const C=this.pluralResolver.getSuffixes(S,n);I&&n[`defaultValue${this.options.pluralSeparator}zero`]&&C.indexOf(`${this.options.pluralSeparator}zero`)<0&&C.push(`${this.options.pluralSeparator}zero`),C.forEach(L=>{x([S],s+L,n[`defaultValue${L}`]||W)})}):x(V,s,W))}d=this.extendTranslation(d,e,n,p,r),T&&d===s&&this.options.appendNamespaceToMissingKey&&(d=`${l}:${s}`),(T||_)&&this.options.parseMissingKeyHandler&&(this.options.compatibilityAPI!=="v1"?d=this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?`${l}:${s}`:s,_?d:void 0):d=this.options.parseMissingKeyHandler(d))}return o?(p.res=d,p.usedParams=this.getUsedParamsDetails(n),p):d}extendTranslation(e,n,r,o,a){var s=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,{...this.options.interpolation.defaultVariables,...r},r.lng||this.language||o.usedLng,o.usedNS,o.usedKey,{resolved:o});else if(!r.skipInterpolation){r.interpolation&&this.interpolator.init({...r,interpolation:{...this.options.interpolation,...r.interpolation}});const u=Y(e)&&(r&&r.interpolation&&r.interpolation.skipOnVariables!==void 0?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);let c;if(u){const d=e.match(this.interpolator.nestingRegexp);c=d&&d.length}let p=r.replace&&!Y(r.replace)?r.replace:r;if(this.options.interpolation.defaultVariables&&(p={...this.options.interpolation.defaultVariables,...p}),e=this.interpolator.interpolate(e,p,r.lng||this.language||o.usedLng,r),u){const d=e.match(this.interpolator.nestingRegexp),f=d&&d.length;c<f&&(r.nest=!1)}!r.lng&&this.options.compatibilityAPI!=="v1"&&o&&o.res&&(r.lng=this.language||o.usedLng),r.nest!==!1&&(e=this.interpolator.nest(e,function(){for(var d=arguments.length,f=new Array(d),b=0;b<d;b++)f[b]=arguments[b];return a&&a[0]===f[0]&&!r.context?(s.logger.warn(`It seems you are nesting recursively key: ${f[0]} in key: ${n[0]}`),null):s.translate(...f,n)},r)),r.interpolation&&this.interpolator.reset()}const i=r.postProcess||this.options.postProcess,l=Y(i)?[i]:i;return e!=null&&l&&l.length&&r.applyPostProcessor!==!1&&(e=Tg.handle(l,e,n,this.options&&this.options.postProcessPassResolved?{i18nResolved:{...o,usedParams:this.getUsedParamsDetails(r)},...r}:r,this)),e}resolve(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r,o,a,s,i;return Y(e)&&(e=[e]),e.forEach(l=>{if(this.isValidLookup(r))return;const u=this.extractFromKey(l,n),c=u.key;o=c;let p=u.namespaces;this.options.fallbackNS&&(p=p.concat(this.options.fallbackNS));const d=n.count!==void 0&&!Y(n.count),f=d&&!n.ordinal&&n.count===0&&this.pluralResolver.shouldUseIntlApi(),b=n.context!==void 0&&(Y(n.context)||typeof n.context=="number")&&n.context!=="",A=n.lngs?n.lngs:this.languageUtils.toResolveHierarchy(n.lng||this.language,n.fallbackLng);p.forEach(y=>{this.isValidLookup(r)||(i=y,!Ng[`${A[0]}-${y}`]&&this.utils&&this.utils.hasLoadedNamespace&&!this.utils.hasLoadedNamespace(i)&&(Ng[`${A[0]}-${y}`]=!0,this.logger.warn(`key "${o}" for languages "${A.join(", ")}" won't get resolved as namespace "${i}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),A.forEach(h=>{if(this.isValidLookup(r))return;s=h;const g=[c];if(this.i18nFormat&&this.i18nFormat.addLookupKeys)this.i18nFormat.addLookupKeys(g,c,h,y,n);else{let _;d&&(_=this.pluralResolver.getSuffix(h,n.count,n));const T=`${this.options.pluralSeparator}zero`,v=`${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;if(d&&(g.push(c+_),n.ordinal&&_.indexOf(v)===0&&g.push(c+_.replace(v,this.options.pluralSeparator)),f&&g.push(c+T)),b){const N=`${c}${this.options.contextSeparator}${n.context}`;g.push(N),d&&(g.push(N+_),n.ordinal&&_.indexOf(v)===0&&g.push(N+_.replace(v,this.options.pluralSeparator)),f&&g.push(N+T))}}let E;for(;E=g.pop();)this.isValidLookup(r)||(a=E,r=this.getResource(h,y,E,n))}))})}),{res:r,usedKey:o,exactUsedKey:a,usedLng:s,usedNS:i}}isValidLookup(e){return e!==void 0&&!(!this.options.returnNull&&e===null)&&!(!this.options.returnEmptyString&&e==="")}getResource(e,n,r){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,n,r,o):this.resourceStore.getResource(e,n,r,o)}getUsedParamsDetails(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const n=["defaultValue","ordinal","context","replace","lng","lngs","fallbackLng","ns","keySeparator","nsSeparator","returnObjects","returnDetails","joinArrays","postProcess","interpolation"],r=e.replace&&!Y(e.replace);let o=r?e.replace:e;if(r&&typeof e.count<"u"&&(o.count=e.count),this.options.interpolation.defaultVariables&&(o={...this.options.interpolation.defaultVariables,...o}),!r){o={...o};for(const a of n)delete o[a]}return o}static hasDefaultValue(e){const n="defaultValue";for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&n===r.substring(0,n.length)&&e[r]!==void 0)return!0;return!1}}const vc=t=>t.charAt(0).toUpperCase()+t.slice(1);class wg{constructor(e){this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=Xt.create("languageUtils")}getScriptPartFromCode(e){if(e=ti(e),!e||e.indexOf("-")<0)return null;const n=e.split("-");return n.length===2||(n.pop(),n[n.length-1].toLowerCase()==="x")?null:this.formatLanguageCode(n.join("-"))}getLanguagePartFromCode(e){if(e=ti(e),!e||e.indexOf("-")<0)return e;const n=e.split("-");return this.formatLanguageCode(n[0])}formatLanguageCode(e){if(Y(e)&&e.indexOf("-")>-1){if(typeof Intl<"u"&&typeof Intl.getCanonicalLocales<"u")try{let o=Intl.getCanonicalLocales(e)[0];if(o&&this.options.lowerCaseLng&&(o=o.toLowerCase()),o)return o}catch{}const n=["hans","hant","latn","cyrl","cans","mong","arab"];let r=e.split("-");return this.options.lowerCaseLng?r=r.map(o=>o.toLowerCase()):r.length===2?(r[0]=r[0].toLowerCase(),r[1]=r[1].toUpperCase(),n.indexOf(r[1].toLowerCase())>-1&&(r[1]=vc(r[1].toLowerCase()))):r.length===3&&(r[0]=r[0].toLowerCase(),r[1].length===2&&(r[1]=r[1].toUpperCase()),r[0]!=="sgn"&&r[2].length===2&&(r[2]=r[2].toUpperCase()),n.indexOf(r[1].toLowerCase())>-1&&(r[1]=vc(r[1].toLowerCase())),n.indexOf(r[2].toLowerCase())>-1&&(r[2]=vc(r[2].toLowerCase()))),r.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}isSupportedCode(e){return(this.options.load==="languageOnly"||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}getBestMatchFromCodes(e){if(!e)return null;let n;return e.forEach(r=>{if(n)return;const o=this.formatLanguageCode(r);(!this.options.supportedLngs||this.isSupportedCode(o))&&(n=o)}),!n&&this.options.supportedLngs&&e.forEach(r=>{if(n)return;const o=this.getLanguagePartFromCode(r);if(this.isSupportedCode(o))return n=o;n=this.options.supportedLngs.find(a=>{if(a===o)return a;if(!(a.indexOf("-")<0&&o.indexOf("-")<0)&&(a.indexOf("-")>0&&o.indexOf("-")<0&&a.substring(0,a.indexOf("-"))===o||a.indexOf(o)===0&&o.length>1))return a})}),n||(n=this.getFallbackCodes(this.options.fallbackLng)[0]),n}getFallbackCodes(e,n){if(!e)return[];if(typeof e=="function"&&(e=e(n)),Y(e)&&(e=[e]),Array.isArray(e))return e;if(!n)return e.default||[];let r=e[n];return r||(r=e[this.getScriptPartFromCode(n)]),r||(r=e[this.formatLanguageCode(n)]),r||(r=e[this.getLanguagePartFromCode(n)]),r||(r=e.default),r||[]}toResolveHierarchy(e,n){const r=this.getFallbackCodes(n||this.options.fallbackLng||[],e),o=[],a=s=>{s&&(this.isSupportedCode(s)?o.push(s):this.logger.warn(`rejecting language code not found in supportedLngs: ${s}`))};return Y(e)&&(e.indexOf("-")>-1||e.indexOf("_")>-1)?(this.options.load!=="languageOnly"&&a(this.formatLanguageCode(e)),this.options.load!=="languageOnly"&&this.options.load!=="currentOnly"&&a(this.getScriptPartFromCode(e)),this.options.load!=="currentOnly"&&a(this.getLanguagePartFromCode(e))):Y(e)&&a(this.formatLanguageCode(e)),r.forEach(s=>{o.indexOf(s)<0&&a(this.formatLanguageCode(s))}),o}}let oS=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],aS={1:t=>+(t>1),2:t=>+(t!=1),3:t=>0,4:t=>t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2,5:t=>t==0?0:t==1?1:t==2?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5,6:t=>t==1?0:t>=2&&t<=4?1:2,7:t=>t==1?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2,8:t=>t==1?0:t==2?1:t!=8&&t!=11?2:3,9:t=>+(t>=2),10:t=>t==1?0:t==2?1:t<7?2:t<11?3:4,11:t=>t==1||t==11?0:t==2||t==12?1:t>2&&t<20?2:3,12:t=>+(t%10!=1||t%100==11),13:t=>+(t!==0),14:t=>t==1?0:t==2?1:t==3?2:3,15:t=>t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2,16:t=>t%10==1&&t%100!=11?0:t!==0?1:2,17:t=>t==1||t%10==1&&t%100!=11?0:1,18:t=>t==0?0:t==1?1:2,19:t=>t==1?0:t==0||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3,20:t=>t==1?0:t==0||t%100>0&&t%100<20?1:2,21:t=>t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0,22:t=>t==1?0:t==2?1:(t<0||t>10)&&t%10==0?2:3};const sS=["v1","v2","v3"],iS=["v4"],xg={zero:0,one:1,two:2,few:3,many:4,other:5},lS=()=>{const t={};return oS.forEach(e=>{e.lngs.forEach(n=>{t[n]={numbers:e.nr,plurals:aS[e.fc]}})}),t};class uS{constructor(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};this.languageUtils=e,this.options=n,this.logger=Xt.create("pluralResolver"),(!this.options.compatibilityJSON||iS.includes(this.options.compatibilityJSON))&&(typeof Intl>"u"||!Intl.PluralRules)&&(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=lS(),this.pluralRulesCache={}}addRule(e,n){this.rules[e]=n}clearCache(){this.pluralRulesCache={}}getRule(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(this.shouldUseIntlApi()){const r=ti(e==="dev"?"en":e),o=n.ordinal?"ordinal":"cardinal",a=JSON.stringify({cleanedCode:r,type:o});if(a in this.pluralRulesCache)return this.pluralRulesCache[a];let s;try{s=new Intl.PluralRules(r,{type:o})}catch{if(!e.match(/-|_/))return;const l=this.languageUtils.getLanguagePartFromCode(e);s=this.getRule(l,n)}return this.pluralRulesCache[a]=s,s}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}needsPlural(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const r=this.getRule(e,n);return this.shouldUseIntlApi()?r&&r.resolvedOptions().pluralCategories.length>1:r&&r.numbers.length>1}getPluralFormsOfKey(e,n){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return this.getSuffixes(e,r).map(o=>`${n}${o}`)}getSuffixes(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const r=this.getRule(e,n);return r?this.shouldUseIntlApi()?r.resolvedOptions().pluralCategories.sort((o,a)=>xg[o]-xg[a]).map(o=>`${this.options.prepend}${n.ordinal?`ordinal${this.options.prepend}`:""}${o}`):r.numbers.map(o=>this.getSuffix(e,o,n)):[]}getSuffix(e,n){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};const o=this.getRule(e,r);return o?this.shouldUseIntlApi()?`${this.options.prepend}${r.ordinal?`ordinal${this.options.prepend}`:""}${o.select(n)}`:this.getSuffixRetroCompatible(o,n):(this.logger.warn(`no plural rule found for: ${e}`),"")}getSuffixRetroCompatible(e,n){const r=e.noAbs?e.plurals(n):e.plurals(Math.abs(n));let o=e.numbers[r];this.options.simplifyPluralSuffix&&e.numbers.length===2&&e.numbers[0]===1&&(o===2?o="plural":o===1&&(o=""));const a=()=>this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString();return this.options.compatibilityJSON==="v1"?o===1?"":typeof o=="number"?`_plural_${o.toString()}`:a():this.options.compatibilityJSON==="v2"||this.options.simplifyPluralSuffix&&e.numbers.length===2&&e.numbers[0]===1?a():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}shouldUseIntlApi(){return!sS.includes(this.options.compatibilityJSON)}}const Rg=function(t,e,n){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:".",o=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!0,a=YC(t,e,n);return!a&&o&&Y(n)&&(a=_c(t,n,r),a===void 0&&(a=_c(e,n,r))),a},yc=t=>t.replace(/\$/g,"$$$$");class cS{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.logger=Xt.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||(n=>n),this.init(e)}init(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});const{escape:n,escapeValue:r,useRawValueToEscape:o,prefix:a,prefixEscaped:s,suffix:i,suffixEscaped:l,formatSeparator:u,unescapeSuffix:c,unescapePrefix:p,nestingPrefix:d,nestingPrefixEscaped:f,nestingSuffix:b,nestingSuffixEscaped:A,nestingOptionsSeparator:y,maxReplaces:h,alwaysFormat:g}=e.interpolation;this.escape=n!==void 0?n:QC,this.escapeValue=r!==void 0?r:!0,this.useRawValueToEscape=o!==void 0?o:!1,this.prefix=a?$r(a):s||"{{",this.suffix=i?$r(i):l||"}}",this.formatSeparator=u||",",this.unescapePrefix=c?"":p||"-",this.unescapeSuffix=this.unescapePrefix?"":c||"",this.nestingPrefix=d?$r(d):f||$r("$t("),this.nestingSuffix=b?$r(b):A||$r(")"),this.nestingOptionsSeparator=y||",",this.maxReplaces=h||1e3,this.alwaysFormat=g!==void 0?g:!1,this.resetRegExp()}reset(){this.options&&this.init(this.options)}resetRegExp(){const e=(n,r)=>n&&n.source===r?(n.lastIndex=0,n):new RegExp(r,"g");this.regexp=e(this.regexp,`${this.prefix}(.+?)${this.suffix}`),this.regexpUnescape=e(this.regexpUnescape,`${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`),this.nestingRegexp=e(this.nestingRegexp,`${this.nestingPrefix}(.+?)${this.nestingSuffix}`)}interpolate(e,n,r,o){let a,s,i;const l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{},u=f=>{if(f.indexOf(this.formatSeparator)<0){const h=Rg(n,l,f,this.options.keySeparator,this.options.ignoreJSONStructure);return this.alwaysFormat?this.format(h,void 0,r,{...o,...n,interpolationkey:f}):h}const b=f.split(this.formatSeparator),A=b.shift().trim(),y=b.join(this.formatSeparator).trim();return this.format(Rg(n,l,A,this.options.keySeparator,this.options.ignoreJSONStructure),y,r,{...o,...n,interpolationkey:A})};this.resetRegExp();const c=o&&o.missingInterpolationHandler||this.options.missingInterpolationHandler,p=o&&o.interpolation&&o.interpolation.skipOnVariables!==void 0?o.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:f=>yc(f)},{regex:this.regexp,safeValue:f=>this.escapeValue?yc(this.escape(f)):yc(f)}].forEach(f=>{for(i=0;a=f.regex.exec(e);){const b=a[1].trim();if(s=u(b),s===void 0)if(typeof c=="function"){const y=c(e,a,o);s=Y(y)?y:""}else if(o&&Object.prototype.hasOwnProperty.call(o,b))s="";else if(p){s=a[0];continue}else this.logger.warn(`missed to pass in variable ${b} for interpolating ${e}`),s="";else!Y(s)&&!this.useRawValueToEscape&&(s=_g(s));const A=f.safeValue(s);if(e=e.replace(a[0],A),p?(f.regex.lastIndex+=s.length,f.regex.lastIndex-=a[0].length):f.regex.lastIndex=0,i++,i>=this.maxReplaces)break}}),e}nest(e,n){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},o,a,s;const i=(l,u)=>{const c=this.nestingOptionsSeparator;if(l.indexOf(c)<0)return l;const p=l.split(new RegExp(`${c}[ ]*{`));let d=`{${p[1]}`;l=p[0],d=this.interpolate(d,s);const f=d.match(/'/g),b=d.match(/"/g);(f&&f.length%2===0&&!b||b.length%2!==0)&&(d=d.replace(/'/g,'"'));try{s=JSON.parse(d),u&&(s={...u,...s})}catch(A){return this.logger.warn(`failed parsing options string in nesting for key ${l}`,A),`${l}${c}${d}`}return s.defaultValue&&s.defaultValue.indexOf(this.prefix)>-1&&delete s.defaultValue,l};for(;o=this.nestingRegexp.exec(e);){let l=[];s={...r},s=s.replace&&!Y(s.replace)?s.replace:s,s.applyPostProcessor=!1,delete s.defaultValue;let u=!1;if(o[0].indexOf(this.formatSeparator)!==-1&&!/{.*}/.test(o[1])){const c=o[1].split(this.formatSeparator).map(p=>p.trim());o[1]=c.shift(),l=c,u=!0}if(a=n(i.call(this,o[1].trim(),s),s),a&&o[0]===e&&!Y(a))return a;Y(a)||(a=_g(a)),a||(this.logger.warn(`missed to resolve ${o[1]} for nesting ${e}`),a=""),u&&(a=l.reduce((c,p)=>this.format(c,p,r.lng,{...r,interpolationkey:o[1].trim()}),a.trim())),e=e.replace(o[0],a),this.regexp.lastIndex=0}return e}}const dS=t=>{let e=t.toLowerCase().trim();const n={};if(t.indexOf("(")>-1){const r=t.split("(");e=r[0].toLowerCase().trim();const o=r[1].substring(0,r[1].length-1);e==="currency"&&o.indexOf(":")<0?n.currency||(n.currency=o.trim()):e==="relativetime"&&o.indexOf(":")<0?n.range||(n.range=o.trim()):o.split(";").forEach(s=>{if(s){const[i,...l]=s.split(":"),u=l.join(":").trim().replace(/^'+|'+$/g,""),c=i.trim();n[c]||(n[c]=u),u==="false"&&(n[c]=!1),u==="true"&&(n[c]=!0),isNaN(u)||(n[c]=parseInt(u,10))}})}return{formatName:e,formatOptions:n}},zr=t=>{const e={};return(n,r,o)=>{let a=o;o&&o.interpolationkey&&o.formatParams&&o.formatParams[o.interpolationkey]&&o[o.interpolationkey]&&(a={...a,[o.interpolationkey]:void 0});const s=r+JSON.stringify(a);let i=e[s];return i||(i=t(ti(r),o),e[s]=i),i(n)}};class pS{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.logger=Xt.create("formatter"),this.options=e,this.formats={number:zr((n,r)=>{const o=new Intl.NumberFormat(n,{...r});return a=>o.format(a)}),currency:zr((n,r)=>{const o=new Intl.NumberFormat(n,{...r,style:"currency"});return a=>o.format(a)}),datetime:zr((n,r)=>{const o=new Intl.DateTimeFormat(n,{...r});return a=>o.format(a)}),relativetime:zr((n,r)=>{const o=new Intl.RelativeTimeFormat(n,{...r});return a=>o.format(a,r.range||"day")}),list:zr((n,r)=>{const o=new Intl.ListFormat(n,{...r});return a=>o.format(a)})},this.init(e)}init(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{interpolation:{}};this.formatSeparator=n.interpolation.formatSeparator||","}add(e,n){this.formats[e.toLowerCase().trim()]=n}addCached(e,n){this.formats[e.toLowerCase().trim()]=zr(n)}format(e,n,r){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};const a=n.split(this.formatSeparator);if(a.length>1&&a[0].indexOf("(")>1&&a[0].indexOf(")")<0&&a.find(i=>i.indexOf(")")>-1)){const i=a.findIndex(l=>l.indexOf(")")>-1);a[0]=[a[0],...a.splice(1,i)].join(this.formatSeparator)}return a.reduce((i,l)=>{const{formatName:u,formatOptions:c}=dS(l);if(this.formats[u]){let p=i;try{const d=o&&o.formatParams&&o.formatParams[o.interpolationkey]||{},f=d.locale||d.lng||o.locale||o.lng||r;p=this.formats[u](i,f,{...c,...o,...d})}catch(d){this.logger.warn(d)}return p}else this.logger.warn(`there was no format function for ${u}`);return i},e)}}const fS=(t,e)=>{t.pending[e]!==void 0&&(delete t.pending[e],t.pendingCount--)};class mS extends ri{constructor(e,n,r){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{};super(),this.backend=e,this.store=n,this.services=r,this.languageUtils=r.languageUtils,this.options=o,this.logger=Xt.create("backendConnector"),this.waitingReads=[],this.maxParallelReads=o.maxParallelReads||10,this.readingCalls=0,this.maxRetries=o.maxRetries>=0?o.maxRetries:5,this.retryTimeout=o.retryTimeout>=1?o.retryTimeout:350,this.state={},this.queue=[],this.backend&&this.backend.init&&this.backend.init(r,o.backend,o)}queueLoad(e,n,r,o){const a={},s={},i={},l={};return e.forEach(u=>{let c=!0;n.forEach(p=>{const d=`${u}|${p}`;!r.reload&&this.store.hasResourceBundle(u,p)?this.state[d]=2:this.state[d]<0||(this.state[d]===1?s[d]===void 0&&(s[d]=!0):(this.state[d]=1,c=!1,s[d]===void 0&&(s[d]=!0),a[d]===void 0&&(a[d]=!0),l[p]===void 0&&(l[p]=!0)))}),c||(i[u]=!0)}),(Object.keys(a).length||Object.keys(s).length)&&this.queue.push({pending:s,pendingCount:Object.keys(s).length,loaded:{},errors:[],callback:o}),{toLoad:Object.keys(a),pending:Object.keys(s),toLoadLanguages:Object.keys(i),toLoadNamespaces:Object.keys(l)}}loaded(e,n,r){const o=e.split("|"),a=o[0],s=o[1];n&&this.emit("failedLoading",a,s,n),!n&&r&&this.store.addResourceBundle(a,s,r,void 0,void 0,{skipCopy:!0}),this.state[e]=n?-1:2,n&&r&&(this.state[e]=0);const i={};this.queue.forEach(l=>{KC(l.loaded,[a],s),fS(l,e),n&&l.errors.push(n),l.pendingCount===0&&!l.done&&(Object.keys(l.loaded).forEach(u=>{i[u]||(i[u]={});const c=l.loaded[u];c.length&&c.forEach(p=>{i[u][p]===void 0&&(i[u][p]=!0)})}),l.done=!0,l.errors.length?l.callback(l.errors):l.callback())}),this.emit("loaded",i),this.queue=this.queue.filter(l=>!l.done)}read(e,n,r){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:this.retryTimeout,s=arguments.length>5?arguments[5]:void 0;if(!e.length)return s(null,{});if(this.readingCalls>=this.maxParallelReads){this.waitingReads.push({lng:e,ns:n,fcName:r,tried:o,wait:a,callback:s});return}this.readingCalls++;const i=(u,c)=>{if(this.readingCalls--,this.waitingReads.length>0){const p=this.waitingReads.shift();this.read(p.lng,p.ns,p.fcName,p.tried,p.wait,p.callback)}if(u&&c&&o<this.maxRetries){setTimeout(()=>{this.read.call(this,e,n,r,o+1,a*2,s)},a);return}s(u,c)},l=this.backend[r].bind(this.backend);if(l.length===2){try{const u=l(e,n);u&&typeof u.then=="function"?u.then(c=>i(null,c)).catch(i):i(null,u)}catch(u){i(u)}return}return l(e,n,i)}prepareLoading(e,n){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();Y(e)&&(e=this.languageUtils.toResolveHierarchy(e)),Y(n)&&(n=[n]);const a=this.queueLoad(e,n,r,o);if(!a.toLoad.length)return a.pending.length||o(),null;a.toLoad.forEach(s=>{this.loadOne(s)})}load(e,n,r){this.prepareLoading(e,n,{},r)}reload(e,n,r){this.prepareLoading(e,n,{reload:!0},r)}loadOne(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";const r=e.split("|"),o=r[0],a=r[1];this.read(o,a,"read",void 0,void 0,(s,i)=>{s&&this.logger.warn(`${n}loading namespace ${a} for language ${o} failed`,s),!s&&i&&this.logger.log(`${n}loaded namespace ${a} for language ${o}`,i),this.loaded(e,s,i)})}saveMissing(e,n,r,o,a){let s=arguments.length>5&&arguments[5]!==void 0?arguments[5]:{},i=arguments.length>6&&arguments[6]!==void 0?arguments[6]:()=>{};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(n)){this.logger.warn(`did not save key "${r}" as the namespace "${n}" was not yet loaded`,"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");return}if(!(r==null||r==="")){if(this.backend&&this.backend.create){const l={...s,isUpdate:a},u=this.backend.create.bind(this.backend);if(u.length<6)try{let c;u.length===5?c=u(e,n,r,o,l):c=u(e,n,r,o),c&&typeof c.then=="function"?c.then(p=>i(null,p)).catch(i):i(null,c)}catch(c){i(c)}else u(e,n,r,o,i,l)}!e||!e[0]||this.store.addResource(e[0],n,r,o)}}}const Lg=()=>({debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!1,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:t=>{let e={};if(typeof t[1]=="object"&&(e=t[1]),Y(t[1])&&(e.defaultValue=t[1]),Y(t[2])&&(e.tDescription=t[2]),typeof t[2]=="object"||typeof t[3]=="object"){const n=t[3]||t[2];Object.keys(n).forEach(r=>{e[r]=n[r]})}return e},interpolation:{escapeValue:!0,format:t=>t,prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}),Og=t=>(Y(t.ns)&&(t.ns=[t.ns]),Y(t.fallbackLng)&&(t.fallbackLng=[t.fallbackLng]),Y(t.fallbackNS)&&(t.fallbackNS=[t.fallbackNS]),t.supportedLngs&&t.supportedLngs.indexOf("cimode")<0&&(t.supportedLngs=t.supportedLngs.concat(["cimode"])),t),ai=()=>{},gS=t=>{Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach(n=>{typeof t[n]=="function"&&(t[n]=t[n].bind(t))})};class Qo extends ri{constructor(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(super(),this.options=Og(e),this.services={},this.logger=Xt,this.modules={external:[]},gS(this),n&&!this.isInitialized&&!e.isClone){if(!this.options.initImmediate)return this.init(e,n),this;setTimeout(()=>{this.init(e,n)},0)}}init(){var e=this;let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;this.isInitializing=!0,typeof n=="function"&&(r=n,n={}),!n.defaultNS&&n.defaultNS!==!1&&n.ns&&(Y(n.ns)?n.defaultNS=n.ns:n.ns.indexOf("translation")<0&&(n.defaultNS=n.ns[0]));const o=Lg();this.options={...o,...this.options,...Og(n)},this.options.compatibilityAPI!=="v1"&&(this.options.interpolation={...o.interpolation,...this.options.interpolation}),n.keySeparator!==void 0&&(this.options.userDefinedKeySeparator=n.keySeparator),n.nsSeparator!==void 0&&(this.options.userDefinedNsSeparator=n.nsSeparator);const a=c=>c?typeof c=="function"?new c:c:null;if(!this.options.isClone){this.modules.logger?Xt.init(a(this.modules.logger),this.options):Xt.init(null,this.options);let c;this.modules.formatter?c=this.modules.formatter:typeof Intl<"u"&&(c=pS);const p=new wg(this.options);this.store=new Sg(this.options.resources,this.options);const d=this.services;d.logger=Xt,d.resourceStore=this.store,d.languageUtils=p,d.pluralResolver=new uS(p,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),c&&(!this.options.interpolation.format||this.options.interpolation.format===o.interpolation.format)&&(d.formatter=a(c),d.formatter.init(d,this.options),this.options.interpolation.format=d.formatter.format.bind(d.formatter)),d.interpolator=new cS(this.options),d.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},d.backendConnector=new mS(a(this.modules.backend),d.resourceStore,d,this.options),d.backendConnector.on("*",function(f){for(var b=arguments.length,A=new Array(b>1?b-1:0),y=1;y<b;y++)A[y-1]=arguments[y];e.emit(f,...A)}),this.modules.languageDetector&&(d.languageDetector=a(this.modules.languageDetector),d.languageDetector.init&&d.languageDetector.init(d,this.options.detection,this.options)),this.modules.i18nFormat&&(d.i18nFormat=a(this.modules.i18nFormat),d.i18nFormat.init&&d.i18nFormat.init(this)),this.translator=new oi(this.services,this.options),this.translator.on("*",function(f){for(var b=arguments.length,A=new Array(b>1?b-1:0),y=1;y<b;y++)A[y-1]=arguments[y];e.emit(f,...A)}),this.modules.external.forEach(f=>{f.init&&f.init(this)})}if(this.format=this.options.interpolation.format,r||(r=ai),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){const c=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);c.length>0&&c[0]!=="dev"&&(this.options.lng=c[0])}!this.services.languageDetector&&!this.options.lng&&this.logger.warn("init: no languageDetector is used and no lng is defined"),["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach(c=>{this[c]=function(){return e.store[c](...arguments)}}),["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach(c=>{this[c]=function(){return e.store[c](...arguments),e}});const l=Yo(),u=()=>{const c=(p,d)=>{this.isInitializing=!1,this.isInitialized&&!this.initializedStoreOnce&&this.logger.warn("init: i18next is already initialized. You should call init just once!"),this.isInitialized=!0,this.options.isClone||this.logger.log("initialized",this.options),this.emit("initialized",this.options),l.resolve(d),r(p,d)};if(this.languages&&this.options.compatibilityAPI!=="v1"&&!this.isInitialized)return c(null,this.t.bind(this));this.changeLanguage(this.options.lng,c)};return this.options.resources||!this.options.initImmediate?u():setTimeout(u,0),l}loadResources(e){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:ai;const o=Y(e)?e:this.language;if(typeof e=="function"&&(r=e),!this.options.resources||this.options.partialBundledLanguages){if(o&&o.toLowerCase()==="cimode"&&(!this.options.preload||this.options.preload.length===0))return r();const a=[],s=i=>{if(!i||i==="cimode")return;this.services.languageUtils.toResolveHierarchy(i).forEach(u=>{u!=="cimode"&&a.indexOf(u)<0&&a.push(u)})};o?s(o):this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(l=>s(l)),this.options.preload&&this.options.preload.forEach(i=>s(i)),this.services.backendConnector.load(a,this.options.ns,i=>{!i&&!this.resolvedLanguage&&this.language&&this.setResolvedLanguage(this.language),r(i)})}else r(null)}reloadResources(e,n,r){const o=Yo();return typeof e=="function"&&(r=e,e=void 0),typeof n=="function"&&(r=n,n=void 0),e||(e=this.languages),n||(n=this.options.ns),r||(r=ai),this.services.backendConnector.reload(e,n,a=>{o.resolve(),r(a)}),o}use(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return e.type==="backend"&&(this.modules.backend=e),(e.type==="logger"||e.log&&e.warn&&e.error)&&(this.modules.logger=e),e.type==="languageDetector"&&(this.modules.languageDetector=e),e.type==="i18nFormat"&&(this.modules.i18nFormat=e),e.type==="postProcessor"&&Tg.addPostProcessor(e),e.type==="formatter"&&(this.modules.formatter=e),e.type==="3rdParty"&&this.modules.external.push(e),this}setResolvedLanguage(e){if(!(!e||!this.languages)&&!(["cimode","dev"].indexOf(e)>-1))for(let n=0;n<this.languages.length;n++){const r=this.languages[n];if(!(["cimode","dev"].indexOf(r)>-1)&&this.store.hasLanguageSomeTranslations(r)){this.resolvedLanguage=r;break}}}changeLanguage(e,n){var r=this;this.isLanguageChangingTo=e;const o=Yo();this.emit("languageChanging",e);const a=l=>{this.language=l,this.languages=this.services.languageUtils.toResolveHierarchy(l),this.resolvedLanguage=void 0,this.setResolvedLanguage(l)},s=(l,u)=>{u?(a(u),this.translator.changeLanguage(u),this.isLanguageChangingTo=void 0,this.emit("languageChanged",u),this.logger.log("languageChanged",u)):this.isLanguageChangingTo=void 0,o.resolve(function(){return r.t(...arguments)}),n&&n(l,function(){return r.t(...arguments)})},i=l=>{!e&&!l&&this.services.languageDetector&&(l=[]);const u=Y(l)?l:this.services.languageUtils.getBestMatchFromCodes(l);u&&(this.language||a(u),this.translator.language||this.translator.changeLanguage(u),this.services.languageDetector&&this.services.languageDetector.cacheUserLanguage&&this.services.languageDetector.cacheUserLanguage(u)),this.loadResources(u,c=>{s(c,u)})};return!e&&this.services.languageDetector&&!this.services.languageDetector.async?i(this.services.languageDetector.detect()):!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect.length===0?this.services.languageDetector.detect().then(i):this.services.languageDetector.detect(i):i(e),o}getFixedT(e,n,r){var o=this;const a=function(s,i){let l;if(typeof i!="object"){for(var u=arguments.length,c=new Array(u>2?u-2:0),p=2;p<u;p++)c[p-2]=arguments[p];l=o.options.overloadTranslationOptionHandler([s,i].concat(c))}else l={...i};l.lng=l.lng||a.lng,l.lngs=l.lngs||a.lngs,l.ns=l.ns||a.ns,l.keyPrefix!==""&&(l.keyPrefix=l.keyPrefix||r||a.keyPrefix);const d=o.options.keySeparator||".";let f;return l.keyPrefix&&Array.isArray(s)?f=s.map(b=>`${l.keyPrefix}${d}${b}`):f=l.keyPrefix?`${l.keyPrefix}${d}${s}`:s,o.t(f,l)};return Y(e)?a.lng=e:a.lngs=e,a.ns=n,a.keyPrefix=r,a}t(){return this.translator&&this.translator.translate(...arguments)}exists(){return this.translator&&this.translator.exists(...arguments)}setDefaultNamespace(e){this.options.defaultNS=e}hasLoadedNamespace(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;const r=n.lng||this.resolvedLanguage||this.languages[0],o=this.options?this.options.fallbackLng:!1,a=this.languages[this.languages.length-1];if(r.toLowerCase()==="cimode")return!0;const s=(i,l)=>{const u=this.services.backendConnector.state[`${i}|${l}`];return u===-1||u===0||u===2};if(n.precheck){const i=n.precheck(this,s);if(i!==void 0)return i}return!!(this.hasResourceBundle(r,e)||!this.services.backendConnector.backend||this.options.resources&&!this.options.partialBundledLanguages||s(r,e)&&(!o||s(a,e)))}loadNamespaces(e,n){const r=Yo();return this.options.ns?(Y(e)&&(e=[e]),e.forEach(o=>{this.options.ns.indexOf(o)<0&&this.options.ns.push(o)}),this.loadResources(o=>{r.resolve(),n&&n(o)}),r):(n&&n(),Promise.resolve())}loadLanguages(e,n){const r=Yo();Y(e)&&(e=[e]);const o=this.options.preload||[],a=e.filter(s=>o.indexOf(s)<0&&this.services.languageUtils.isSupportedCode(s));return a.length?(this.options.preload=o.concat(a),this.loadResources(s=>{r.resolve(),n&&n(s)}),r):(n&&n(),Promise.resolve())}dir(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";const n=["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"],r=this.services&&this.services.languageUtils||new wg(Lg());return n.indexOf(r.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}static createInstance(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return new Qo(e,n)}cloneInstance(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:ai;const r=e.forkResourceStore;r&&delete e.forkResourceStore;const o={...this.options,...e,isClone:!0},a=new Qo(o);return(e.debug!==void 0||e.prefix!==void 0)&&(a.logger=a.logger.clone(e)),["store","services","language"].forEach(i=>{a[i]=this[i]}),a.services={...this.services},a.services.utils={hasLoadedNamespace:a.hasLoadedNamespace.bind(a)},r&&(a.store=new Sg(this.store.data,o),a.services.resourceStore=a.store),a.translator=new oi(a.services,o),a.translator.on("*",function(i){for(var l=arguments.length,u=new Array(l>1?l-1:0),c=1;c<l;c++)u[c-1]=arguments[c];a.emit(i,...u)}),a.init(o,n),a.translator.options=o,a.translator.backendConnector.services.utils={hasLoadedNamespace:a.hasLoadedNamespace.bind(a)},a}toJSON(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}const Fe=Qo.createInstance();Fe.createInstance=Qo.createInstance,Fe.createInstance,Fe.dir,Fe.init,Fe.loadResources,Fe.reloadResources,Fe.use,Fe.changeLanguage,Fe.getFixedT,Fe.t,Fe.exists,Fe.setDefaultNamespace,Fe.hasLoadedNamespace,Fe.loadNamespaces,Fe.loadLanguages;function hS(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Jo(t){"@babel/helpers - typeof";return Jo=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jo(t)}function ES(t,e){if(Jo(t)!="object"||!t)return t;var n=t[Symbol.toPrimitive];if(n!==void 0){var r=n.call(t,e||"default");if(Jo(r)!="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function bS(t){var e=ES(t,"string");return Jo(e)=="symbol"?e:e+""}function kg(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,bS(r.key),r)}}function AS(t,e,n){return e&&kg(t.prototype,e),n&&kg(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var Ig=[],_S=Ig.forEach,vS=Ig.slice;function yS(t){return _S.call(vS.call(arguments,1),function(e){if(e)for(var n in e)t[n]===void 0&&(t[n]=e[n])}),t}var Mg=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,DS=function(e,n,r){var o=r||{};o.path=o.path||"/";var a=encodeURIComponent(n),s="".concat(e,"=").concat(a);if(o.maxAge>0){var i=o.maxAge-0;if(Number.isNaN(i))throw new Error("maxAge should be a Number");s+="; Max-Age=".concat(Math.floor(i))}if(o.domain){if(!Mg.test(o.domain))throw new TypeError("option domain is invalid");s+="; Domain=".concat(o.domain)}if(o.path){if(!Mg.test(o.path))throw new TypeError("option path is invalid");s+="; Path=".concat(o.path)}if(o.expires){if(typeof o.expires.toUTCString!="function")throw new TypeError("option expires is invalid");s+="; Expires=".concat(o.expires.toUTCString())}if(o.httpOnly&&(s+="; HttpOnly"),o.secure&&(s+="; Secure"),o.sameSite){var l=typeof o.sameSite=="string"?o.sameSite.toLowerCase():o.sameSite;switch(l){case!0:s+="; SameSite=Strict";break;case"lax":s+="; SameSite=Lax";break;case"strict":s+="; SameSite=Strict";break;case"none":s+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return s},Fg={create:function(e,n,r,o){var a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:{path:"/",sameSite:"strict"};r&&(a.expires=new Date,a.expires.setTime(a.expires.getTime()+r*60*1e3)),o&&(a.domain=o),document.cookie=DS(e,encodeURIComponent(n),a)},read:function(e){for(var n="".concat(e,"="),r=document.cookie.split(";"),o=0;o<r.length;o++){for(var a=r[o];a.charAt(0)===" ";)a=a.substring(1,a.length);if(a.indexOf(n)===0)return a.substring(n.length,a.length)}return null},remove:function(e){this.create(e,"",-1)}},CS={name:"cookie",lookup:function(e){var n;if(e.lookupCookie&&typeof document<"u"){var r=Fg.read(e.lookupCookie);r&&(n=r)}return n},cacheUserLanguage:function(e,n){n.lookupCookie&&typeof document<"u"&&Fg.create(n.lookupCookie,e,n.cookieMinutes,n.cookieDomain,n.cookieOptions)}},SS={name:"querystring",lookup:function(e){var n;if(typeof window<"u"){var r=window.location.search;!window.location.search&&window.location.hash&&window.location.hash.indexOf("?")>-1&&(r=window.location.hash.substring(window.location.hash.indexOf("?")));for(var o=r.substring(1),a=o.split("&"),s=0;s<a.length;s++){var i=a[s].indexOf("=");if(i>0){var l=a[s].substring(0,i);l===e.lookupQuerystring&&(n=a[s].substring(i+1))}}}return n}},ea=null,Bg=function(){if(ea!==null)return ea;try{ea=window!=="undefined"&&window.localStorage!==null;var e="i18next.translate.boo";window.localStorage.setItem(e,"foo"),window.localStorage.removeItem(e)}catch{ea=!1}return ea},TS={name:"localStorage",lookup:function(e){var n;if(e.lookupLocalStorage&&Bg()){var r=window.localStorage.getItem(e.lookupLocalStorage);r&&(n=r)}return n},cacheUserLanguage:function(e,n){n.lookupLocalStorage&&Bg()&&window.localStorage.setItem(n.lookupLocalStorage,e)}},ta=null,Pg=function(){if(ta!==null)return ta;try{ta=window!=="undefined"&&window.sessionStorage!==null;var e="i18next.translate.boo";window.sessionStorage.setItem(e,"foo"),window.sessionStorage.removeItem(e)}catch{ta=!1}return ta},NS={name:"sessionStorage",lookup:function(e){var n;if(e.lookupSessionStorage&&Pg()){var r=window.sessionStorage.getItem(e.lookupSessionStorage);r&&(n=r)}return n},cacheUserLanguage:function(e,n){n.lookupSessionStorage&&Pg()&&window.sessionStorage.setItem(n.lookupSessionStorage,e)}},wS={name:"navigator",lookup:function(e){var n=[];if(typeof navigator<"u"){if(navigator.languages)for(var r=0;r<navigator.languages.length;r++)n.push(navigator.languages[r]);navigator.userLanguage&&n.push(navigator.userLanguage),navigator.language&&n.push(navigator.language)}return n.length>0?n:void 0}},xS={name:"htmlTag",lookup:function(e){var n,r=e.htmlTag||(typeof document<"u"?document.documentElement:null);return r&&typeof r.getAttribute=="function"&&(n=r.getAttribute("lang")),n}},RS={name:"path",lookup:function(e){var n;if(typeof window<"u"){var r=window.location.pathname.match(/\/([a-zA-Z-]*)/g);if(r instanceof Array)if(typeof e.lookupFromPathIndex=="number"){if(typeof r[e.lookupFromPathIndex]!="string")return;n=r[e.lookupFromPathIndex].replace("/","")}else n=r[0].replace("/","")}return n}},LS={name:"subdomain",lookup:function(e){var n=typeof e.lookupFromSubdomainIndex=="number"?e.lookupFromSubdomainIndex+1:1,r=typeof window<"u"&&window.location&&window.location.hostname&&window.location.hostname.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);if(r)return r[n]}},Ug=!1;try{document.cookie,Ug=!0}catch{}var qg=["querystring","cookie","localStorage","sessionStorage","navigator","htmlTag"];Ug||qg.splice(1,1);function OS(){return{order:qg,lookupQuerystring:"lng",lookupCookie:"i18next",lookupLocalStorage:"i18nextLng",lookupSessionStorage:"i18nextLng",caches:["localStorage"],excludeCacheFor:["cimode"],convertDetectedLanguage:function(e){return e}}}var Hg=function(){function t(e){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};hS(this,t),this.type="languageDetector",this.detectors={},this.init(e,n)}return AS(t,[{key:"init",value:function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},o=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};this.services=n||{languageUtils:{}},this.options=yS(r,this.options||{},OS()),typeof this.options.convertDetectedLanguage=="string"&&this.options.convertDetectedLanguage.indexOf("15897")>-1&&(this.options.convertDetectedLanguage=function(a){return a.replace("-","_")}),this.options.lookupFromUrlIndex&&(this.options.lookupFromPathIndex=this.options.lookupFromUrlIndex),this.i18nOptions=o,this.addDetector(CS),this.addDetector(SS),this.addDetector(TS),this.addDetector(NS),this.addDetector(wS),this.addDetector(xS),this.addDetector(RS),this.addDetector(LS)}},{key:"addDetector",value:function(n){return this.detectors[n.name]=n,this}},{key:"detect",value:function(n){var r=this;n||(n=this.options.order);var o=[];return n.forEach(function(a){if(r.detectors[a]){var s=r.detectors[a].lookup(r.options);s&&typeof s=="string"&&(s=[s]),s&&(o=o.concat(s))}}),o=o.map(function(a){return r.options.convertDetectedLanguage(a)}),this.services.languageUtils.getBestMatchFromCodes?o:o.length>0?o[0]:null}},{key:"cacheUserLanguage",value:function(n,r){var o=this;r||(r=this.options.caches),r&&(this.options.excludeCacheFor&&this.options.excludeCacheFor.indexOf(n)>-1||r.forEach(function(a){o.detectors[a]&&o.detectors[a].cacheUserLanguage(n,o.options)}))}}])}();Hg.type="languageDetector";const kS={chat:{"send-message":"Send a message","reset-chat":"Reset Chat"}},IS={chat:{"send-message":null,"reset-chat":null}},MS={chat:{"send-message":null,"reset-chat":null}},FS={chat:{"send-message":"Envoyer un message","reset-chat":"Réinitialiser la conversation"}},BS={chat:{"send-message":null,"reset-chat":null}},PS={chat:{"send-message":null,"reset-chat":null}},US={chat:{"send-message":null,"reset-chat":null}},qS={chat:{"send-message":null,"reset-chat":null}},HS={chat:{"send-message":null,"reset-chat":null}},VS={chat:{"send-message":null,"reset-chat":null}},$S={chat:{"send-message":null,"reset-chat":null}},zS={chat:{"send-message":null,"reset-chat":null}},GS={chat:{"send-message":null,"reset-chat":null}},ZS={chat:{"send-message":null,"reset-chat":null}},jS={chat:{"send-message":null,"reset-chat":null}},WS={chat:{"send-message":null,"reset-chat":null}},KS={chat:{"send-message":null,"reset-chat":null}},YS={chat:{"send-message":null,"reset-chat":null}},XS="common",QS={en:{common:kS},zh:{common:BS},"zh-tw":{common:GS},es:{common:MS},de:{common:PS},fr:{common:FS},ko:{common:IS},ru:{common:US},it:{common:qS},pt:{common:HS},he:{common:VS},nl:{common:$S},vi:{common:zS},fa:{common:ZS},tr:{common:jS},ar:{common:WS},da:{common:KS},ja:{common:YS}};function JS(t){const e=(t==null?void 0:t.language)||"en";return Fe.use(MC).use(Hg).init({fallbackLng:"en",lng:e,debug:!1,defaultNS:XS,resources:QS,load:"languageOnly",lowerCaseLng:!0,detection:{order:["localStorage","navigator"],lookupLocalStorage:"allm_embed_language"},interpolation:{escapeValue:!1}}),Fe}function eT(){const{isChatOpen:t,toggleOpenChat:e}=PE(),n=OE(),r=Y0();if(U.useEffect(()=>{n.openOnLoad==="on"&&e(!0);const l=n.jwtToken;console.log("JWT Token:",l),w_(l)},[n.loaded]),!n.loaded)return null;const o={"bottom-left":"allm-bottom-0 allm-left-0 allm-ml-4","bottom-right":"allm-bottom-0 allm-right-0 allm-mr-4","top-left":"allm-top-0 allm-left-0 allm-ml-4 allm-mt-4","top-right":"allm-top-0 allm-right-0 allm-mr-4 allm-mt-4"},a=n.position||"bottom-right",s=n.windowWidth??"400px",i=n.windowHeight??"700px";return w.jsxs(UC,{i18n:Fe,children:[w.jsx(HE,{}),w.jsx("div",{id:"anything-llm-embed-chat-container",className:`allm-fixed allm-inset-0 allm-z-50 ${t?"allm-block":"allm-hidden"}`,children:w.jsx("div",{style:{maxWidth:s,maxHeight:i,height:"100%"},className:`allm-h-full allm-w-full allm-bg-white allm-fixed allm-bottom-0 allm-right-0 allm-mb-4 allm-md:mr-4 allm-rounded-2xl allm-border allm-border-gray-300 allm-shadow-[0_4px_14px_rgba(0,0,0,0.25)] allm-flex allm-flex-col ${o[a]}`,id:"anything-llm-chat",children:t&&w.jsx(zC,{closeChat:()=>e(!1),settings:n,sessionId:r})})}),!t&&w.jsx("div",{id:"anything-llm-embed-chat-button-container",className:`allm-fixed allm-bottom-0 ${o[a]} allm-mb-4 allm-z-50`,children:w.jsx(b_,{settings:n,isOpen:t,toggleOpen:()=>e(!0)})})]})}const Vg=document.createElement("div");document.body.appendChild(Vg);const In=Object.assign({},(($g=document==null?void 0:document.currentScript)==null?void 0:$g.dataset)||{}),ae={settings:In,stylesSrc:BE((zg=document==null?void 0:document.currentScript)==null?void 0:zg.src),USER_STYLES:{msgBg:(In==null?void 0:In.userBgColor)??"#3DBEF5",base:"allm-text-white allm-rounded-t-[18px] allm-rounded-bl-[18px] allm-rounded-br-[4px] allm-mx-[20px]"},ASSISTANT_STYLES:{msgBg:(In==null?void 0:In.assistantBgColor)??"#FFFFFF",base:"allm-text-[#222628] allm-rounded-t-[18px] allm-rounded-br-[18px] allm-rounded-bl-[4px] allm-mr-[37px] allm-ml-[9px]"}};JS(In),pi.createRoot(Vg).render(w.jsx(m.StrictMode,{children:w.jsx(eT,{})})),_t.embedderSettings=ae,Object.defineProperty(_t,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
